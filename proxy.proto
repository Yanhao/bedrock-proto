syntax = "proto3";

package bedrock.proxy;
option cc_generic_services = true;

enum TxStatus {
    START = 0;
    FINISHED = 1;
}

enum TxLockType {
    SHARED = 0;
    EXCLUSIVE = 1;
}

message TxRecordLock {
    TxLockType lock_type = 1;
    bytes key = 2;
}

message TxRangeLock {
    TxLockType lock_type = 1;
    bytes start_key = 2;
    bytes end_key = 3;
}

message TxRecord {
    uint32 storage_id = 1;
    uint64 tx_id = 2;
    TxStatus status = 3;
    uint64 heartbeat_ts = 4;
    repeated TxRecordLock record_locks = 5;
    repeated TxRangeLock range_locks = 6;
}

enum Error {
    OK = 0;
    NO_SUCH_KEY = 1;
    INVLIAD_PARAMETERS = 2;

    UNKNOWN = 255;
}

message KvGetRequest {
    uint32 storage_id = 1;
    bytes key = 2;
    bytes read_latest = 3;
}

message KvGetResponse {
    bytes value = 1;

    Error err = 255;
}

message KvSetRequest {
    uint32 storage_id = 1;
    bytes key = 2;
    bytes value = 3;
}

message KvSetResponse {
    Error err = 255;
}

message KvDeleteRequest {
    uint32 storage_id = 1;
    bytes key = 2;
}

message KvDeleteResponse {
    Error err = 255;
}

message KvScanRequest {
    uint32 storage_id = 1;
    bytes prefix = 2;
    uint32 limit = 3;
}

message KeyValue {
    bytes key = 1;
    bytes value = 2;
}

message KvScanResponse {
    repeated KeyValue kvs = 1;

    Error err = 255;
}

enum PredicateOp {
    EQUAL = 0;
    NOT_EQUAL = 1;
}

message Predicate {
    bytes key = 1;
    bytes value = 2;
    PredicateOp op = 3;
}

message BatchRequest {
    uint32 storage_id = 1;
    repeated KeyValue kvs = 2;
    repeated Predicate predicates = 3;
}

message BatchResponse {
    Error err = 255;
}

service ProxyService {
    rpc KvSet(KvSetRequest) returns (KvSetResponse);
    rpc KvGet(KvGetRequest) returns (KvGetResponse);
    rpc KvDelete(KvDeleteRequest) returns (KvDeleteResponse);
    rpc KvScan(KvScanRequest) returns (stream KvScanResponse);
    rpc Batch(BatchRequest) returns (BatchResponse);
}
