// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dataserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dataserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dataserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dataserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[58]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dataserver_2eproto;
namespace bedrock {
namespace dataserver {
class AddShardReplicaRequest;
class AddShardReplicaRequestDefaultTypeInternal;
extern AddShardReplicaRequestDefaultTypeInternal _AddShardReplicaRequest_default_instance_;
class AddShardReplicaResponse;
class AddShardReplicaResponseDefaultTypeInternal;
extern AddShardReplicaResponseDefaultTypeInternal _AddShardReplicaResponse_default_instance_;
class CancelTxRequest;
class CancelTxRequestDefaultTypeInternal;
extern CancelTxRequestDefaultTypeInternal _CancelTxRequest_default_instance_;
class CancelTxResponse;
class CancelTxResponseDefaultTypeInternal;
extern CancelTxResponseDefaultTypeInternal _CancelTxResponse_default_instance_;
class CommitTxRequest;
class CommitTxRequestDefaultTypeInternal;
extern CommitTxRequestDefaultTypeInternal _CommitTxRequest_default_instance_;
class CommitTxResponse;
class CommitTxResponseDefaultTypeInternal;
extern CommitTxResponseDefaultTypeInternal _CommitTxResponse_default_instance_;
class CreateShardRequest;
class CreateShardRequestDefaultTypeInternal;
extern CreateShardRequestDefaultTypeInternal _CreateShardRequest_default_instance_;
class CreateShardResponse;
class CreateShardResponseDefaultTypeInternal;
extern CreateShardResponseDefaultTypeInternal _CreateShardResponse_default_instance_;
class DataServerJoinRequest;
class DataServerJoinRequestDefaultTypeInternal;
extern DataServerJoinRequestDefaultTypeInternal _DataServerJoinRequest_default_instance_;
class DataServerJoinResponse;
class DataServerJoinResponseDefaultTypeInternal;
extern DataServerJoinResponseDefaultTypeInternal _DataServerJoinResponse_default_instance_;
class DataServerLeaveRequest;
class DataServerLeaveRequestDefaultTypeInternal;
extern DataServerLeaveRequestDefaultTypeInternal _DataServerLeaveRequest_default_instance_;
class DataServerLeaveResponse;
class DataServerLeaveResponseDefaultTypeInternal;
extern DataServerLeaveResponseDefaultTypeInternal _DataServerLeaveResponse_default_instance_;
class DeleteShardReplicaRequest;
class DeleteShardReplicaRequestDefaultTypeInternal;
extern DeleteShardReplicaRequestDefaultTypeInternal _DeleteShardReplicaRequest_default_instance_;
class DeleteShardReplicaResponse;
class DeleteShardReplicaResponseDefaultTypeInternal;
extern DeleteShardReplicaResponseDefaultTypeInternal _DeleteShardReplicaResponse_default_instance_;
class DeleteShardRequest;
class DeleteShardRequestDefaultTypeInternal;
extern DeleteShardRequestDefaultTypeInternal _DeleteShardRequest_default_instance_;
class DeleteShardResponse;
class DeleteShardResponseDefaultTypeInternal;
extern DeleteShardResponseDefaultTypeInternal _DeleteShardResponse_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class LockRangeRequest;
class LockRangeRequestDefaultTypeInternal;
extern LockRangeRequestDefaultTypeInternal _LockRangeRequest_default_instance_;
class LockRangeResponse;
class LockRangeResponseDefaultTypeInternal;
extern LockRangeResponseDefaultTypeInternal _LockRangeResponse_default_instance_;
class LockRecordRequest;
class LockRecordRequestDefaultTypeInternal;
extern LockRecordRequestDefaultTypeInternal _LockRecordRequest_default_instance_;
class LockRecordResponse;
class LockRecordResponseDefaultTypeInternal;
extern LockRecordResponseDefaultTypeInternal _LockRecordResponse_default_instance_;
class LockShardRequest;
class LockShardRequestDefaultTypeInternal;
extern LockShardRequestDefaultTypeInternal _LockShardRequest_default_instance_;
class LockShardResponse;
class LockShardResponseDefaultTypeInternal;
extern LockShardResponseDefaultTypeInternal _LockShardResponse_default_instance_;
class MergeShardRequest;
class MergeShardRequestDefaultTypeInternal;
extern MergeShardRequestDefaultTypeInternal _MergeShardRequest_default_instance_;
class MergeShardResponse;
class MergeShardResponseDefaultTypeInternal;
extern MergeShardResponseDefaultTypeInternal _MergeShardResponse_default_instance_;
class MigrateShardRequest;
class MigrateShardRequestDefaultTypeInternal;
extern MigrateShardRequestDefaultTypeInternal _MigrateShardRequest_default_instance_;
class MigrateShardRequest_Entry;
class MigrateShardRequest_EntryDefaultTypeInternal;
extern MigrateShardRequest_EntryDefaultTypeInternal _MigrateShardRequest_Entry_default_instance_;
class MigrateShardResponse;
class MigrateShardResponseDefaultTypeInternal;
extern MigrateShardResponseDefaultTypeInternal _MigrateShardResponse_default_instance_;
class PrepareTxRequest;
class PrepareTxRequestDefaultTypeInternal;
extern PrepareTxRequestDefaultTypeInternal _PrepareTxRequest_default_instance_;
class PrepareTxResponse;
class PrepareTxResponseDefaultTypeInternal;
extern PrepareTxResponseDefaultTypeInternal _PrepareTxResponse_default_instance_;
class PullShardDataRequest;
class PullShardDataRequestDefaultTypeInternal;
extern PullShardDataRequestDefaultTypeInternal _PullShardDataRequest_default_instance_;
class PullShardDataResponse;
class PullShardDataResponseDefaultTypeInternal;
extern PullShardDataResponseDefaultTypeInternal _PullShardDataResponse_default_instance_;
class ShardAppendLogRequest;
class ShardAppendLogRequestDefaultTypeInternal;
extern ShardAppendLogRequestDefaultTypeInternal _ShardAppendLogRequest_default_instance_;
class ShardAppendLogRequest_Entry;
class ShardAppendLogRequest_EntryDefaultTypeInternal;
extern ShardAppendLogRequest_EntryDefaultTypeInternal _ShardAppendLogRequest_Entry_default_instance_;
class ShardAppendLogResponse;
class ShardAppendLogResponseDefaultTypeInternal;
extern ShardAppendLogResponseDefaultTypeInternal _ShardAppendLogResponse_default_instance_;
class ShardInfoRequest;
class ShardInfoRequestDefaultTypeInternal;
extern ShardInfoRequestDefaultTypeInternal _ShardInfoRequest_default_instance_;
class ShardInfoResponse;
class ShardInfoResponseDefaultTypeInternal;
extern ShardInfoResponseDefaultTypeInternal _ShardInfoResponse_default_instance_;
class ShardInstallSnapshotRequest;
class ShardInstallSnapshotRequestDefaultTypeInternal;
extern ShardInstallSnapshotRequestDefaultTypeInternal _ShardInstallSnapshotRequest_default_instance_;
class ShardInstallSnapshotResponse;
class ShardInstallSnapshotResponseDefaultTypeInternal;
extern ShardInstallSnapshotResponseDefaultTypeInternal _ShardInstallSnapshotResponse_default_instance_;
class ShardMeta;
class ShardMetaDefaultTypeInternal;
extern ShardMetaDefaultTypeInternal _ShardMeta_default_instance_;
class ShardReadRequest;
class ShardReadRequestDefaultTypeInternal;
extern ShardReadRequestDefaultTypeInternal _ShardReadRequest_default_instance_;
class ShardReadResponse;
class ShardReadResponseDefaultTypeInternal;
extern ShardReadResponseDefaultTypeInternal _ShardReadResponse_default_instance_;
class ShardRepairRequest;
class ShardRepairRequestDefaultTypeInternal;
extern ShardRepairRequestDefaultTypeInternal _ShardRepairRequest_default_instance_;
class ShardRepairResponse;
class ShardRepairResponseDefaultTypeInternal;
extern ShardRepairResponseDefaultTypeInternal _ShardRepairResponse_default_instance_;
class ShardScanRequest;
class ShardScanRequestDefaultTypeInternal;
extern ShardScanRequestDefaultTypeInternal _ShardScanRequest_default_instance_;
class ShardScanResponse;
class ShardScanResponseDefaultTypeInternal;
extern ShardScanResponseDefaultTypeInternal _ShardScanResponse_default_instance_;
class ShardWriteReplicaRequest;
class ShardWriteReplicaRequestDefaultTypeInternal;
extern ShardWriteReplicaRequestDefaultTypeInternal _ShardWriteReplicaRequest_default_instance_;
class ShardWriteReplicaResponse;
class ShardWriteReplicaResponseDefaultTypeInternal;
extern ShardWriteReplicaResponseDefaultTypeInternal _ShardWriteReplicaResponse_default_instance_;
class ShardWriteRequest;
class ShardWriteRequestDefaultTypeInternal;
extern ShardWriteRequestDefaultTypeInternal _ShardWriteRequest_default_instance_;
class ShardWriteResponse;
class ShardWriteResponseDefaultTypeInternal;
extern ShardWriteResponseDefaultTypeInternal _ShardWriteResponse_default_instance_;
class SplitShardRequest;
class SplitShardRequestDefaultTypeInternal;
extern SplitShardRequestDefaultTypeInternal _SplitShardRequest_default_instance_;
class SplitShardResponse;
class SplitShardResponseDefaultTypeInternal;
extern SplitShardResponseDefaultTypeInternal _SplitShardResponse_default_instance_;
class StartTxRequest;
class StartTxRequestDefaultTypeInternal;
extern StartTxRequestDefaultTypeInternal _StartTxRequest_default_instance_;
class StartTxResponse;
class StartTxResponseDefaultTypeInternal;
extern StartTxResponseDefaultTypeInternal _StartTxResponse_default_instance_;
class TransferShardLeaderRequest;
class TransferShardLeaderRequestDefaultTypeInternal;
extern TransferShardLeaderRequestDefaultTypeInternal _TransferShardLeaderRequest_default_instance_;
class TransferShardLeaderResponse;
class TransferShardLeaderResponseDefaultTypeInternal;
extern TransferShardLeaderResponseDefaultTypeInternal _TransferShardLeaderResponse_default_instance_;
class UnlockShardRequest;
class UnlockShardRequestDefaultTypeInternal;
extern UnlockShardRequestDefaultTypeInternal _UnlockShardRequest_default_instance_;
class UnlockShardResponse;
class UnlockShardResponseDefaultTypeInternal;
extern UnlockShardResponseDefaultTypeInternal _UnlockShardResponse_default_instance_;
}  // namespace dataserver
}  // namespace bedrock
PROTOBUF_NAMESPACE_OPEN
template<> ::bedrock::dataserver::AddShardReplicaRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::AddShardReplicaRequest>(Arena*);
template<> ::bedrock::dataserver::AddShardReplicaResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::AddShardReplicaResponse>(Arena*);
template<> ::bedrock::dataserver::CancelTxRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::CancelTxRequest>(Arena*);
template<> ::bedrock::dataserver::CancelTxResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::CancelTxResponse>(Arena*);
template<> ::bedrock::dataserver::CommitTxRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::CommitTxRequest>(Arena*);
template<> ::bedrock::dataserver::CommitTxResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::CommitTxResponse>(Arena*);
template<> ::bedrock::dataserver::CreateShardRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::CreateShardRequest>(Arena*);
template<> ::bedrock::dataserver::CreateShardResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::CreateShardResponse>(Arena*);
template<> ::bedrock::dataserver::DataServerJoinRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::DataServerJoinRequest>(Arena*);
template<> ::bedrock::dataserver::DataServerJoinResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::DataServerJoinResponse>(Arena*);
template<> ::bedrock::dataserver::DataServerLeaveRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::DataServerLeaveRequest>(Arena*);
template<> ::bedrock::dataserver::DataServerLeaveResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::DataServerLeaveResponse>(Arena*);
template<> ::bedrock::dataserver::DeleteShardReplicaRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::DeleteShardReplicaRequest>(Arena*);
template<> ::bedrock::dataserver::DeleteShardReplicaResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::DeleteShardReplicaResponse>(Arena*);
template<> ::bedrock::dataserver::DeleteShardRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::DeleteShardRequest>(Arena*);
template<> ::bedrock::dataserver::DeleteShardResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::DeleteShardResponse>(Arena*);
template<> ::bedrock::dataserver::KeyValue* Arena::CreateMaybeMessage<::bedrock::dataserver::KeyValue>(Arena*);
template<> ::bedrock::dataserver::LockRangeRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::LockRangeRequest>(Arena*);
template<> ::bedrock::dataserver::LockRangeResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::LockRangeResponse>(Arena*);
template<> ::bedrock::dataserver::LockRecordRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::LockRecordRequest>(Arena*);
template<> ::bedrock::dataserver::LockRecordResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::LockRecordResponse>(Arena*);
template<> ::bedrock::dataserver::LockShardRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::LockShardRequest>(Arena*);
template<> ::bedrock::dataserver::LockShardResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::LockShardResponse>(Arena*);
template<> ::bedrock::dataserver::MergeShardRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::MergeShardRequest>(Arena*);
template<> ::bedrock::dataserver::MergeShardResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::MergeShardResponse>(Arena*);
template<> ::bedrock::dataserver::MigrateShardRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::MigrateShardRequest>(Arena*);
template<> ::bedrock::dataserver::MigrateShardRequest_Entry* Arena::CreateMaybeMessage<::bedrock::dataserver::MigrateShardRequest_Entry>(Arena*);
template<> ::bedrock::dataserver::MigrateShardResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::MigrateShardResponse>(Arena*);
template<> ::bedrock::dataserver::PrepareTxRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::PrepareTxRequest>(Arena*);
template<> ::bedrock::dataserver::PrepareTxResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::PrepareTxResponse>(Arena*);
template<> ::bedrock::dataserver::PullShardDataRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::PullShardDataRequest>(Arena*);
template<> ::bedrock::dataserver::PullShardDataResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::PullShardDataResponse>(Arena*);
template<> ::bedrock::dataserver::ShardAppendLogRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardAppendLogRequest>(Arena*);
template<> ::bedrock::dataserver::ShardAppendLogRequest_Entry* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardAppendLogRequest_Entry>(Arena*);
template<> ::bedrock::dataserver::ShardAppendLogResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardAppendLogResponse>(Arena*);
template<> ::bedrock::dataserver::ShardInfoRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardInfoRequest>(Arena*);
template<> ::bedrock::dataserver::ShardInfoResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardInfoResponse>(Arena*);
template<> ::bedrock::dataserver::ShardInstallSnapshotRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardInstallSnapshotRequest>(Arena*);
template<> ::bedrock::dataserver::ShardInstallSnapshotResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardInstallSnapshotResponse>(Arena*);
template<> ::bedrock::dataserver::ShardMeta* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardMeta>(Arena*);
template<> ::bedrock::dataserver::ShardReadRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardReadRequest>(Arena*);
template<> ::bedrock::dataserver::ShardReadResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardReadResponse>(Arena*);
template<> ::bedrock::dataserver::ShardRepairRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardRepairRequest>(Arena*);
template<> ::bedrock::dataserver::ShardRepairResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardRepairResponse>(Arena*);
template<> ::bedrock::dataserver::ShardScanRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardScanRequest>(Arena*);
template<> ::bedrock::dataserver::ShardScanResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardScanResponse>(Arena*);
template<> ::bedrock::dataserver::ShardWriteReplicaRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardWriteReplicaRequest>(Arena*);
template<> ::bedrock::dataserver::ShardWriteReplicaResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardWriteReplicaResponse>(Arena*);
template<> ::bedrock::dataserver::ShardWriteRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardWriteRequest>(Arena*);
template<> ::bedrock::dataserver::ShardWriteResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::ShardWriteResponse>(Arena*);
template<> ::bedrock::dataserver::SplitShardRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::SplitShardRequest>(Arena*);
template<> ::bedrock::dataserver::SplitShardResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::SplitShardResponse>(Arena*);
template<> ::bedrock::dataserver::StartTxRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::StartTxRequest>(Arena*);
template<> ::bedrock::dataserver::StartTxResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::StartTxResponse>(Arena*);
template<> ::bedrock::dataserver::TransferShardLeaderRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::TransferShardLeaderRequest>(Arena*);
template<> ::bedrock::dataserver::TransferShardLeaderResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::TransferShardLeaderResponse>(Arena*);
template<> ::bedrock::dataserver::UnlockShardRequest* Arena::CreateMaybeMessage<::bedrock::dataserver::UnlockShardRequest>(Arena*);
template<> ::bedrock::dataserver::UnlockShardResponse* Arena::CreateMaybeMessage<::bedrock::dataserver::UnlockShardResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bedrock {
namespace dataserver {

enum MigrateShardRequest_Direction : int {
  MigrateShardRequest_Direction_FROM = 0,
  MigrateShardRequest_Direction_TO = 1,
  MigrateShardRequest_Direction_MigrateShardRequest_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MigrateShardRequest_Direction_MigrateShardRequest_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MigrateShardRequest_Direction_IsValid(int value);
constexpr MigrateShardRequest_Direction MigrateShardRequest_Direction_Direction_MIN = MigrateShardRequest_Direction_FROM;
constexpr MigrateShardRequest_Direction MigrateShardRequest_Direction_Direction_MAX = MigrateShardRequest_Direction_TO;
constexpr int MigrateShardRequest_Direction_Direction_ARRAYSIZE = MigrateShardRequest_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MigrateShardRequest_Direction_descriptor();
template<typename T>
inline const std::string& MigrateShardRequest_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MigrateShardRequest_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MigrateShardRequest_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MigrateShardRequest_Direction_descriptor(), enum_t_value);
}
inline bool MigrateShardRequest_Direction_Parse(
    const std::string& name, MigrateShardRequest_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MigrateShardRequest_Direction>(
    MigrateShardRequest_Direction_descriptor(), name, value);
}
// ===================================================================

class ShardMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardMeta) */ {
 public:
  inline ShardMeta() : ShardMeta(nullptr) {};
  virtual ~ShardMeta();

  ShardMeta(const ShardMeta& from);
  ShardMeta(ShardMeta&& from) noexcept
    : ShardMeta() {
    *this = ::std::move(from);
  }

  inline ShardMeta& operator=(const ShardMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardMeta& operator=(ShardMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardMeta* internal_default_instance() {
    return reinterpret_cast<const ShardMeta*>(
               &_ShardMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShardMeta& a, ShardMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardMeta* New() const final {
    return CreateMaybeMessage<ShardMeta>(nullptr);
  }

  ShardMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardMeta& from);
  void MergeFrom(const ShardMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardMeta";
  }
  protected:
  explicit ShardMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicatesFieldNumber = 3,
    kLeaderFieldNumber = 6,
    kMinKeyFieldNumber = 9,
    kMaxKeyFieldNumber = 10,
    kCreateTsFieldNumber = 2,
    kReplicatesUpdateTsFieldNumber = 4,
    kLeaderChangeTsFieldNumber = 7,
    kShardIdFieldNumber = 1,
    kLastWalIndexFieldNumber = 8,
    kIsLeaderFieldNumber = 5,
  };
  // repeated string replicates = 3;
  int replicates_size() const;
  private:
  int _internal_replicates_size() const;
  public:
  void clear_replicates();
  const std::string& replicates(int index) const;
  std::string* mutable_replicates(int index);
  void set_replicates(int index, const std::string& value);
  void set_replicates(int index, std::string&& value);
  void set_replicates(int index, const char* value);
  void set_replicates(int index, const char* value, size_t size);
  std::string* add_replicates();
  void add_replicates(const std::string& value);
  void add_replicates(std::string&& value);
  void add_replicates(const char* value);
  void add_replicates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& replicates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_replicates();
  private:
  const std::string& _internal_replicates(int index) const;
  std::string* _internal_add_replicates();
  public:

  // string leader = 6;
  void clear_leader();
  const std::string& leader() const;
  void set_leader(const std::string& value);
  void set_leader(std::string&& value);
  void set_leader(const char* value);
  void set_leader(const char* value, size_t size);
  std::string* mutable_leader();
  std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader(
      std::string* leader);
  private:
  const std::string& _internal_leader() const;
  void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // bytes min_key = 9;
  void clear_min_key();
  const std::string& min_key() const;
  void set_min_key(const std::string& value);
  void set_min_key(std::string&& value);
  void set_min_key(const char* value);
  void set_min_key(const void* value, size_t size);
  std::string* mutable_min_key();
  std::string* release_min_key();
  void set_allocated_min_key(std::string* min_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_min_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_min_key(
      std::string* min_key);
  private:
  const std::string& _internal_min_key() const;
  void _internal_set_min_key(const std::string& value);
  std::string* _internal_mutable_min_key();
  public:

  // bytes max_key = 10;
  void clear_max_key();
  const std::string& max_key() const;
  void set_max_key(const std::string& value);
  void set_max_key(std::string&& value);
  void set_max_key(const char* value);
  void set_max_key(const void* value, size_t size);
  std::string* mutable_max_key();
  std::string* release_max_key();
  void set_allocated_max_key(std::string* max_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_max_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_max_key(
      std::string* max_key);
  private:
  const std::string& _internal_max_key() const;
  void _internal_set_max_key(const std::string& value);
  std::string* _internal_mutable_max_key();
  public:

  // .google.protobuf.Timestamp create_ts = 2;
  bool has_create_ts() const;
  private:
  bool _internal_has_create_ts() const;
  public:
  void clear_create_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_ts();
  void set_allocated_create_ts(PROTOBUF_NAMESPACE_ID::Timestamp* create_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_ts();
  public:
  void unsafe_arena_set_allocated_create_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_ts();

  // .google.protobuf.Timestamp replicates_update_ts = 4;
  bool has_replicates_update_ts() const;
  private:
  bool _internal_has_replicates_update_ts() const;
  public:
  void clear_replicates_update_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& replicates_update_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_replicates_update_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_replicates_update_ts();
  void set_allocated_replicates_update_ts(PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_replicates_update_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_replicates_update_ts();
  public:
  void unsafe_arena_set_allocated_replicates_update_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_replicates_update_ts();

  // .google.protobuf.Timestamp leader_change_ts = 7;
  bool has_leader_change_ts() const;
  private:
  bool _internal_has_leader_change_ts() const;
  public:
  void clear_leader_change_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_leader_change_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_leader_change_ts();
  void set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_leader_change_ts();
  public:
  void unsafe_arena_set_allocated_leader_change_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_leader_change_ts();

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_wal_index = 8;
  void clear_last_wal_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_wal_index() const;
  void set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_wal_index() const;
  void _internal_set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_leader = 5;
  void clear_is_leader();
  bool is_leader() const;
  void set_is_leader(bool value);
  private:
  bool _internal_is_leader() const;
  void _internal_set_is_leader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> replicates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_key_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_ts_;
  PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts_;
  PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_wal_index_;
  bool is_leader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class SplitShardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.SplitShardRequest) */ {
 public:
  inline SplitShardRequest() : SplitShardRequest(nullptr) {};
  virtual ~SplitShardRequest();

  SplitShardRequest(const SplitShardRequest& from);
  SplitShardRequest(SplitShardRequest&& from) noexcept
    : SplitShardRequest() {
    *this = ::std::move(from);
  }

  inline SplitShardRequest& operator=(const SplitShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitShardRequest& operator=(SplitShardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitShardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitShardRequest* internal_default_instance() {
    return reinterpret_cast<const SplitShardRequest*>(
               &_SplitShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SplitShardRequest& a, SplitShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitShardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitShardRequest* New() const final {
    return CreateMaybeMessage<SplitShardRequest>(nullptr);
  }

  SplitShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitShardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitShardRequest& from);
  void MergeFrom(const SplitShardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitShardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.SplitShardRequest";
  }
  protected:
  explicit SplitShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
    kNewShardIdFieldNumber = 2,
  };
  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 new_shard_id = 2;
  void clear_new_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_shard_id() const;
  void set_new_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_new_shard_id() const;
  void _internal_set_new_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.SplitShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class SplitShardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.SplitShardResponse) */ {
 public:
  inline SplitShardResponse() : SplitShardResponse(nullptr) {};
  virtual ~SplitShardResponse();

  SplitShardResponse(const SplitShardResponse& from);
  SplitShardResponse(SplitShardResponse&& from) noexcept
    : SplitShardResponse() {
    *this = ::std::move(from);
  }

  inline SplitShardResponse& operator=(const SplitShardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SplitShardResponse& operator=(SplitShardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SplitShardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplitShardResponse* internal_default_instance() {
    return reinterpret_cast<const SplitShardResponse*>(
               &_SplitShardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SplitShardResponse& a, SplitShardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SplitShardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SplitShardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SplitShardResponse* New() const final {
    return CreateMaybeMessage<SplitShardResponse>(nullptr);
  }

  SplitShardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SplitShardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SplitShardResponse& from);
  void MergeFrom(const SplitShardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplitShardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.SplitShardResponse";
  }
  protected:
  explicit SplitShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.SplitShardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class MergeShardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.MergeShardRequest) */ {
 public:
  inline MergeShardRequest() : MergeShardRequest(nullptr) {};
  virtual ~MergeShardRequest();

  MergeShardRequest(const MergeShardRequest& from);
  MergeShardRequest(MergeShardRequest&& from) noexcept
    : MergeShardRequest() {
    *this = ::std::move(from);
  }

  inline MergeShardRequest& operator=(const MergeShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeShardRequest& operator=(MergeShardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeShardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeShardRequest* internal_default_instance() {
    return reinterpret_cast<const MergeShardRequest*>(
               &_MergeShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MergeShardRequest& a, MergeShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeShardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeShardRequest* New() const final {
    return CreateMaybeMessage<MergeShardRequest>(nullptr);
  }

  MergeShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeShardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeShardRequest& from);
  void MergeFrom(const MergeShardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeShardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.MergeShardRequest";
  }
  protected:
  explicit MergeShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdAFieldNumber = 1,
    kShardIdBFieldNumber = 2,
  };
  // uint64 shard_id_a = 1;
  void clear_shard_id_a();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_a() const;
  void set_shard_id_a(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id_a() const;
  void _internal_set_shard_id_a(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shard_id_b = 2;
  void clear_shard_id_b();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_b() const;
  void set_shard_id_b(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id_b() const;
  void _internal_set_shard_id_b(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.MergeShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_a_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class MergeShardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.MergeShardResponse) */ {
 public:
  inline MergeShardResponse() : MergeShardResponse(nullptr) {};
  virtual ~MergeShardResponse();

  MergeShardResponse(const MergeShardResponse& from);
  MergeShardResponse(MergeShardResponse&& from) noexcept
    : MergeShardResponse() {
    *this = ::std::move(from);
  }

  inline MergeShardResponse& operator=(const MergeShardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeShardResponse& operator=(MergeShardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MergeShardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeShardResponse* internal_default_instance() {
    return reinterpret_cast<const MergeShardResponse*>(
               &_MergeShardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MergeShardResponse& a, MergeShardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeShardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeShardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MergeShardResponse* New() const final {
    return CreateMaybeMessage<MergeShardResponse>(nullptr);
  }

  MergeShardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MergeShardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MergeShardResponse& from);
  void MergeFrom(const MergeShardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeShardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.MergeShardResponse";
  }
  protected:
  explicit MergeShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.MergeShardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class CreateShardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.CreateShardRequest) */ {
 public:
  inline CreateShardRequest() : CreateShardRequest(nullptr) {};
  virtual ~CreateShardRequest();

  CreateShardRequest(const CreateShardRequest& from);
  CreateShardRequest(CreateShardRequest&& from) noexcept
    : CreateShardRequest() {
    *this = ::std::move(from);
  }

  inline CreateShardRequest& operator=(const CreateShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateShardRequest& operator=(CreateShardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateShardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateShardRequest* internal_default_instance() {
    return reinterpret_cast<const CreateShardRequest*>(
               &_CreateShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateShardRequest& a, CreateShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateShardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateShardRequest* New() const final {
    return CreateMaybeMessage<CreateShardRequest>(nullptr);
  }

  CreateShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateShardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateShardRequest& from);
  void MergeFrom(const CreateShardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateShardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.CreateShardRequest";
  }
  protected:
  explicit CreateShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicatesFieldNumber = 3,
    kLeaderFieldNumber = 5,
    kMinKeyFieldNumber = 7,
    kMaxKeyFieldNumber = 8,
    kCreateTsFieldNumber = 2,
    kReplicaUpdateTsFieldNumber = 4,
    kLeaderChangeTsFieldNumber = 6,
    kShardIdFieldNumber = 1,
  };
  // repeated string replicates = 3;
  int replicates_size() const;
  private:
  int _internal_replicates_size() const;
  public:
  void clear_replicates();
  const std::string& replicates(int index) const;
  std::string* mutable_replicates(int index);
  void set_replicates(int index, const std::string& value);
  void set_replicates(int index, std::string&& value);
  void set_replicates(int index, const char* value);
  void set_replicates(int index, const char* value, size_t size);
  std::string* add_replicates();
  void add_replicates(const std::string& value);
  void add_replicates(std::string&& value);
  void add_replicates(const char* value);
  void add_replicates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& replicates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_replicates();
  private:
  const std::string& _internal_replicates(int index) const;
  std::string* _internal_add_replicates();
  public:

  // string leader = 5;
  void clear_leader();
  const std::string& leader() const;
  void set_leader(const std::string& value);
  void set_leader(std::string&& value);
  void set_leader(const char* value);
  void set_leader(const char* value, size_t size);
  std::string* mutable_leader();
  std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader(
      std::string* leader);
  private:
  const std::string& _internal_leader() const;
  void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // bytes min_key = 7;
  void clear_min_key();
  const std::string& min_key() const;
  void set_min_key(const std::string& value);
  void set_min_key(std::string&& value);
  void set_min_key(const char* value);
  void set_min_key(const void* value, size_t size);
  std::string* mutable_min_key();
  std::string* release_min_key();
  void set_allocated_min_key(std::string* min_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_min_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_min_key(
      std::string* min_key);
  private:
  const std::string& _internal_min_key() const;
  void _internal_set_min_key(const std::string& value);
  std::string* _internal_mutable_min_key();
  public:

  // bytes max_key = 8;
  void clear_max_key();
  const std::string& max_key() const;
  void set_max_key(const std::string& value);
  void set_max_key(std::string&& value);
  void set_max_key(const char* value);
  void set_max_key(const void* value, size_t size);
  std::string* mutable_max_key();
  std::string* release_max_key();
  void set_allocated_max_key(std::string* max_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_max_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_max_key(
      std::string* max_key);
  private:
  const std::string& _internal_max_key() const;
  void _internal_set_max_key(const std::string& value);
  std::string* _internal_mutable_max_key();
  public:

  // .google.protobuf.Timestamp create_ts = 2;
  bool has_create_ts() const;
  private:
  bool _internal_has_create_ts() const;
  public:
  void clear_create_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_ts();
  void set_allocated_create_ts(PROTOBUF_NAMESPACE_ID::Timestamp* create_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_ts();
  public:
  void unsafe_arena_set_allocated_create_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_ts();

  // .google.protobuf.Timestamp replica_update_ts = 4;
  bool has_replica_update_ts() const;
  private:
  bool _internal_has_replica_update_ts() const;
  public:
  void clear_replica_update_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& replica_update_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_replica_update_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_replica_update_ts();
  void set_allocated_replica_update_ts(PROTOBUF_NAMESPACE_ID::Timestamp* replica_update_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_replica_update_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_replica_update_ts();
  public:
  void unsafe_arena_set_allocated_replica_update_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* replica_update_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_replica_update_ts();

  // .google.protobuf.Timestamp leader_change_ts = 6;
  bool has_leader_change_ts() const;
  private:
  bool _internal_has_leader_change_ts() const;
  public:
  void clear_leader_change_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_leader_change_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_leader_change_ts();
  void set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_leader_change_ts();
  public:
  void unsafe_arena_set_allocated_leader_change_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_leader_change_ts();

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.CreateShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> replicates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_key_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_ts_;
  PROTOBUF_NAMESPACE_ID::Timestamp* replica_update_ts_;
  PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class CreateShardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.CreateShardResponse) */ {
 public:
  inline CreateShardResponse() : CreateShardResponse(nullptr) {};
  virtual ~CreateShardResponse();

  CreateShardResponse(const CreateShardResponse& from);
  CreateShardResponse(CreateShardResponse&& from) noexcept
    : CreateShardResponse() {
    *this = ::std::move(from);
  }

  inline CreateShardResponse& operator=(const CreateShardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateShardResponse& operator=(CreateShardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateShardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateShardResponse* internal_default_instance() {
    return reinterpret_cast<const CreateShardResponse*>(
               &_CreateShardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateShardResponse& a, CreateShardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateShardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateShardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateShardResponse* New() const final {
    return CreateMaybeMessage<CreateShardResponse>(nullptr);
  }

  CreateShardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateShardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateShardResponse& from);
  void MergeFrom(const CreateShardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateShardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.CreateShardResponse";
  }
  protected:
  explicit CreateShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.CreateShardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class DeleteShardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.DeleteShardRequest) */ {
 public:
  inline DeleteShardRequest() : DeleteShardRequest(nullptr) {};
  virtual ~DeleteShardRequest();

  DeleteShardRequest(const DeleteShardRequest& from);
  DeleteShardRequest(DeleteShardRequest&& from) noexcept
    : DeleteShardRequest() {
    *this = ::std::move(from);
  }

  inline DeleteShardRequest& operator=(const DeleteShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteShardRequest& operator=(DeleteShardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteShardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteShardRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteShardRequest*>(
               &_DeleteShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteShardRequest& a, DeleteShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteShardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteShardRequest* New() const final {
    return CreateMaybeMessage<DeleteShardRequest>(nullptr);
  }

  DeleteShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteShardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteShardRequest& from);
  void MergeFrom(const DeleteShardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteShardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.DeleteShardRequest";
  }
  protected:
  explicit DeleteShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
  };
  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.DeleteShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class DeleteShardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.DeleteShardResponse) */ {
 public:
  inline DeleteShardResponse() : DeleteShardResponse(nullptr) {};
  virtual ~DeleteShardResponse();

  DeleteShardResponse(const DeleteShardResponse& from);
  DeleteShardResponse(DeleteShardResponse&& from) noexcept
    : DeleteShardResponse() {
    *this = ::std::move(from);
  }

  inline DeleteShardResponse& operator=(const DeleteShardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteShardResponse& operator=(DeleteShardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteShardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteShardResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteShardResponse*>(
               &_DeleteShardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteShardResponse& a, DeleteShardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteShardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteShardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteShardResponse* New() const final {
    return CreateMaybeMessage<DeleteShardResponse>(nullptr);
  }

  DeleteShardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteShardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteShardResponse& from);
  void MergeFrom(const DeleteShardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteShardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.DeleteShardResponse";
  }
  protected:
  explicit DeleteShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.DeleteShardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardInfoRequest) */ {
 public:
  inline ShardInfoRequest() : ShardInfoRequest(nullptr) {};
  virtual ~ShardInfoRequest();

  ShardInfoRequest(const ShardInfoRequest& from);
  ShardInfoRequest(ShardInfoRequest&& from) noexcept
    : ShardInfoRequest() {
    *this = ::std::move(from);
  }

  inline ShardInfoRequest& operator=(const ShardInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardInfoRequest& operator=(ShardInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ShardInfoRequest*>(
               &_ShardInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ShardInfoRequest& a, ShardInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardInfoRequest* New() const final {
    return CreateMaybeMessage<ShardInfoRequest>(nullptr);
  }

  ShardInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardInfoRequest& from);
  void MergeFrom(const ShardInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardInfoRequest";
  }
  protected:
  explicit ShardInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardIdFieldNumber = 1,
  };
  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardInfoResponse) */ {
 public:
  inline ShardInfoResponse() : ShardInfoResponse(nullptr) {};
  virtual ~ShardInfoResponse();

  ShardInfoResponse(const ShardInfoResponse& from);
  ShardInfoResponse(ShardInfoResponse&& from) noexcept
    : ShardInfoResponse() {
    *this = ::std::move(from);
  }

  inline ShardInfoResponse& operator=(const ShardInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardInfoResponse& operator=(ShardInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ShardInfoResponse*>(
               &_ShardInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ShardInfoResponse& a, ShardInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardInfoResponse* New() const final {
    return CreateMaybeMessage<ShardInfoResponse>(nullptr);
  }

  ShardInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardInfoResponse& from);
  void MergeFrom(const ShardInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardInfoResponse";
  }
  protected:
  explicit ShardInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicatesFieldNumber = 3,
    kLeaderFieldNumber = 6,
    kCreateTsFieldNumber = 2,
    kReplicatesUpdateTsFieldNumber = 4,
    kLeaderChangeTsFieldNumber = 7,
    kShardIdFieldNumber = 1,
    kLastWalIndexFieldNumber = 8,
    kIsLeaderFieldNumber = 5,
  };
  // repeated string replicates = 3;
  int replicates_size() const;
  private:
  int _internal_replicates_size() const;
  public:
  void clear_replicates();
  const std::string& replicates(int index) const;
  std::string* mutable_replicates(int index);
  void set_replicates(int index, const std::string& value);
  void set_replicates(int index, std::string&& value);
  void set_replicates(int index, const char* value);
  void set_replicates(int index, const char* value, size_t size);
  std::string* add_replicates();
  void add_replicates(const std::string& value);
  void add_replicates(std::string&& value);
  void add_replicates(const char* value);
  void add_replicates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& replicates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_replicates();
  private:
  const std::string& _internal_replicates(int index) const;
  std::string* _internal_add_replicates();
  public:

  // string leader = 6;
  void clear_leader();
  const std::string& leader() const;
  void set_leader(const std::string& value);
  void set_leader(std::string&& value);
  void set_leader(const char* value);
  void set_leader(const char* value, size_t size);
  std::string* mutable_leader();
  std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader(
      std::string* leader);
  private:
  const std::string& _internal_leader() const;
  void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // .google.protobuf.Timestamp create_ts = 2;
  bool has_create_ts() const;
  private:
  bool _internal_has_create_ts() const;
  public:
  void clear_create_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_ts();
  void set_allocated_create_ts(PROTOBUF_NAMESPACE_ID::Timestamp* create_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_ts();
  public:
  void unsafe_arena_set_allocated_create_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_ts();

  // .google.protobuf.Timestamp replicates_update_ts = 4;
  bool has_replicates_update_ts() const;
  private:
  bool _internal_has_replicates_update_ts() const;
  public:
  void clear_replicates_update_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& replicates_update_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_replicates_update_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_replicates_update_ts();
  void set_allocated_replicates_update_ts(PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_replicates_update_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_replicates_update_ts();
  public:
  void unsafe_arena_set_allocated_replicates_update_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_replicates_update_ts();

  // .google.protobuf.Timestamp leader_change_ts = 7;
  bool has_leader_change_ts() const;
  private:
  bool _internal_has_leader_change_ts() const;
  public:
  void clear_leader_change_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_leader_change_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_leader_change_ts();
  void set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_leader_change_ts();
  public:
  void unsafe_arena_set_allocated_leader_change_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_leader_change_ts();

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_wal_index = 8;
  void clear_last_wal_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_wal_index() const;
  void set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_wal_index() const;
  void _internal_set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_leader = 5;
  void clear_is_leader();
  bool is_leader() const;
  void set_is_leader(bool value);
  private:
  bool _internal_is_leader() const;
  void _internal_set_is_leader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> replicates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_ts_;
  PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts_;
  PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_wal_index_;
  bool is_leader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class PullShardDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.PullShardDataRequest) */ {
 public:
  inline PullShardDataRequest() : PullShardDataRequest(nullptr) {};
  virtual ~PullShardDataRequest();

  PullShardDataRequest(const PullShardDataRequest& from);
  PullShardDataRequest(PullShardDataRequest&& from) noexcept
    : PullShardDataRequest() {
    *this = ::std::move(from);
  }

  inline PullShardDataRequest& operator=(const PullShardDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullShardDataRequest& operator=(PullShardDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullShardDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullShardDataRequest* internal_default_instance() {
    return reinterpret_cast<const PullShardDataRequest*>(
               &_PullShardDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PullShardDataRequest& a, PullShardDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullShardDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullShardDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullShardDataRequest* New() const final {
    return CreateMaybeMessage<PullShardDataRequest>(nullptr);
  }

  PullShardDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullShardDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullShardDataRequest& from);
  void MergeFrom(const PullShardDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullShardDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.PullShardDataRequest";
  }
  protected:
  explicit PullShardDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.PullShardDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class PullShardDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.PullShardDataResponse) */ {
 public:
  inline PullShardDataResponse() : PullShardDataResponse(nullptr) {};
  virtual ~PullShardDataResponse();

  PullShardDataResponse(const PullShardDataResponse& from);
  PullShardDataResponse(PullShardDataResponse&& from) noexcept
    : PullShardDataResponse() {
    *this = ::std::move(from);
  }

  inline PullShardDataResponse& operator=(const PullShardDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullShardDataResponse& operator=(PullShardDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PullShardDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullShardDataResponse* internal_default_instance() {
    return reinterpret_cast<const PullShardDataResponse*>(
               &_PullShardDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PullShardDataResponse& a, PullShardDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullShardDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullShardDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullShardDataResponse* New() const final {
    return CreateMaybeMessage<PullShardDataResponse>(nullptr);
  }

  PullShardDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullShardDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PullShardDataResponse& from);
  void MergeFrom(const PullShardDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullShardDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.PullShardDataResponse";
  }
  protected:
  explicit PullShardDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.PullShardDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class MigrateShardRequest_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.MigrateShardRequest.Entry) */ {
 public:
  inline MigrateShardRequest_Entry() : MigrateShardRequest_Entry(nullptr) {};
  virtual ~MigrateShardRequest_Entry();

  MigrateShardRequest_Entry(const MigrateShardRequest_Entry& from);
  MigrateShardRequest_Entry(MigrateShardRequest_Entry&& from) noexcept
    : MigrateShardRequest_Entry() {
    *this = ::std::move(from);
  }

  inline MigrateShardRequest_Entry& operator=(const MigrateShardRequest_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateShardRequest_Entry& operator=(MigrateShardRequest_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrateShardRequest_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MigrateShardRequest_Entry* internal_default_instance() {
    return reinterpret_cast<const MigrateShardRequest_Entry*>(
               &_MigrateShardRequest_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MigrateShardRequest_Entry& a, MigrateShardRequest_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateShardRequest_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateShardRequest_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrateShardRequest_Entry* New() const final {
    return CreateMaybeMessage<MigrateShardRequest_Entry>(nullptr);
  }

  MigrateShardRequest_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrateShardRequest_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrateShardRequest_Entry& from);
  void MergeFrom(const MigrateShardRequest_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateShardRequest_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.MigrateShardRequest.Entry";
  }
  protected:
  explicit MigrateShardRequest_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.MigrateShardRequest.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class MigrateShardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.MigrateShardRequest) */ {
 public:
  inline MigrateShardRequest() : MigrateShardRequest(nullptr) {};
  virtual ~MigrateShardRequest();

  MigrateShardRequest(const MigrateShardRequest& from);
  MigrateShardRequest(MigrateShardRequest&& from) noexcept
    : MigrateShardRequest() {
    *this = ::std::move(from);
  }

  inline MigrateShardRequest& operator=(const MigrateShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateShardRequest& operator=(MigrateShardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrateShardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MigrateShardRequest* internal_default_instance() {
    return reinterpret_cast<const MigrateShardRequest*>(
               &_MigrateShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MigrateShardRequest& a, MigrateShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateShardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrateShardRequest* New() const final {
    return CreateMaybeMessage<MigrateShardRequest>(nullptr);
  }

  MigrateShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrateShardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrateShardRequest& from);
  void MergeFrom(const MigrateShardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateShardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.MigrateShardRequest";
  }
  protected:
  explicit MigrateShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MigrateShardRequest_Entry Entry;

  typedef MigrateShardRequest_Direction Direction;
  static constexpr Direction FROM =
    MigrateShardRequest_Direction_FROM;
  static constexpr Direction TO =
    MigrateShardRequest_Direction_TO;
  static inline bool Direction_IsValid(int value) {
    return MigrateShardRequest_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    MigrateShardRequest_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    MigrateShardRequest_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    MigrateShardRequest_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return MigrateShardRequest_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return MigrateShardRequest_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(const std::string& name,
      Direction* value) {
    return MigrateShardRequest_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kTargetAddressFieldNumber = 3,
    kShardIdFromFieldNumber = 1,
    kShardIdToFieldNumber = 2,
    kDirectionFieldNumber = 4,
  };
  // repeated .bedrock.dataserver.MigrateShardRequest.Entry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::bedrock::dataserver::MigrateShardRequest_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::MigrateShardRequest_Entry >*
      mutable_entries();
  private:
  const ::bedrock::dataserver::MigrateShardRequest_Entry& _internal_entries(int index) const;
  ::bedrock::dataserver::MigrateShardRequest_Entry* _internal_add_entries();
  public:
  const ::bedrock::dataserver::MigrateShardRequest_Entry& entries(int index) const;
  ::bedrock::dataserver::MigrateShardRequest_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::MigrateShardRequest_Entry >&
      entries() const;

  // string target_address = 3;
  void clear_target_address();
  const std::string& target_address() const;
  void set_target_address(const std::string& value);
  void set_target_address(std::string&& value);
  void set_target_address(const char* value);
  void set_target_address(const char* value, size_t size);
  std::string* mutable_target_address();
  std::string* release_target_address();
  void set_allocated_target_address(std::string* target_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_address(
      std::string* target_address);
  private:
  const std::string& _internal_target_address() const;
  void _internal_set_target_address(const std::string& value);
  std::string* _internal_mutable_target_address();
  public:

  // uint64 shard_id_from = 1;
  void clear_shard_id_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_from() const;
  void set_shard_id_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id_from() const;
  void _internal_set_shard_id_from(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shard_id_to = 2;
  void clear_shard_id_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_to() const;
  void set_shard_id_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id_to() const;
  void _internal_set_shard_id_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .bedrock.dataserver.MigrateShardRequest.Direction direction = 4;
  void clear_direction();
  ::bedrock::dataserver::MigrateShardRequest_Direction direction() const;
  void set_direction(::bedrock::dataserver::MigrateShardRequest_Direction value);
  private:
  ::bedrock::dataserver::MigrateShardRequest_Direction _internal_direction() const;
  void _internal_set_direction(::bedrock::dataserver::MigrateShardRequest_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.MigrateShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::MigrateShardRequest_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_to_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class MigrateShardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.MigrateShardResponse) */ {
 public:
  inline MigrateShardResponse() : MigrateShardResponse(nullptr) {};
  virtual ~MigrateShardResponse();

  MigrateShardResponse(const MigrateShardResponse& from);
  MigrateShardResponse(MigrateShardResponse&& from) noexcept
    : MigrateShardResponse() {
    *this = ::std::move(from);
  }

  inline MigrateShardResponse& operator=(const MigrateShardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateShardResponse& operator=(MigrateShardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MigrateShardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MigrateShardResponse* internal_default_instance() {
    return reinterpret_cast<const MigrateShardResponse*>(
               &_MigrateShardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MigrateShardResponse& a, MigrateShardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateShardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateShardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MigrateShardResponse* New() const final {
    return CreateMaybeMessage<MigrateShardResponse>(nullptr);
  }

  MigrateShardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MigrateShardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MigrateShardResponse& from);
  void MergeFrom(const MigrateShardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateShardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.MigrateShardResponse";
  }
  protected:
  explicit MigrateShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.MigrateShardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class AddShardReplicaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.AddShardReplicaRequest) */ {
 public:
  inline AddShardReplicaRequest() : AddShardReplicaRequest(nullptr) {};
  virtual ~AddShardReplicaRequest();

  AddShardReplicaRequest(const AddShardReplicaRequest& from);
  AddShardReplicaRequest(AddShardReplicaRequest&& from) noexcept
    : AddShardReplicaRequest() {
    *this = ::std::move(from);
  }

  inline AddShardReplicaRequest& operator=(const AddShardReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddShardReplicaRequest& operator=(AddShardReplicaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddShardReplicaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddShardReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const AddShardReplicaRequest*>(
               &_AddShardReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddShardReplicaRequest& a, AddShardReplicaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddShardReplicaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddShardReplicaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddShardReplicaRequest* New() const final {
    return CreateMaybeMessage<AddShardReplicaRequest>(nullptr);
  }

  AddShardReplicaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddShardReplicaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddShardReplicaRequest& from);
  void MergeFrom(const AddShardReplicaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddShardReplicaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.AddShardReplicaRequest";
  }
  protected:
  explicit AddShardReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.AddShardReplicaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class AddShardReplicaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.AddShardReplicaResponse) */ {
 public:
  inline AddShardReplicaResponse() : AddShardReplicaResponse(nullptr) {};
  virtual ~AddShardReplicaResponse();

  AddShardReplicaResponse(const AddShardReplicaResponse& from);
  AddShardReplicaResponse(AddShardReplicaResponse&& from) noexcept
    : AddShardReplicaResponse() {
    *this = ::std::move(from);
  }

  inline AddShardReplicaResponse& operator=(const AddShardReplicaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddShardReplicaResponse& operator=(AddShardReplicaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddShardReplicaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddShardReplicaResponse* internal_default_instance() {
    return reinterpret_cast<const AddShardReplicaResponse*>(
               &_AddShardReplicaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AddShardReplicaResponse& a, AddShardReplicaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddShardReplicaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddShardReplicaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddShardReplicaResponse* New() const final {
    return CreateMaybeMessage<AddShardReplicaResponse>(nullptr);
  }

  AddShardReplicaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddShardReplicaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddShardReplicaResponse& from);
  void MergeFrom(const AddShardReplicaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddShardReplicaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.AddShardReplicaResponse";
  }
  protected:
  explicit AddShardReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.AddShardReplicaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class DeleteShardReplicaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.DeleteShardReplicaRequest) */ {
 public:
  inline DeleteShardReplicaRequest() : DeleteShardReplicaRequest(nullptr) {};
  virtual ~DeleteShardReplicaRequest();

  DeleteShardReplicaRequest(const DeleteShardReplicaRequest& from);
  DeleteShardReplicaRequest(DeleteShardReplicaRequest&& from) noexcept
    : DeleteShardReplicaRequest() {
    *this = ::std::move(from);
  }

  inline DeleteShardReplicaRequest& operator=(const DeleteShardReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteShardReplicaRequest& operator=(DeleteShardReplicaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteShardReplicaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteShardReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteShardReplicaRequest*>(
               &_DeleteShardReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteShardReplicaRequest& a, DeleteShardReplicaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteShardReplicaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteShardReplicaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteShardReplicaRequest* New() const final {
    return CreateMaybeMessage<DeleteShardReplicaRequest>(nullptr);
  }

  DeleteShardReplicaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteShardReplicaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteShardReplicaRequest& from);
  void MergeFrom(const DeleteShardReplicaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteShardReplicaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.DeleteShardReplicaRequest";
  }
  protected:
  explicit DeleteShardReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.DeleteShardReplicaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class DeleteShardReplicaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.DeleteShardReplicaResponse) */ {
 public:
  inline DeleteShardReplicaResponse() : DeleteShardReplicaResponse(nullptr) {};
  virtual ~DeleteShardReplicaResponse();

  DeleteShardReplicaResponse(const DeleteShardReplicaResponse& from);
  DeleteShardReplicaResponse(DeleteShardReplicaResponse&& from) noexcept
    : DeleteShardReplicaResponse() {
    *this = ::std::move(from);
  }

  inline DeleteShardReplicaResponse& operator=(const DeleteShardReplicaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteShardReplicaResponse& operator=(DeleteShardReplicaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteShardReplicaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteShardReplicaResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteShardReplicaResponse*>(
               &_DeleteShardReplicaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteShardReplicaResponse& a, DeleteShardReplicaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteShardReplicaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteShardReplicaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteShardReplicaResponse* New() const final {
    return CreateMaybeMessage<DeleteShardReplicaResponse>(nullptr);
  }

  DeleteShardReplicaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteShardReplicaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteShardReplicaResponse& from);
  void MergeFrom(const DeleteShardReplicaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteShardReplicaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.DeleteShardReplicaResponse";
  }
  protected:
  explicit DeleteShardReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.DeleteShardReplicaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class TransferShardLeaderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.TransferShardLeaderRequest) */ {
 public:
  inline TransferShardLeaderRequest() : TransferShardLeaderRequest(nullptr) {};
  virtual ~TransferShardLeaderRequest();

  TransferShardLeaderRequest(const TransferShardLeaderRequest& from);
  TransferShardLeaderRequest(TransferShardLeaderRequest&& from) noexcept
    : TransferShardLeaderRequest() {
    *this = ::std::move(from);
  }

  inline TransferShardLeaderRequest& operator=(const TransferShardLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferShardLeaderRequest& operator=(TransferShardLeaderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferShardLeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferShardLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const TransferShardLeaderRequest*>(
               &_TransferShardLeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TransferShardLeaderRequest& a, TransferShardLeaderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferShardLeaderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferShardLeaderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferShardLeaderRequest* New() const final {
    return CreateMaybeMessage<TransferShardLeaderRequest>(nullptr);
  }

  TransferShardLeaderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferShardLeaderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferShardLeaderRequest& from);
  void MergeFrom(const TransferShardLeaderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferShardLeaderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.TransferShardLeaderRequest";
  }
  protected:
  explicit TransferShardLeaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicatesFieldNumber = 2,
    kLeaderChangeTsFieldNumber = 3,
    kShardIdFieldNumber = 1,
  };
  // repeated string replicates = 2;
  int replicates_size() const;
  private:
  int _internal_replicates_size() const;
  public:
  void clear_replicates();
  const std::string& replicates(int index) const;
  std::string* mutable_replicates(int index);
  void set_replicates(int index, const std::string& value);
  void set_replicates(int index, std::string&& value);
  void set_replicates(int index, const char* value);
  void set_replicates(int index, const char* value, size_t size);
  std::string* add_replicates();
  void add_replicates(const std::string& value);
  void add_replicates(std::string&& value);
  void add_replicates(const char* value);
  void add_replicates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& replicates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_replicates();
  private:
  const std::string& _internal_replicates(int index) const;
  std::string* _internal_add_replicates();
  public:

  // .google.protobuf.Timestamp leader_change_ts = 3;
  bool has_leader_change_ts() const;
  private:
  bool _internal_has_leader_change_ts() const;
  public:
  void clear_leader_change_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_leader_change_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_leader_change_ts();
  void set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_leader_change_ts();
  public:
  void unsafe_arena_set_allocated_leader_change_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_leader_change_ts();

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.TransferShardLeaderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> replicates_;
  PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class TransferShardLeaderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.TransferShardLeaderResponse) */ {
 public:
  inline TransferShardLeaderResponse() : TransferShardLeaderResponse(nullptr) {};
  virtual ~TransferShardLeaderResponse();

  TransferShardLeaderResponse(const TransferShardLeaderResponse& from);
  TransferShardLeaderResponse(TransferShardLeaderResponse&& from) noexcept
    : TransferShardLeaderResponse() {
    *this = ::std::move(from);
  }

  inline TransferShardLeaderResponse& operator=(const TransferShardLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferShardLeaderResponse& operator=(TransferShardLeaderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferShardLeaderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferShardLeaderResponse* internal_default_instance() {
    return reinterpret_cast<const TransferShardLeaderResponse*>(
               &_TransferShardLeaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TransferShardLeaderResponse& a, TransferShardLeaderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferShardLeaderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferShardLeaderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferShardLeaderResponse* New() const final {
    return CreateMaybeMessage<TransferShardLeaderResponse>(nullptr);
  }

  TransferShardLeaderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferShardLeaderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferShardLeaderResponse& from);
  void MergeFrom(const TransferShardLeaderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferShardLeaderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.TransferShardLeaderResponse";
  }
  protected:
  explicit TransferShardLeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.TransferShardLeaderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class LockShardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.LockShardRequest) */ {
 public:
  inline LockShardRequest() : LockShardRequest(nullptr) {};
  virtual ~LockShardRequest();

  LockShardRequest(const LockShardRequest& from);
  LockShardRequest(LockShardRequest&& from) noexcept
    : LockShardRequest() {
    *this = ::std::move(from);
  }

  inline LockShardRequest& operator=(const LockShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockShardRequest& operator=(LockShardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockShardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockShardRequest* internal_default_instance() {
    return reinterpret_cast<const LockShardRequest*>(
               &_LockShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(LockShardRequest& a, LockShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockShardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockShardRequest* New() const final {
    return CreateMaybeMessage<LockShardRequest>(nullptr);
  }

  LockShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockShardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockShardRequest& from);
  void MergeFrom(const LockShardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockShardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.LockShardRequest";
  }
  protected:
  explicit LockShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.LockShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class LockShardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.LockShardResponse) */ {
 public:
  inline LockShardResponse() : LockShardResponse(nullptr) {};
  virtual ~LockShardResponse();

  LockShardResponse(const LockShardResponse& from);
  LockShardResponse(LockShardResponse&& from) noexcept
    : LockShardResponse() {
    *this = ::std::move(from);
  }

  inline LockShardResponse& operator=(const LockShardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockShardResponse& operator=(LockShardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockShardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockShardResponse* internal_default_instance() {
    return reinterpret_cast<const LockShardResponse*>(
               &_LockShardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(LockShardResponse& a, LockShardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LockShardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockShardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockShardResponse* New() const final {
    return CreateMaybeMessage<LockShardResponse>(nullptr);
  }

  LockShardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockShardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockShardResponse& from);
  void MergeFrom(const LockShardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockShardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.LockShardResponse";
  }
  protected:
  explicit LockShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.LockShardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class UnlockShardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.UnlockShardRequest) */ {
 public:
  inline UnlockShardRequest() : UnlockShardRequest(nullptr) {};
  virtual ~UnlockShardRequest();

  UnlockShardRequest(const UnlockShardRequest& from);
  UnlockShardRequest(UnlockShardRequest&& from) noexcept
    : UnlockShardRequest() {
    *this = ::std::move(from);
  }

  inline UnlockShardRequest& operator=(const UnlockShardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlockShardRequest& operator=(UnlockShardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlockShardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockShardRequest* internal_default_instance() {
    return reinterpret_cast<const UnlockShardRequest*>(
               &_UnlockShardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UnlockShardRequest& a, UnlockShardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlockShardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnlockShardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlockShardRequest* New() const final {
    return CreateMaybeMessage<UnlockShardRequest>(nullptr);
  }

  UnlockShardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlockShardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlockShardRequest& from);
  void MergeFrom(const UnlockShardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlockShardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.UnlockShardRequest";
  }
  protected:
  explicit UnlockShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.UnlockShardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class UnlockShardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.UnlockShardResponse) */ {
 public:
  inline UnlockShardResponse() : UnlockShardResponse(nullptr) {};
  virtual ~UnlockShardResponse();

  UnlockShardResponse(const UnlockShardResponse& from);
  UnlockShardResponse(UnlockShardResponse&& from) noexcept
    : UnlockShardResponse() {
    *this = ::std::move(from);
  }

  inline UnlockShardResponse& operator=(const UnlockShardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlockShardResponse& operator=(UnlockShardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlockShardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlockShardResponse* internal_default_instance() {
    return reinterpret_cast<const UnlockShardResponse*>(
               &_UnlockShardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UnlockShardResponse& a, UnlockShardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlockShardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnlockShardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlockShardResponse* New() const final {
    return CreateMaybeMessage<UnlockShardResponse>(nullptr);
  }

  UnlockShardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlockShardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlockShardResponse& from);
  void MergeFrom(const UnlockShardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlockShardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.UnlockShardResponse";
  }
  protected:
  explicit UnlockShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.UnlockShardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardReadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardReadRequest) */ {
 public:
  inline ShardReadRequest() : ShardReadRequest(nullptr) {};
  virtual ~ShardReadRequest();

  ShardReadRequest(const ShardReadRequest& from);
  ShardReadRequest(ShardReadRequest&& from) noexcept
    : ShardReadRequest() {
    *this = ::std::move(from);
  }

  inline ShardReadRequest& operator=(const ShardReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardReadRequest& operator=(ShardReadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardReadRequest* internal_default_instance() {
    return reinterpret_cast<const ShardReadRequest*>(
               &_ShardReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ShardReadRequest& a, ShardReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardReadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardReadRequest* New() const final {
    return CreateMaybeMessage<ShardReadRequest>(nullptr);
  }

  ShardReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardReadRequest& from);
  void MergeFrom(const ShardReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardReadRequest";
  }
  protected:
  explicit ShardReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kShardIdFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardReadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardReadResponse) */ {
 public:
  inline ShardReadResponse() : ShardReadResponse(nullptr) {};
  virtual ~ShardReadResponse();

  ShardReadResponse(const ShardReadResponse& from);
  ShardReadResponse(ShardReadResponse&& from) noexcept
    : ShardReadResponse() {
    *this = ::std::move(from);
  }

  inline ShardReadResponse& operator=(const ShardReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardReadResponse& operator=(ShardReadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardReadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardReadResponse* internal_default_instance() {
    return reinterpret_cast<const ShardReadResponse*>(
               &_ShardReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ShardReadResponse& a, ShardReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardReadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardReadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardReadResponse* New() const final {
    return CreateMaybeMessage<ShardReadResponse>(nullptr);
  }

  ShardReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardReadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardReadResponse& from);
  void MergeFrom(const ShardReadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardReadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardReadResponse";
  }
  protected:
  explicit ShardReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardReadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardWriteRequest) */ {
 public:
  inline ShardWriteRequest() : ShardWriteRequest(nullptr) {};
  virtual ~ShardWriteRequest();

  ShardWriteRequest(const ShardWriteRequest& from);
  ShardWriteRequest(ShardWriteRequest&& from) noexcept
    : ShardWriteRequest() {
    *this = ::std::move(from);
  }

  inline ShardWriteRequest& operator=(const ShardWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardWriteRequest& operator=(ShardWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardWriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardWriteRequest* internal_default_instance() {
    return reinterpret_cast<const ShardWriteRequest*>(
               &_ShardWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ShardWriteRequest& a, ShardWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardWriteRequest* New() const final {
    return CreateMaybeMessage<ShardWriteRequest>(nullptr);
  }

  ShardWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardWriteRequest& from);
  void MergeFrom(const ShardWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardWriteRequest";
  }
  protected:
  explicit ShardWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kShardIdFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardWriteResponse) */ {
 public:
  inline ShardWriteResponse() : ShardWriteResponse(nullptr) {};
  virtual ~ShardWriteResponse();

  ShardWriteResponse(const ShardWriteResponse& from);
  ShardWriteResponse(ShardWriteResponse&& from) noexcept
    : ShardWriteResponse() {
    *this = ::std::move(from);
  }

  inline ShardWriteResponse& operator=(const ShardWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardWriteResponse& operator=(ShardWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardWriteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardWriteResponse* internal_default_instance() {
    return reinterpret_cast<const ShardWriteResponse*>(
               &_ShardWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ShardWriteResponse& a, ShardWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardWriteResponse* New() const final {
    return CreateMaybeMessage<ShardWriteResponse>(nullptr);
  }

  ShardWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardWriteResponse& from);
  void MergeFrom(const ShardWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardWriteResponse";
  }
  protected:
  explicit ShardWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotLeaderFieldNumber = 1,
  };
  // bool not_leader = 1;
  void clear_not_leader();
  bool not_leader() const;
  void set_not_leader(bool value);
  private:
  bool _internal_not_leader() const;
  void _internal_set_not_leader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool not_leader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardScanRequest) */ {
 public:
  inline ShardScanRequest() : ShardScanRequest(nullptr) {};
  virtual ~ShardScanRequest();

  ShardScanRequest(const ShardScanRequest& from);
  ShardScanRequest(ShardScanRequest&& from) noexcept
    : ShardScanRequest() {
    *this = ::std::move(from);
  }

  inline ShardScanRequest& operator=(const ShardScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardScanRequest& operator=(ShardScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardScanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardScanRequest* internal_default_instance() {
    return reinterpret_cast<const ShardScanRequest*>(
               &_ShardScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ShardScanRequest& a, ShardScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardScanRequest* New() const final {
    return CreateMaybeMessage<ShardScanRequest>(nullptr);
  }

  ShardScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardScanRequest& from);
  void MergeFrom(const ShardScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardScanRequest";
  }
  protected:
  explicit ShardScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 2,
    kEndKeyFieldNumber = 3,
    kShardIdFieldNumber = 1,
  };
  // bytes start_key = 2;
  void clear_start_key();
  const std::string& start_key() const;
  void set_start_key(const std::string& value);
  void set_start_key(std::string&& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  std::string* mutable_start_key();
  std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_key(
      std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // bytes end_key = 3;
  void clear_end_key();
  const std::string& end_key() const;
  void set_end_key(const std::string& value);
  void set_end_key(std::string&& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  std::string* mutable_end_key();
  std::string* release_end_key();
  void set_allocated_end_key(std::string* end_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end_key(
      std::string* end_key);
  private:
  const std::string& _internal_end_key() const;
  void _internal_set_end_key(const std::string& value);
  std::string* _internal_mutable_end_key();
  public:

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {};
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardScanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardScanResponse) */ {
 public:
  inline ShardScanResponse() : ShardScanResponse(nullptr) {};
  virtual ~ShardScanResponse();

  ShardScanResponse(const ShardScanResponse& from);
  ShardScanResponse(ShardScanResponse&& from) noexcept
    : ShardScanResponse() {
    *this = ::std::move(from);
  }

  inline ShardScanResponse& operator=(const ShardScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardScanResponse& operator=(ShardScanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardScanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardScanResponse* internal_default_instance() {
    return reinterpret_cast<const ShardScanResponse*>(
               &_ShardScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ShardScanResponse& a, ShardScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardScanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardScanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardScanResponse* New() const final {
    return CreateMaybeMessage<ShardScanResponse>(nullptr);
  }

  ShardScanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardScanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardScanResponse& from);
  void MergeFrom(const ShardScanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardScanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardScanResponse";
  }
  protected:
  explicit ShardScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 1,
    kNoLeftFieldNumber = 2,
  };
  // repeated .bedrock.dataserver.KeyValue kvs = 1;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::bedrock::dataserver::KeyValue* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::KeyValue >*
      mutable_kvs();
  private:
  const ::bedrock::dataserver::KeyValue& _internal_kvs(int index) const;
  ::bedrock::dataserver::KeyValue* _internal_add_kvs();
  public:
  const ::bedrock::dataserver::KeyValue& kvs(int index) const;
  ::bedrock::dataserver::KeyValue* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::KeyValue >&
      kvs() const;

  // bool no_left = 2;
  void clear_no_left();
  bool no_left() const;
  void set_no_left(bool value);
  private:
  bool _internal_no_left() const;
  void _internal_set_no_left(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardScanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::KeyValue > kvs_;
  bool no_left_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardAppendLogRequest_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardAppendLogRequest.Entry) */ {
 public:
  inline ShardAppendLogRequest_Entry() : ShardAppendLogRequest_Entry(nullptr) {};
  virtual ~ShardAppendLogRequest_Entry();

  ShardAppendLogRequest_Entry(const ShardAppendLogRequest_Entry& from);
  ShardAppendLogRequest_Entry(ShardAppendLogRequest_Entry&& from) noexcept
    : ShardAppendLogRequest_Entry() {
    *this = ::std::move(from);
  }

  inline ShardAppendLogRequest_Entry& operator=(const ShardAppendLogRequest_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardAppendLogRequest_Entry& operator=(ShardAppendLogRequest_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardAppendLogRequest_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardAppendLogRequest_Entry* internal_default_instance() {
    return reinterpret_cast<const ShardAppendLogRequest_Entry*>(
               &_ShardAppendLogRequest_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ShardAppendLogRequest_Entry& a, ShardAppendLogRequest_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardAppendLogRequest_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardAppendLogRequest_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardAppendLogRequest_Entry* New() const final {
    return CreateMaybeMessage<ShardAppendLogRequest_Entry>(nullptr);
  }

  ShardAppendLogRequest_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardAppendLogRequest_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardAppendLogRequest_Entry& from);
  void MergeFrom(const ShardAppendLogRequest_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardAppendLogRequest_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardAppendLogRequest.Entry";
  }
  protected:
  explicit ShardAppendLogRequest_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kKeyFieldNumber = 3,
    kValueFieldNumber = 4,
    kIndexFieldNumber = 2,
  };
  // string op = 1;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_op();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_op(
      std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardAppendLogRequest.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardAppendLogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardAppendLogRequest) */ {
 public:
  inline ShardAppendLogRequest() : ShardAppendLogRequest(nullptr) {};
  virtual ~ShardAppendLogRequest();

  ShardAppendLogRequest(const ShardAppendLogRequest& from);
  ShardAppendLogRequest(ShardAppendLogRequest&& from) noexcept
    : ShardAppendLogRequest() {
    *this = ::std::move(from);
  }

  inline ShardAppendLogRequest& operator=(const ShardAppendLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardAppendLogRequest& operator=(ShardAppendLogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardAppendLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardAppendLogRequest* internal_default_instance() {
    return reinterpret_cast<const ShardAppendLogRequest*>(
               &_ShardAppendLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ShardAppendLogRequest& a, ShardAppendLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardAppendLogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardAppendLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardAppendLogRequest* New() const final {
    return CreateMaybeMessage<ShardAppendLogRequest>(nullptr);
  }

  ShardAppendLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardAppendLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardAppendLogRequest& from);
  void MergeFrom(const ShardAppendLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardAppendLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardAppendLogRequest";
  }
  protected:
  explicit ShardAppendLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ShardAppendLogRequest_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kLeaderChangeTsFieldNumber = 2,
    kShardIdFieldNumber = 1,
  };
  // repeated .bedrock.dataserver.ShardAppendLogRequest.Entry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::bedrock::dataserver::ShardAppendLogRequest_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::ShardAppendLogRequest_Entry >*
      mutable_entries();
  private:
  const ::bedrock::dataserver::ShardAppendLogRequest_Entry& _internal_entries(int index) const;
  ::bedrock::dataserver::ShardAppendLogRequest_Entry* _internal_add_entries();
  public:
  const ::bedrock::dataserver::ShardAppendLogRequest_Entry& entries(int index) const;
  ::bedrock::dataserver::ShardAppendLogRequest_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::ShardAppendLogRequest_Entry >&
      entries() const;

  // .google.protobuf.Timestamp leader_change_ts = 2;
  bool has_leader_change_ts() const;
  private:
  bool _internal_has_leader_change_ts() const;
  public:
  void clear_leader_change_ts();
  const PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_leader_change_ts();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_leader_change_ts();
  void set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_leader_change_ts() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_leader_change_ts();
  public:
  void unsafe_arena_set_allocated_leader_change_ts(
      PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_leader_change_ts();

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardAppendLogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::ShardAppendLogRequest_Entry > entries_;
  PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardAppendLogResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardAppendLogResponse) */ {
 public:
  inline ShardAppendLogResponse() : ShardAppendLogResponse(nullptr) {};
  virtual ~ShardAppendLogResponse();

  ShardAppendLogResponse(const ShardAppendLogResponse& from);
  ShardAppendLogResponse(ShardAppendLogResponse&& from) noexcept
    : ShardAppendLogResponse() {
    *this = ::std::move(from);
  }

  inline ShardAppendLogResponse& operator=(const ShardAppendLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardAppendLogResponse& operator=(ShardAppendLogResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardAppendLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardAppendLogResponse* internal_default_instance() {
    return reinterpret_cast<const ShardAppendLogResponse*>(
               &_ShardAppendLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ShardAppendLogResponse& a, ShardAppendLogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardAppendLogResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardAppendLogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardAppendLogResponse* New() const final {
    return CreateMaybeMessage<ShardAppendLogResponse>(nullptr);
  }

  ShardAppendLogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardAppendLogResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardAppendLogResponse& from);
  void MergeFrom(const ShardAppendLogResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardAppendLogResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardAppendLogResponse";
  }
  protected:
  explicit ShardAppendLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastAppliedIndexFieldNumber = 2,
    kIsOldLeaderFieldNumber = 1,
  };
  // uint64 last_applied_index = 2;
  void clear_last_applied_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_applied_index() const;
  void set_last_applied_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_applied_index() const;
  void _internal_set_last_applied_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_old_leader = 1;
  void clear_is_old_leader();
  bool is_old_leader() const;
  void set_is_old_leader(bool value);
  private:
  bool _internal_is_old_leader() const;
  void _internal_set_is_old_leader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardAppendLogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_applied_index_;
  bool is_old_leader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardInstallSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardInstallSnapshotRequest) */ {
 public:
  inline ShardInstallSnapshotRequest() : ShardInstallSnapshotRequest(nullptr) {};
  virtual ~ShardInstallSnapshotRequest();

  ShardInstallSnapshotRequest(const ShardInstallSnapshotRequest& from);
  ShardInstallSnapshotRequest(ShardInstallSnapshotRequest&& from) noexcept
    : ShardInstallSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline ShardInstallSnapshotRequest& operator=(const ShardInstallSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardInstallSnapshotRequest& operator=(ShardInstallSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardInstallSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardInstallSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const ShardInstallSnapshotRequest*>(
               &_ShardInstallSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ShardInstallSnapshotRequest& a, ShardInstallSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardInstallSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardInstallSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardInstallSnapshotRequest* New() const final {
    return CreateMaybeMessage<ShardInstallSnapshotRequest>(nullptr);
  }

  ShardInstallSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardInstallSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardInstallSnapshotRequest& from);
  void MergeFrom(const ShardInstallSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardInstallSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardInstallSnapshotRequest";
  }
  protected:
  explicit ShardInstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPieceFieldNumber = 2,
    kShardIdFieldNumber = 1,
    kLastWalIndexFieldNumber = 3,
  };
  // bytes data_piece = 2;
  void clear_data_piece();
  const std::string& data_piece() const;
  void set_data_piece(const std::string& value);
  void set_data_piece(std::string&& value);
  void set_data_piece(const char* value);
  void set_data_piece(const void* value, size_t size);
  std::string* mutable_data_piece();
  std::string* release_data_piece();
  void set_allocated_data_piece(std::string* data_piece);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data_piece();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data_piece(
      std::string* data_piece);
  private:
  const std::string& _internal_data_piece() const;
  void _internal_set_data_piece(const std::string& value);
  std::string* _internal_mutable_data_piece();
  public:

  // uint64 shard_id = 1;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_wal_index = 3;
  void clear_last_wal_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_wal_index() const;
  void set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_wal_index() const;
  void _internal_set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardInstallSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_piece_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_wal_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardInstallSnapshotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardInstallSnapshotResponse) */ {
 public:
  inline ShardInstallSnapshotResponse() : ShardInstallSnapshotResponse(nullptr) {};
  virtual ~ShardInstallSnapshotResponse();

  ShardInstallSnapshotResponse(const ShardInstallSnapshotResponse& from);
  ShardInstallSnapshotResponse(ShardInstallSnapshotResponse&& from) noexcept
    : ShardInstallSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline ShardInstallSnapshotResponse& operator=(const ShardInstallSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardInstallSnapshotResponse& operator=(ShardInstallSnapshotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardInstallSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardInstallSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const ShardInstallSnapshotResponse*>(
               &_ShardInstallSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ShardInstallSnapshotResponse& a, ShardInstallSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardInstallSnapshotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardInstallSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardInstallSnapshotResponse* New() const final {
    return CreateMaybeMessage<ShardInstallSnapshotResponse>(nullptr);
  }

  ShardInstallSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardInstallSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardInstallSnapshotResponse& from);
  void MergeFrom(const ShardInstallSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardInstallSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardInstallSnapshotResponse";
  }
  protected:
  explicit ShardInstallSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardInstallSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardWriteReplicaRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardWriteReplicaRequest) */ {
 public:
  inline ShardWriteReplicaRequest() : ShardWriteReplicaRequest(nullptr) {};
  virtual ~ShardWriteReplicaRequest();

  ShardWriteReplicaRequest(const ShardWriteReplicaRequest& from);
  ShardWriteReplicaRequest(ShardWriteReplicaRequest&& from) noexcept
    : ShardWriteReplicaRequest() {
    *this = ::std::move(from);
  }

  inline ShardWriteReplicaRequest& operator=(const ShardWriteReplicaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardWriteReplicaRequest& operator=(ShardWriteReplicaRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardWriteReplicaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardWriteReplicaRequest* internal_default_instance() {
    return reinterpret_cast<const ShardWriteReplicaRequest*>(
               &_ShardWriteReplicaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ShardWriteReplicaRequest& a, ShardWriteReplicaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardWriteReplicaRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardWriteReplicaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardWriteReplicaRequest* New() const final {
    return CreateMaybeMessage<ShardWriteReplicaRequest>(nullptr);
  }

  ShardWriteReplicaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardWriteReplicaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardWriteReplicaRequest& from);
  void MergeFrom(const ShardWriteReplicaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardWriteReplicaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardWriteReplicaRequest";
  }
  protected:
  explicit ShardWriteReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardWriteReplicaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardWriteReplicaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardWriteReplicaResponse) */ {
 public:
  inline ShardWriteReplicaResponse() : ShardWriteReplicaResponse(nullptr) {};
  virtual ~ShardWriteReplicaResponse();

  ShardWriteReplicaResponse(const ShardWriteReplicaResponse& from);
  ShardWriteReplicaResponse(ShardWriteReplicaResponse&& from) noexcept
    : ShardWriteReplicaResponse() {
    *this = ::std::move(from);
  }

  inline ShardWriteReplicaResponse& operator=(const ShardWriteReplicaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardWriteReplicaResponse& operator=(ShardWriteReplicaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardWriteReplicaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardWriteReplicaResponse* internal_default_instance() {
    return reinterpret_cast<const ShardWriteReplicaResponse*>(
               &_ShardWriteReplicaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ShardWriteReplicaResponse& a, ShardWriteReplicaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardWriteReplicaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardWriteReplicaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardWriteReplicaResponse* New() const final {
    return CreateMaybeMessage<ShardWriteReplicaResponse>(nullptr);
  }

  ShardWriteReplicaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardWriteReplicaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardWriteReplicaResponse& from);
  void MergeFrom(const ShardWriteReplicaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardWriteReplicaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardWriteReplicaResponse";
  }
  protected:
  explicit ShardWriteReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardWriteReplicaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardRepairRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardRepairRequest) */ {
 public:
  inline ShardRepairRequest() : ShardRepairRequest(nullptr) {};
  virtual ~ShardRepairRequest();

  ShardRepairRequest(const ShardRepairRequest& from);
  ShardRepairRequest(ShardRepairRequest&& from) noexcept
    : ShardRepairRequest() {
    *this = ::std::move(from);
  }

  inline ShardRepairRequest& operator=(const ShardRepairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardRepairRequest& operator=(ShardRepairRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardRepairRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardRepairRequest* internal_default_instance() {
    return reinterpret_cast<const ShardRepairRequest*>(
               &_ShardRepairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ShardRepairRequest& a, ShardRepairRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardRepairRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardRepairRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardRepairRequest* New() const final {
    return CreateMaybeMessage<ShardRepairRequest>(nullptr);
  }

  ShardRepairRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardRepairRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardRepairRequest& from);
  void MergeFrom(const ShardRepairRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardRepairRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardRepairRequest";
  }
  protected:
  explicit ShardRepairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardRepairRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class ShardRepairResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.ShardRepairResponse) */ {
 public:
  inline ShardRepairResponse() : ShardRepairResponse(nullptr) {};
  virtual ~ShardRepairResponse();

  ShardRepairResponse(const ShardRepairResponse& from);
  ShardRepairResponse(ShardRepairResponse&& from) noexcept
    : ShardRepairResponse() {
    *this = ::std::move(from);
  }

  inline ShardRepairResponse& operator=(const ShardRepairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardRepairResponse& operator=(ShardRepairResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardRepairResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardRepairResponse* internal_default_instance() {
    return reinterpret_cast<const ShardRepairResponse*>(
               &_ShardRepairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ShardRepairResponse& a, ShardRepairResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardRepairResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardRepairResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardRepairResponse* New() const final {
    return CreateMaybeMessage<ShardRepairResponse>(nullptr);
  }

  ShardRepairResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardRepairResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardRepairResponse& from);
  void MergeFrom(const ShardRepairResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardRepairResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.ShardRepairResponse";
  }
  protected:
  explicit ShardRepairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.ShardRepairResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class DataServerJoinRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.DataServerJoinRequest) */ {
 public:
  inline DataServerJoinRequest() : DataServerJoinRequest(nullptr) {};
  virtual ~DataServerJoinRequest();

  DataServerJoinRequest(const DataServerJoinRequest& from);
  DataServerJoinRequest(DataServerJoinRequest&& from) noexcept
    : DataServerJoinRequest() {
    *this = ::std::move(from);
  }

  inline DataServerJoinRequest& operator=(const DataServerJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataServerJoinRequest& operator=(DataServerJoinRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataServerJoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataServerJoinRequest* internal_default_instance() {
    return reinterpret_cast<const DataServerJoinRequest*>(
               &_DataServerJoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DataServerJoinRequest& a, DataServerJoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataServerJoinRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataServerJoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataServerJoinRequest* New() const final {
    return CreateMaybeMessage<DataServerJoinRequest>(nullptr);
  }

  DataServerJoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataServerJoinRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataServerJoinRequest& from);
  void MergeFrom(const DataServerJoinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataServerJoinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.DataServerJoinRequest";
  }
  protected:
  explicit DataServerJoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.DataServerJoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class DataServerJoinResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.DataServerJoinResponse) */ {
 public:
  inline DataServerJoinResponse() : DataServerJoinResponse(nullptr) {};
  virtual ~DataServerJoinResponse();

  DataServerJoinResponse(const DataServerJoinResponse& from);
  DataServerJoinResponse(DataServerJoinResponse&& from) noexcept
    : DataServerJoinResponse() {
    *this = ::std::move(from);
  }

  inline DataServerJoinResponse& operator=(const DataServerJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataServerJoinResponse& operator=(DataServerJoinResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataServerJoinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataServerJoinResponse* internal_default_instance() {
    return reinterpret_cast<const DataServerJoinResponse*>(
               &_DataServerJoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DataServerJoinResponse& a, DataServerJoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DataServerJoinResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataServerJoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataServerJoinResponse* New() const final {
    return CreateMaybeMessage<DataServerJoinResponse>(nullptr);
  }

  DataServerJoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataServerJoinResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataServerJoinResponse& from);
  void MergeFrom(const DataServerJoinResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataServerJoinResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.DataServerJoinResponse";
  }
  protected:
  explicit DataServerJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.DataServerJoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class DataServerLeaveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.DataServerLeaveRequest) */ {
 public:
  inline DataServerLeaveRequest() : DataServerLeaveRequest(nullptr) {};
  virtual ~DataServerLeaveRequest();

  DataServerLeaveRequest(const DataServerLeaveRequest& from);
  DataServerLeaveRequest(DataServerLeaveRequest&& from) noexcept
    : DataServerLeaveRequest() {
    *this = ::std::move(from);
  }

  inline DataServerLeaveRequest& operator=(const DataServerLeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataServerLeaveRequest& operator=(DataServerLeaveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataServerLeaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataServerLeaveRequest* internal_default_instance() {
    return reinterpret_cast<const DataServerLeaveRequest*>(
               &_DataServerLeaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(DataServerLeaveRequest& a, DataServerLeaveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataServerLeaveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataServerLeaveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataServerLeaveRequest* New() const final {
    return CreateMaybeMessage<DataServerLeaveRequest>(nullptr);
  }

  DataServerLeaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataServerLeaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataServerLeaveRequest& from);
  void MergeFrom(const DataServerLeaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataServerLeaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.DataServerLeaveRequest";
  }
  protected:
  explicit DataServerLeaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.DataServerLeaveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class DataServerLeaveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.DataServerLeaveResponse) */ {
 public:
  inline DataServerLeaveResponse() : DataServerLeaveResponse(nullptr) {};
  virtual ~DataServerLeaveResponse();

  DataServerLeaveResponse(const DataServerLeaveResponse& from);
  DataServerLeaveResponse(DataServerLeaveResponse&& from) noexcept
    : DataServerLeaveResponse() {
    *this = ::std::move(from);
  }

  inline DataServerLeaveResponse& operator=(const DataServerLeaveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataServerLeaveResponse& operator=(DataServerLeaveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataServerLeaveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataServerLeaveResponse* internal_default_instance() {
    return reinterpret_cast<const DataServerLeaveResponse*>(
               &_DataServerLeaveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DataServerLeaveResponse& a, DataServerLeaveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DataServerLeaveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataServerLeaveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataServerLeaveResponse* New() const final {
    return CreateMaybeMessage<DataServerLeaveResponse>(nullptr);
  }

  DataServerLeaveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataServerLeaveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataServerLeaveResponse& from);
  void MergeFrom(const DataServerLeaveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataServerLeaveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.DataServerLeaveResponse";
  }
  protected:
  explicit DataServerLeaveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.DataServerLeaveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class StartTxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.StartTxRequest) */ {
 public:
  inline StartTxRequest() : StartTxRequest(nullptr) {};
  virtual ~StartTxRequest();

  StartTxRequest(const StartTxRequest& from);
  StartTxRequest(StartTxRequest&& from) noexcept
    : StartTxRequest() {
    *this = ::std::move(from);
  }

  inline StartTxRequest& operator=(const StartTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTxRequest& operator=(StartTxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTxRequest* internal_default_instance() {
    return reinterpret_cast<const StartTxRequest*>(
               &_StartTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(StartTxRequest& a, StartTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTxRequest* New() const final {
    return CreateMaybeMessage<StartTxRequest>(nullptr);
  }

  StartTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTxRequest& from);
  void MergeFrom(const StartTxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.StartTxRequest";
  }
  protected:
  explicit StartTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.StartTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class StartTxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.StartTxResponse) */ {
 public:
  inline StartTxResponse() : StartTxResponse(nullptr) {};
  virtual ~StartTxResponse();

  StartTxResponse(const StartTxResponse& from);
  StartTxResponse(StartTxResponse&& from) noexcept
    : StartTxResponse() {
    *this = ::std::move(from);
  }

  inline StartTxResponse& operator=(const StartTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTxResponse& operator=(StartTxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTxResponse* internal_default_instance() {
    return reinterpret_cast<const StartTxResponse*>(
               &_StartTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(StartTxResponse& a, StartTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTxResponse* New() const final {
    return CreateMaybeMessage<StartTxResponse>(nullptr);
  }

  StartTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTxResponse& from);
  void MergeFrom(const StartTxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.StartTxResponse";
  }
  protected:
  explicit StartTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.StartTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class PrepareTxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.PrepareTxRequest) */ {
 public:
  inline PrepareTxRequest() : PrepareTxRequest(nullptr) {};
  virtual ~PrepareTxRequest();

  PrepareTxRequest(const PrepareTxRequest& from);
  PrepareTxRequest(PrepareTxRequest&& from) noexcept
    : PrepareTxRequest() {
    *this = ::std::move(from);
  }

  inline PrepareTxRequest& operator=(const PrepareTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareTxRequest& operator=(PrepareTxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareTxRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareTxRequest*>(
               &_PrepareTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PrepareTxRequest& a, PrepareTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareTxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareTxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareTxRequest* New() const final {
    return CreateMaybeMessage<PrepareTxRequest>(nullptr);
  }

  PrepareTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareTxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareTxRequest& from);
  void MergeFrom(const PrepareTxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareTxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.PrepareTxRequest";
  }
  protected:
  explicit PrepareTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.PrepareTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class PrepareTxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.PrepareTxResponse) */ {
 public:
  inline PrepareTxResponse() : PrepareTxResponse(nullptr) {};
  virtual ~PrepareTxResponse();

  PrepareTxResponse(const PrepareTxResponse& from);
  PrepareTxResponse(PrepareTxResponse&& from) noexcept
    : PrepareTxResponse() {
    *this = ::std::move(from);
  }

  inline PrepareTxResponse& operator=(const PrepareTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareTxResponse& operator=(PrepareTxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareTxResponse* internal_default_instance() {
    return reinterpret_cast<const PrepareTxResponse*>(
               &_PrepareTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PrepareTxResponse& a, PrepareTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareTxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareTxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareTxResponse* New() const final {
    return CreateMaybeMessage<PrepareTxResponse>(nullptr);
  }

  PrepareTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareTxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareTxResponse& from);
  void MergeFrom(const PrepareTxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareTxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.PrepareTxResponse";
  }
  protected:
  explicit PrepareTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.PrepareTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class CommitTxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.CommitTxRequest) */ {
 public:
  inline CommitTxRequest() : CommitTxRequest(nullptr) {};
  virtual ~CommitTxRequest();

  CommitTxRequest(const CommitTxRequest& from);
  CommitTxRequest(CommitTxRequest&& from) noexcept
    : CommitTxRequest() {
    *this = ::std::move(from);
  }

  inline CommitTxRequest& operator=(const CommitTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitTxRequest& operator=(CommitTxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommitTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitTxRequest* internal_default_instance() {
    return reinterpret_cast<const CommitTxRequest*>(
               &_CommitTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CommitTxRequest& a, CommitTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitTxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitTxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitTxRequest* New() const final {
    return CreateMaybeMessage<CommitTxRequest>(nullptr);
  }

  CommitTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitTxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommitTxRequest& from);
  void MergeFrom(const CommitTxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitTxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.CommitTxRequest";
  }
  protected:
  explicit CommitTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.CommitTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class CommitTxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.CommitTxResponse) */ {
 public:
  inline CommitTxResponse() : CommitTxResponse(nullptr) {};
  virtual ~CommitTxResponse();

  CommitTxResponse(const CommitTxResponse& from);
  CommitTxResponse(CommitTxResponse&& from) noexcept
    : CommitTxResponse() {
    *this = ::std::move(from);
  }

  inline CommitTxResponse& operator=(const CommitTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitTxResponse& operator=(CommitTxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommitTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitTxResponse* internal_default_instance() {
    return reinterpret_cast<const CommitTxResponse*>(
               &_CommitTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CommitTxResponse& a, CommitTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitTxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitTxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommitTxResponse* New() const final {
    return CreateMaybeMessage<CommitTxResponse>(nullptr);
  }

  CommitTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommitTxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommitTxResponse& from);
  void MergeFrom(const CommitTxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitTxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.CommitTxResponse";
  }
  protected:
  explicit CommitTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.CommitTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class CancelTxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.CancelTxRequest) */ {
 public:
  inline CancelTxRequest() : CancelTxRequest(nullptr) {};
  virtual ~CancelTxRequest();

  CancelTxRequest(const CancelTxRequest& from);
  CancelTxRequest(CancelTxRequest&& from) noexcept
    : CancelTxRequest() {
    *this = ::std::move(from);
  }

  inline CancelTxRequest& operator=(const CancelTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelTxRequest& operator=(CancelTxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelTxRequest* internal_default_instance() {
    return reinterpret_cast<const CancelTxRequest*>(
               &_CancelTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CancelTxRequest& a, CancelTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelTxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelTxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelTxRequest* New() const final {
    return CreateMaybeMessage<CancelTxRequest>(nullptr);
  }

  CancelTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelTxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelTxRequest& from);
  void MergeFrom(const CancelTxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelTxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.CancelTxRequest";
  }
  protected:
  explicit CancelTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.CancelTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class CancelTxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.CancelTxResponse) */ {
 public:
  inline CancelTxResponse() : CancelTxResponse(nullptr) {};
  virtual ~CancelTxResponse();

  CancelTxResponse(const CancelTxResponse& from);
  CancelTxResponse(CancelTxResponse&& from) noexcept
    : CancelTxResponse() {
    *this = ::std::move(from);
  }

  inline CancelTxResponse& operator=(const CancelTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelTxResponse& operator=(CancelTxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelTxResponse* internal_default_instance() {
    return reinterpret_cast<const CancelTxResponse*>(
               &_CancelTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CancelTxResponse& a, CancelTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelTxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelTxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelTxResponse* New() const final {
    return CreateMaybeMessage<CancelTxResponse>(nullptr);
  }

  CancelTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelTxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelTxResponse& from);
  void MergeFrom(const CancelTxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelTxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.CancelTxResponse";
  }
  protected:
  explicit CancelTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.CancelTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class LockRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.LockRecordRequest) */ {
 public:
  inline LockRecordRequest() : LockRecordRequest(nullptr) {};
  virtual ~LockRecordRequest();

  LockRecordRequest(const LockRecordRequest& from);
  LockRecordRequest(LockRecordRequest&& from) noexcept
    : LockRecordRequest() {
    *this = ::std::move(from);
  }

  inline LockRecordRequest& operator=(const LockRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRecordRequest& operator=(LockRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRecordRequest* internal_default_instance() {
    return reinterpret_cast<const LockRecordRequest*>(
               &_LockRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(LockRecordRequest& a, LockRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockRecordRequest* New() const final {
    return CreateMaybeMessage<LockRecordRequest>(nullptr);
  }

  LockRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockRecordRequest& from);
  void MergeFrom(const LockRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.LockRecordRequest";
  }
  protected:
  explicit LockRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kTxIdFieldNumber = 1,
    kShardIdFieldNumber = 2,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shard_id = 2;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.LockRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class LockRecordResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.LockRecordResponse) */ {
 public:
  inline LockRecordResponse() : LockRecordResponse(nullptr) {};
  virtual ~LockRecordResponse();

  LockRecordResponse(const LockRecordResponse& from);
  LockRecordResponse(LockRecordResponse&& from) noexcept
    : LockRecordResponse() {
    *this = ::std::move(from);
  }

  inline LockRecordResponse& operator=(const LockRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRecordResponse& operator=(LockRecordResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRecordResponse* internal_default_instance() {
    return reinterpret_cast<const LockRecordResponse*>(
               &_LockRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(LockRecordResponse& a, LockRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRecordResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockRecordResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockRecordResponse* New() const final {
    return CreateMaybeMessage<LockRecordResponse>(nullptr);
  }

  LockRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockRecordResponse& from);
  void MergeFrom(const LockRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.LockRecordResponse";
  }
  protected:
  explicit LockRecordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.LockRecordResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class LockRangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.LockRangeRequest) */ {
 public:
  inline LockRangeRequest() : LockRangeRequest(nullptr) {};
  virtual ~LockRangeRequest();

  LockRangeRequest(const LockRangeRequest& from);
  LockRangeRequest(LockRangeRequest&& from) noexcept
    : LockRangeRequest() {
    *this = ::std::move(from);
  }

  inline LockRangeRequest& operator=(const LockRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRangeRequest& operator=(LockRangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRangeRequest* internal_default_instance() {
    return reinterpret_cast<const LockRangeRequest*>(
               &_LockRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(LockRangeRequest& a, LockRangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockRangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockRangeRequest* New() const final {
    return CreateMaybeMessage<LockRangeRequest>(nullptr);
  }

  LockRangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockRangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockRangeRequest& from);
  void MergeFrom(const LockRangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.LockRangeRequest";
  }
  protected:
  explicit LockRangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 3,
    kEndKeyFieldNumber = 4,
    kTxIdFieldNumber = 1,
    kShardIdFieldNumber = 2,
  };
  // bytes start_key = 3;
  void clear_start_key();
  const std::string& start_key() const;
  void set_start_key(const std::string& value);
  void set_start_key(std::string&& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  std::string* mutable_start_key();
  std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_key(
      std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // bytes end_key = 4;
  void clear_end_key();
  const std::string& end_key() const;
  void set_end_key(const std::string& value);
  void set_end_key(std::string&& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  std::string* mutable_end_key();
  std::string* release_end_key();
  void set_allocated_end_key(std::string* end_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end_key(
      std::string* end_key);
  private:
  const std::string& _internal_end_key() const;
  void _internal_set_end_key(const std::string& value);
  std::string* _internal_mutable_end_key();
  public:

  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 shard_id = 2;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.LockRangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 shard_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// -------------------------------------------------------------------

class LockRangeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.dataserver.LockRangeResponse) */ {
 public:
  inline LockRangeResponse() : LockRangeResponse(nullptr) {};
  virtual ~LockRangeResponse();

  LockRangeResponse(const LockRangeResponse& from);
  LockRangeResponse(LockRangeResponse&& from) noexcept
    : LockRangeResponse() {
    *this = ::std::move(from);
  }

  inline LockRangeResponse& operator=(const LockRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRangeResponse& operator=(LockRangeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRangeResponse* internal_default_instance() {
    return reinterpret_cast<const LockRangeResponse*>(
               &_LockRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(LockRangeResponse& a, LockRangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRangeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockRangeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockRangeResponse* New() const final {
    return CreateMaybeMessage<LockRangeResponse>(nullptr);
  }

  LockRangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockRangeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockRangeResponse& from);
  void MergeFrom(const LockRangeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRangeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.dataserver.LockRangeResponse";
  }
  protected:
  explicit LockRangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dataserver_2eproto);
    return ::descriptor_table_dataserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bedrock.dataserver.LockRangeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dataserver_2eproto;
};
// ===================================================================

class DataService_Stub;

class DataService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DataService() {};
 public:
  virtual ~DataService();

  typedef DataService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void CreateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::CreateShardRequest* request,
                       ::bedrock::dataserver::CreateShardResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::DeleteShardRequest* request,
                       PROTOBUF_NAMESPACE_ID::Empty* response,
                       ::google::protobuf::Closure* done);
  virtual void ShardInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardInfoRequest* request,
                       ::bedrock::dataserver::ShardInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SplitShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::SplitShardRequest* request,
                       ::bedrock::dataserver::SplitShardResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void MergeShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::MergeShardRequest* request,
                       ::bedrock::dataserver::MergeShardResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void TransferShardLeader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::TransferShardLeaderRequest* request,
                       ::bedrock::dataserver::TransferShardLeaderResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShardRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardReadRequest* request,
                       ::bedrock::dataserver::ShardReadResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShardWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardWriteRequest* request,
                       ::bedrock::dataserver::ShardWriteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShardScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardScanRequest* request,
                       ::bedrock::dataserver::ShardScanResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShardAppendLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardAppendLogRequest* request,
                       ::bedrock::dataserver::ShardAppendLogResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShardInstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardInstallSnapshotRequest* request,
                       ::bedrock::dataserver::ShardInstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void MigrateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::MigrateShardRequest* request,
                       ::bedrock::dataserver::MigrateShardResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void StartTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::StartTxRequest* request,
                       ::bedrock::dataserver::StartTxResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void LockRecord(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::LockRecordRequest* request,
                       ::bedrock::dataserver::LockRecordResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void LockRange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::LockRangeRequest* request,
                       ::bedrock::dataserver::LockRangeResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void PrepareTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::PrepareTxRequest* request,
                       ::bedrock::dataserver::PrepareTxResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CommitTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::CommitTxRequest* request,
                       ::bedrock::dataserver::CommitTxResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CancelTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::CancelTxRequest* request,
                       ::bedrock::dataserver::CancelTxResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DataService);
};

class DataService_Stub : public DataService {
 public:
  DataService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DataService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DataService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DataService ------------------------------------------

  void CreateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::CreateShardRequest* request,
                       ::bedrock::dataserver::CreateShardResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::DeleteShardRequest* request,
                       PROTOBUF_NAMESPACE_ID::Empty* response,
                       ::google::protobuf::Closure* done);
  void ShardInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardInfoRequest* request,
                       ::bedrock::dataserver::ShardInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void SplitShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::SplitShardRequest* request,
                       ::bedrock::dataserver::SplitShardResponse* response,
                       ::google::protobuf::Closure* done);
  void MergeShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::MergeShardRequest* request,
                       ::bedrock::dataserver::MergeShardResponse* response,
                       ::google::protobuf::Closure* done);
  void TransferShardLeader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::TransferShardLeaderRequest* request,
                       ::bedrock::dataserver::TransferShardLeaderResponse* response,
                       ::google::protobuf::Closure* done);
  void ShardRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardReadRequest* request,
                       ::bedrock::dataserver::ShardReadResponse* response,
                       ::google::protobuf::Closure* done);
  void ShardWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardWriteRequest* request,
                       ::bedrock::dataserver::ShardWriteResponse* response,
                       ::google::protobuf::Closure* done);
  void ShardScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardScanRequest* request,
                       ::bedrock::dataserver::ShardScanResponse* response,
                       ::google::protobuf::Closure* done);
  void ShardAppendLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardAppendLogRequest* request,
                       ::bedrock::dataserver::ShardAppendLogResponse* response,
                       ::google::protobuf::Closure* done);
  void ShardInstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::ShardInstallSnapshotRequest* request,
                       ::bedrock::dataserver::ShardInstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  void MigrateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::MigrateShardRequest* request,
                       ::bedrock::dataserver::MigrateShardResponse* response,
                       ::google::protobuf::Closure* done);
  void StartTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::StartTxRequest* request,
                       ::bedrock::dataserver::StartTxResponse* response,
                       ::google::protobuf::Closure* done);
  void LockRecord(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::LockRecordRequest* request,
                       ::bedrock::dataserver::LockRecordResponse* response,
                       ::google::protobuf::Closure* done);
  void LockRange(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::LockRangeRequest* request,
                       ::bedrock::dataserver::LockRangeResponse* response,
                       ::google::protobuf::Closure* done);
  void PrepareTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::PrepareTxRequest* request,
                       ::bedrock::dataserver::PrepareTxResponse* response,
                       ::google::protobuf::Closure* done);
  void CommitTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::CommitTxRequest* request,
                       ::bedrock::dataserver::CommitTxResponse* response,
                       ::google::protobuf::Closure* done);
  void CancelTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::dataserver::CancelTxRequest* request,
                       ::bedrock::dataserver::CancelTxResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DataService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShardMeta

// uint64 shard_id = 1;
inline void ShardMeta::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardMeta::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardMeta::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.shard_id)
  return _internal_shard_id();
}
inline void ShardMeta::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void ShardMeta::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardMeta.shard_id)
}

// .google.protobuf.Timestamp create_ts = 2;
inline bool ShardMeta::_internal_has_create_ts() const {
  return this != internal_default_instance() && create_ts_ != nullptr;
}
inline bool ShardMeta::has_create_ts() const {
  return _internal_has_create_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardMeta::_internal_create_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardMeta::create_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.create_ts)
  return _internal_create_ts();
}
inline void ShardMeta::unsafe_arena_set_allocated_create_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts_);
  }
  create_ts_ = create_ts;
  if (create_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardMeta.create_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::release_create_ts() {
  auto temp = unsafe_arena_release_create_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::unsafe_arena_release_create_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardMeta.create_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_ts_;
  create_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::_internal_mutable_create_ts() {
  
  if (create_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_ts_ = p;
  }
  return create_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::mutable_create_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardMeta.create_ts)
  return _internal_mutable_create_ts();
}
inline void ShardMeta::set_allocated_create_ts(PROTOBUF_NAMESPACE_ID::Timestamp* create_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts_);
  }
  if (create_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts)->GetArena();
    if (message_arena != submessage_arena) {
      create_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_ts, submessage_arena);
    }
    
  } else {
    
  }
  create_ts_ = create_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardMeta.create_ts)
}

// repeated string replicates = 3;
inline int ShardMeta::_internal_replicates_size() const {
  return replicates_.size();
}
inline int ShardMeta::replicates_size() const {
  return _internal_replicates_size();
}
inline void ShardMeta::clear_replicates() {
  replicates_.Clear();
}
inline std::string* ShardMeta::add_replicates() {
  // @@protoc_insertion_point(field_add_mutable:bedrock.dataserver.ShardMeta.replicates)
  return _internal_add_replicates();
}
inline const std::string& ShardMeta::_internal_replicates(int index) const {
  return replicates_.Get(index);
}
inline const std::string& ShardMeta::replicates(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.replicates)
  return _internal_replicates(index);
}
inline std::string* ShardMeta::mutable_replicates(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardMeta.replicates)
  return replicates_.Mutable(index);
}
inline void ShardMeta::set_replicates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardMeta.replicates)
  replicates_.Mutable(index)->assign(value);
}
inline void ShardMeta::set_replicates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardMeta.replicates)
  replicates_.Mutable(index)->assign(std::move(value));
}
inline void ShardMeta::set_replicates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  replicates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardMeta.replicates)
}
inline void ShardMeta::set_replicates(int index, const char* value, size_t size) {
  replicates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardMeta.replicates)
}
inline std::string* ShardMeta::_internal_add_replicates() {
  return replicates_.Add();
}
inline void ShardMeta::add_replicates(const std::string& value) {
  replicates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bedrock.dataserver.ShardMeta.replicates)
}
inline void ShardMeta::add_replicates(std::string&& value) {
  replicates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bedrock.dataserver.ShardMeta.replicates)
}
inline void ShardMeta::add_replicates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  replicates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bedrock.dataserver.ShardMeta.replicates)
}
inline void ShardMeta::add_replicates(const char* value, size_t size) {
  replicates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bedrock.dataserver.ShardMeta.replicates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShardMeta::replicates() const {
  // @@protoc_insertion_point(field_list:bedrock.dataserver.ShardMeta.replicates)
  return replicates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShardMeta::mutable_replicates() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.dataserver.ShardMeta.replicates)
  return &replicates_;
}

// .google.protobuf.Timestamp replicates_update_ts = 4;
inline bool ShardMeta::_internal_has_replicates_update_ts() const {
  return this != internal_default_instance() && replicates_update_ts_ != nullptr;
}
inline bool ShardMeta::has_replicates_update_ts() const {
  return _internal_has_replicates_update_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardMeta::_internal_replicates_update_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = replicates_update_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardMeta::replicates_update_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.replicates_update_ts)
  return _internal_replicates_update_ts();
}
inline void ShardMeta::unsafe_arena_set_allocated_replicates_update_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replicates_update_ts_);
  }
  replicates_update_ts_ = replicates_update_ts;
  if (replicates_update_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardMeta.replicates_update_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::release_replicates_update_ts() {
  auto temp = unsafe_arena_release_replicates_update_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::unsafe_arena_release_replicates_update_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardMeta.replicates_update_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = replicates_update_ts_;
  replicates_update_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::_internal_mutable_replicates_update_ts() {
  
  if (replicates_update_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    replicates_update_ts_ = p;
  }
  return replicates_update_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::mutable_replicates_update_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardMeta.replicates_update_ts)
  return _internal_mutable_replicates_update_ts();
}
inline void ShardMeta::set_allocated_replicates_update_ts(PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replicates_update_ts_);
  }
  if (replicates_update_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replicates_update_ts)->GetArena();
    if (message_arena != submessage_arena) {
      replicates_update_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replicates_update_ts, submessage_arena);
    }
    
  } else {
    
  }
  replicates_update_ts_ = replicates_update_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardMeta.replicates_update_ts)
}

// bool is_leader = 5;
inline void ShardMeta::clear_is_leader() {
  is_leader_ = false;
}
inline bool ShardMeta::_internal_is_leader() const {
  return is_leader_;
}
inline bool ShardMeta::is_leader() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.is_leader)
  return _internal_is_leader();
}
inline void ShardMeta::_internal_set_is_leader(bool value) {
  
  is_leader_ = value;
}
inline void ShardMeta::set_is_leader(bool value) {
  _internal_set_is_leader(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardMeta.is_leader)
}

// string leader = 6;
inline void ShardMeta::clear_leader() {
  leader_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardMeta::leader() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.leader)
  return _internal_leader();
}
inline void ShardMeta::set_leader(const std::string& value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardMeta.leader)
}
inline std::string* ShardMeta::mutable_leader() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardMeta.leader)
  return _internal_mutable_leader();
}
inline const std::string& ShardMeta::_internal_leader() const {
  return leader_.Get();
}
inline void ShardMeta::_internal_set_leader(const std::string& value) {
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardMeta::set_leader(std::string&& value) {
  
  leader_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardMeta.leader)
}
inline void ShardMeta::set_leader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardMeta.leader)
}
inline void ShardMeta::set_leader(const char* value,
    size_t size) {
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardMeta.leader)
}
inline std::string* ShardMeta::_internal_mutable_leader() {
  
  return leader_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardMeta::release_leader() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardMeta.leader)
  return leader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardMeta::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    
  } else {
    
  }
  leader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardMeta.leader)
}
inline std::string* ShardMeta::unsafe_arena_release_leader() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardMeta.leader)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardMeta::unsafe_arena_set_allocated_leader(
    std::string* leader) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader != nullptr) {
    
  } else {
    
  }
  leader_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardMeta.leader)
}

// .google.protobuf.Timestamp leader_change_ts = 7;
inline bool ShardMeta::_internal_has_leader_change_ts() const {
  return this != internal_default_instance() && leader_change_ts_ != nullptr;
}
inline bool ShardMeta::has_leader_change_ts() const {
  return _internal_has_leader_change_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardMeta::_internal_leader_change_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = leader_change_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardMeta::leader_change_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.leader_change_ts)
  return _internal_leader_change_ts();
}
inline void ShardMeta::unsafe_arena_set_allocated_leader_change_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  leader_change_ts_ = leader_change_ts;
  if (leader_change_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardMeta.leader_change_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::release_leader_change_ts() {
  auto temp = unsafe_arena_release_leader_change_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::unsafe_arena_release_leader_change_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardMeta.leader_change_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = leader_change_ts_;
  leader_change_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::_internal_mutable_leader_change_ts() {
  
  if (leader_change_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    leader_change_ts_ = p;
  }
  return leader_change_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardMeta::mutable_leader_change_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardMeta.leader_change_ts)
  return _internal_mutable_leader_change_ts();
}
inline void ShardMeta::set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  if (leader_change_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts)->GetArena();
    if (message_arena != submessage_arena) {
      leader_change_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_change_ts, submessage_arena);
    }
    
  } else {
    
  }
  leader_change_ts_ = leader_change_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardMeta.leader_change_ts)
}

// uint64 last_wal_index = 8;
inline void ShardMeta::clear_last_wal_index() {
  last_wal_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardMeta::_internal_last_wal_index() const {
  return last_wal_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardMeta::last_wal_index() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.last_wal_index)
  return _internal_last_wal_index();
}
inline void ShardMeta::_internal_set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_wal_index_ = value;
}
inline void ShardMeta::set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_wal_index(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardMeta.last_wal_index)
}

// bytes min_key = 9;
inline void ShardMeta::clear_min_key() {
  min_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardMeta::min_key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.min_key)
  return _internal_min_key();
}
inline void ShardMeta::set_min_key(const std::string& value) {
  _internal_set_min_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardMeta.min_key)
}
inline std::string* ShardMeta::mutable_min_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardMeta.min_key)
  return _internal_mutable_min_key();
}
inline const std::string& ShardMeta::_internal_min_key() const {
  return min_key_.Get();
}
inline void ShardMeta::_internal_set_min_key(const std::string& value) {
  
  min_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardMeta::set_min_key(std::string&& value) {
  
  min_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardMeta.min_key)
}
inline void ShardMeta::set_min_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardMeta.min_key)
}
inline void ShardMeta::set_min_key(const void* value,
    size_t size) {
  
  min_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardMeta.min_key)
}
inline std::string* ShardMeta::_internal_mutable_min_key() {
  
  return min_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardMeta::release_min_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardMeta.min_key)
  return min_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardMeta::set_allocated_min_key(std::string* min_key) {
  if (min_key != nullptr) {
    
  } else {
    
  }
  min_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardMeta.min_key)
}
inline std::string* ShardMeta::unsafe_arena_release_min_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardMeta.min_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return min_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardMeta::unsafe_arena_set_allocated_min_key(
    std::string* min_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (min_key != nullptr) {
    
  } else {
    
  }
  min_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      min_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardMeta.min_key)
}

// bytes max_key = 10;
inline void ShardMeta::clear_max_key() {
  max_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardMeta::max_key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardMeta.max_key)
  return _internal_max_key();
}
inline void ShardMeta::set_max_key(const std::string& value) {
  _internal_set_max_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardMeta.max_key)
}
inline std::string* ShardMeta::mutable_max_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardMeta.max_key)
  return _internal_mutable_max_key();
}
inline const std::string& ShardMeta::_internal_max_key() const {
  return max_key_.Get();
}
inline void ShardMeta::_internal_set_max_key(const std::string& value) {
  
  max_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardMeta::set_max_key(std::string&& value) {
  
  max_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardMeta.max_key)
}
inline void ShardMeta::set_max_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  max_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardMeta.max_key)
}
inline void ShardMeta::set_max_key(const void* value,
    size_t size) {
  
  max_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardMeta.max_key)
}
inline std::string* ShardMeta::_internal_mutable_max_key() {
  
  return max_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardMeta::release_max_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardMeta.max_key)
  return max_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardMeta::set_allocated_max_key(std::string* max_key) {
  if (max_key != nullptr) {
    
  } else {
    
  }
  max_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardMeta.max_key)
}
inline std::string* ShardMeta::unsafe_arena_release_max_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardMeta.max_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return max_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardMeta::unsafe_arena_set_allocated_max_key(
    std::string* max_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (max_key != nullptr) {
    
  } else {
    
  }
  max_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      max_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardMeta.max_key)
}

// -------------------------------------------------------------------

// SplitShardRequest

// uint64 shard_id = 1;
inline void SplitShardRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SplitShardRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SplitShardRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.SplitShardRequest.shard_id)
  return _internal_shard_id();
}
inline void SplitShardRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void SplitShardRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.SplitShardRequest.shard_id)
}

// uint64 new_shard_id = 2;
inline void SplitShardRequest::clear_new_shard_id() {
  new_shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SplitShardRequest::_internal_new_shard_id() const {
  return new_shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SplitShardRequest::new_shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.SplitShardRequest.new_shard_id)
  return _internal_new_shard_id();
}
inline void SplitShardRequest::_internal_set_new_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  new_shard_id_ = value;
}
inline void SplitShardRequest::set_new_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_new_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.SplitShardRequest.new_shard_id)
}

// -------------------------------------------------------------------

// SplitShardResponse

// -------------------------------------------------------------------

// MergeShardRequest

// uint64 shard_id_a = 1;
inline void MergeShardRequest::clear_shard_id_a() {
  shard_id_a_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeShardRequest::_internal_shard_id_a() const {
  return shard_id_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeShardRequest::shard_id_a() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MergeShardRequest.shard_id_a)
  return _internal_shard_id_a();
}
inline void MergeShardRequest::_internal_set_shard_id_a(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_a_ = value;
}
inline void MergeShardRequest::set_shard_id_a(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id_a(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.MergeShardRequest.shard_id_a)
}

// uint64 shard_id_b = 2;
inline void MergeShardRequest::clear_shard_id_b() {
  shard_id_b_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeShardRequest::_internal_shard_id_b() const {
  return shard_id_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MergeShardRequest::shard_id_b() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MergeShardRequest.shard_id_b)
  return _internal_shard_id_b();
}
inline void MergeShardRequest::_internal_set_shard_id_b(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_b_ = value;
}
inline void MergeShardRequest::set_shard_id_b(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id_b(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.MergeShardRequest.shard_id_b)
}

// -------------------------------------------------------------------

// MergeShardResponse

// -------------------------------------------------------------------

// CreateShardRequest

// uint64 shard_id = 1;
inline void CreateShardRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateShardRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateShardRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.CreateShardRequest.shard_id)
  return _internal_shard_id();
}
inline void CreateShardRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void CreateShardRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.CreateShardRequest.shard_id)
}

// .google.protobuf.Timestamp create_ts = 2;
inline bool CreateShardRequest::_internal_has_create_ts() const {
  return this != internal_default_instance() && create_ts_ != nullptr;
}
inline bool CreateShardRequest::has_create_ts() const {
  return _internal_has_create_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateShardRequest::_internal_create_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateShardRequest::create_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.CreateShardRequest.create_ts)
  return _internal_create_ts();
}
inline void CreateShardRequest::unsafe_arena_set_allocated_create_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts_);
  }
  create_ts_ = create_ts;
  if (create_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.CreateShardRequest.create_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::release_create_ts() {
  auto temp = unsafe_arena_release_create_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::unsafe_arena_release_create_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.CreateShardRequest.create_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_ts_;
  create_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::_internal_mutable_create_ts() {
  
  if (create_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_ts_ = p;
  }
  return create_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::mutable_create_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.CreateShardRequest.create_ts)
  return _internal_mutable_create_ts();
}
inline void CreateShardRequest::set_allocated_create_ts(PROTOBUF_NAMESPACE_ID::Timestamp* create_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts_);
  }
  if (create_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts)->GetArena();
    if (message_arena != submessage_arena) {
      create_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_ts, submessage_arena);
    }
    
  } else {
    
  }
  create_ts_ = create_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.CreateShardRequest.create_ts)
}

// repeated string replicates = 3;
inline int CreateShardRequest::_internal_replicates_size() const {
  return replicates_.size();
}
inline int CreateShardRequest::replicates_size() const {
  return _internal_replicates_size();
}
inline void CreateShardRequest::clear_replicates() {
  replicates_.Clear();
}
inline std::string* CreateShardRequest::add_replicates() {
  // @@protoc_insertion_point(field_add_mutable:bedrock.dataserver.CreateShardRequest.replicates)
  return _internal_add_replicates();
}
inline const std::string& CreateShardRequest::_internal_replicates(int index) const {
  return replicates_.Get(index);
}
inline const std::string& CreateShardRequest::replicates(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.CreateShardRequest.replicates)
  return _internal_replicates(index);
}
inline std::string* CreateShardRequest::mutable_replicates(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.CreateShardRequest.replicates)
  return replicates_.Mutable(index);
}
inline void CreateShardRequest::set_replicates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bedrock.dataserver.CreateShardRequest.replicates)
  replicates_.Mutable(index)->assign(value);
}
inline void CreateShardRequest::set_replicates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bedrock.dataserver.CreateShardRequest.replicates)
  replicates_.Mutable(index)->assign(std::move(value));
}
inline void CreateShardRequest::set_replicates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  replicates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.CreateShardRequest.replicates)
}
inline void CreateShardRequest::set_replicates(int index, const char* value, size_t size) {
  replicates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.CreateShardRequest.replicates)
}
inline std::string* CreateShardRequest::_internal_add_replicates() {
  return replicates_.Add();
}
inline void CreateShardRequest::add_replicates(const std::string& value) {
  replicates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bedrock.dataserver.CreateShardRequest.replicates)
}
inline void CreateShardRequest::add_replicates(std::string&& value) {
  replicates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bedrock.dataserver.CreateShardRequest.replicates)
}
inline void CreateShardRequest::add_replicates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  replicates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bedrock.dataserver.CreateShardRequest.replicates)
}
inline void CreateShardRequest::add_replicates(const char* value, size_t size) {
  replicates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bedrock.dataserver.CreateShardRequest.replicates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateShardRequest::replicates() const {
  // @@protoc_insertion_point(field_list:bedrock.dataserver.CreateShardRequest.replicates)
  return replicates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateShardRequest::mutable_replicates() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.dataserver.CreateShardRequest.replicates)
  return &replicates_;
}

// .google.protobuf.Timestamp replica_update_ts = 4;
inline bool CreateShardRequest::_internal_has_replica_update_ts() const {
  return this != internal_default_instance() && replica_update_ts_ != nullptr;
}
inline bool CreateShardRequest::has_replica_update_ts() const {
  return _internal_has_replica_update_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateShardRequest::_internal_replica_update_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = replica_update_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateShardRequest::replica_update_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.CreateShardRequest.replica_update_ts)
  return _internal_replica_update_ts();
}
inline void CreateShardRequest::unsafe_arena_set_allocated_replica_update_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* replica_update_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replica_update_ts_);
  }
  replica_update_ts_ = replica_update_ts;
  if (replica_update_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.CreateShardRequest.replica_update_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::release_replica_update_ts() {
  auto temp = unsafe_arena_release_replica_update_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::unsafe_arena_release_replica_update_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.CreateShardRequest.replica_update_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = replica_update_ts_;
  replica_update_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::_internal_mutable_replica_update_ts() {
  
  if (replica_update_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    replica_update_ts_ = p;
  }
  return replica_update_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::mutable_replica_update_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.CreateShardRequest.replica_update_ts)
  return _internal_mutable_replica_update_ts();
}
inline void CreateShardRequest::set_allocated_replica_update_ts(PROTOBUF_NAMESPACE_ID::Timestamp* replica_update_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replica_update_ts_);
  }
  if (replica_update_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replica_update_ts)->GetArena();
    if (message_arena != submessage_arena) {
      replica_update_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replica_update_ts, submessage_arena);
    }
    
  } else {
    
  }
  replica_update_ts_ = replica_update_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.CreateShardRequest.replica_update_ts)
}

// string leader = 5;
inline void CreateShardRequest::clear_leader() {
  leader_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateShardRequest::leader() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.CreateShardRequest.leader)
  return _internal_leader();
}
inline void CreateShardRequest::set_leader(const std::string& value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.CreateShardRequest.leader)
}
inline std::string* CreateShardRequest::mutable_leader() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.CreateShardRequest.leader)
  return _internal_mutable_leader();
}
inline const std::string& CreateShardRequest::_internal_leader() const {
  return leader_.Get();
}
inline void CreateShardRequest::_internal_set_leader(const std::string& value) {
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateShardRequest::set_leader(std::string&& value) {
  
  leader_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.CreateShardRequest.leader)
}
inline void CreateShardRequest::set_leader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.CreateShardRequest.leader)
}
inline void CreateShardRequest::set_leader(const char* value,
    size_t size) {
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.CreateShardRequest.leader)
}
inline std::string* CreateShardRequest::_internal_mutable_leader() {
  
  return leader_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateShardRequest::release_leader() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.CreateShardRequest.leader)
  return leader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateShardRequest::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    
  } else {
    
  }
  leader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.CreateShardRequest.leader)
}
inline std::string* CreateShardRequest::unsafe_arena_release_leader() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.CreateShardRequest.leader)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateShardRequest::unsafe_arena_set_allocated_leader(
    std::string* leader) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader != nullptr) {
    
  } else {
    
  }
  leader_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.CreateShardRequest.leader)
}

// .google.protobuf.Timestamp leader_change_ts = 6;
inline bool CreateShardRequest::_internal_has_leader_change_ts() const {
  return this != internal_default_instance() && leader_change_ts_ != nullptr;
}
inline bool CreateShardRequest::has_leader_change_ts() const {
  return _internal_has_leader_change_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateShardRequest::_internal_leader_change_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = leader_change_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CreateShardRequest::leader_change_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.CreateShardRequest.leader_change_ts)
  return _internal_leader_change_ts();
}
inline void CreateShardRequest::unsafe_arena_set_allocated_leader_change_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  leader_change_ts_ = leader_change_ts;
  if (leader_change_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.CreateShardRequest.leader_change_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::release_leader_change_ts() {
  auto temp = unsafe_arena_release_leader_change_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::unsafe_arena_release_leader_change_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.CreateShardRequest.leader_change_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = leader_change_ts_;
  leader_change_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::_internal_mutable_leader_change_ts() {
  
  if (leader_change_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    leader_change_ts_ = p;
  }
  return leader_change_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CreateShardRequest::mutable_leader_change_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.CreateShardRequest.leader_change_ts)
  return _internal_mutable_leader_change_ts();
}
inline void CreateShardRequest::set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  if (leader_change_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts)->GetArena();
    if (message_arena != submessage_arena) {
      leader_change_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_change_ts, submessage_arena);
    }
    
  } else {
    
  }
  leader_change_ts_ = leader_change_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.CreateShardRequest.leader_change_ts)
}

// bytes min_key = 7;
inline void CreateShardRequest::clear_min_key() {
  min_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateShardRequest::min_key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.CreateShardRequest.min_key)
  return _internal_min_key();
}
inline void CreateShardRequest::set_min_key(const std::string& value) {
  _internal_set_min_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.CreateShardRequest.min_key)
}
inline std::string* CreateShardRequest::mutable_min_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.CreateShardRequest.min_key)
  return _internal_mutable_min_key();
}
inline const std::string& CreateShardRequest::_internal_min_key() const {
  return min_key_.Get();
}
inline void CreateShardRequest::_internal_set_min_key(const std::string& value) {
  
  min_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateShardRequest::set_min_key(std::string&& value) {
  
  min_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.CreateShardRequest.min_key)
}
inline void CreateShardRequest::set_min_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.CreateShardRequest.min_key)
}
inline void CreateShardRequest::set_min_key(const void* value,
    size_t size) {
  
  min_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.CreateShardRequest.min_key)
}
inline std::string* CreateShardRequest::_internal_mutable_min_key() {
  
  return min_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateShardRequest::release_min_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.CreateShardRequest.min_key)
  return min_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateShardRequest::set_allocated_min_key(std::string* min_key) {
  if (min_key != nullptr) {
    
  } else {
    
  }
  min_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.CreateShardRequest.min_key)
}
inline std::string* CreateShardRequest::unsafe_arena_release_min_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.CreateShardRequest.min_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return min_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateShardRequest::unsafe_arena_set_allocated_min_key(
    std::string* min_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (min_key != nullptr) {
    
  } else {
    
  }
  min_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      min_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.CreateShardRequest.min_key)
}

// bytes max_key = 8;
inline void CreateShardRequest::clear_max_key() {
  max_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateShardRequest::max_key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.CreateShardRequest.max_key)
  return _internal_max_key();
}
inline void CreateShardRequest::set_max_key(const std::string& value) {
  _internal_set_max_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.CreateShardRequest.max_key)
}
inline std::string* CreateShardRequest::mutable_max_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.CreateShardRequest.max_key)
  return _internal_mutable_max_key();
}
inline const std::string& CreateShardRequest::_internal_max_key() const {
  return max_key_.Get();
}
inline void CreateShardRequest::_internal_set_max_key(const std::string& value) {
  
  max_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateShardRequest::set_max_key(std::string&& value) {
  
  max_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.CreateShardRequest.max_key)
}
inline void CreateShardRequest::set_max_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  max_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.CreateShardRequest.max_key)
}
inline void CreateShardRequest::set_max_key(const void* value,
    size_t size) {
  
  max_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.CreateShardRequest.max_key)
}
inline std::string* CreateShardRequest::_internal_mutable_max_key() {
  
  return max_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateShardRequest::release_max_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.CreateShardRequest.max_key)
  return max_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateShardRequest::set_allocated_max_key(std::string* max_key) {
  if (max_key != nullptr) {
    
  } else {
    
  }
  max_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.CreateShardRequest.max_key)
}
inline std::string* CreateShardRequest::unsafe_arena_release_max_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.CreateShardRequest.max_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return max_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateShardRequest::unsafe_arena_set_allocated_max_key(
    std::string* max_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (max_key != nullptr) {
    
  } else {
    
  }
  max_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      max_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.CreateShardRequest.max_key)
}

// -------------------------------------------------------------------

// CreateShardResponse

// -------------------------------------------------------------------

// DeleteShardRequest

// uint64 shard_id = 1;
inline void DeleteShardRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteShardRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteShardRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.DeleteShardRequest.shard_id)
  return _internal_shard_id();
}
inline void DeleteShardRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void DeleteShardRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.DeleteShardRequest.shard_id)
}

// -------------------------------------------------------------------

// DeleteShardResponse

// -------------------------------------------------------------------

// ShardInfoRequest

// uint64 shard_id = 1;
inline void ShardInfoRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInfoRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInfoRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoRequest.shard_id)
  return _internal_shard_id();
}
inline void ShardInfoRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void ShardInfoRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInfoRequest.shard_id)
}

// -------------------------------------------------------------------

// ShardInfoResponse

// uint64 shard_id = 1;
inline void ShardInfoResponse::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInfoResponse::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInfoResponse::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoResponse.shard_id)
  return _internal_shard_id();
}
inline void ShardInfoResponse::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void ShardInfoResponse::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInfoResponse.shard_id)
}

// .google.protobuf.Timestamp create_ts = 2;
inline bool ShardInfoResponse::_internal_has_create_ts() const {
  return this != internal_default_instance() && create_ts_ != nullptr;
}
inline bool ShardInfoResponse::has_create_ts() const {
  return _internal_has_create_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardInfoResponse::_internal_create_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardInfoResponse::create_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoResponse.create_ts)
  return _internal_create_ts();
}
inline void ShardInfoResponse::unsafe_arena_set_allocated_create_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts_);
  }
  create_ts_ = create_ts;
  if (create_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardInfoResponse.create_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::release_create_ts() {
  auto temp = unsafe_arena_release_create_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::unsafe_arena_release_create_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardInfoResponse.create_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_ts_;
  create_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::_internal_mutable_create_ts() {
  
  if (create_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_ts_ = p;
  }
  return create_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::mutable_create_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardInfoResponse.create_ts)
  return _internal_mutable_create_ts();
}
inline void ShardInfoResponse::set_allocated_create_ts(PROTOBUF_NAMESPACE_ID::Timestamp* create_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts_);
  }
  if (create_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_ts)->GetArena();
    if (message_arena != submessage_arena) {
      create_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_ts, submessage_arena);
    }
    
  } else {
    
  }
  create_ts_ = create_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardInfoResponse.create_ts)
}

// repeated string replicates = 3;
inline int ShardInfoResponse::_internal_replicates_size() const {
  return replicates_.size();
}
inline int ShardInfoResponse::replicates_size() const {
  return _internal_replicates_size();
}
inline void ShardInfoResponse::clear_replicates() {
  replicates_.Clear();
}
inline std::string* ShardInfoResponse::add_replicates() {
  // @@protoc_insertion_point(field_add_mutable:bedrock.dataserver.ShardInfoResponse.replicates)
  return _internal_add_replicates();
}
inline const std::string& ShardInfoResponse::_internal_replicates(int index) const {
  return replicates_.Get(index);
}
inline const std::string& ShardInfoResponse::replicates(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoResponse.replicates)
  return _internal_replicates(index);
}
inline std::string* ShardInfoResponse::mutable_replicates(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardInfoResponse.replicates)
  return replicates_.Mutable(index);
}
inline void ShardInfoResponse::set_replicates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInfoResponse.replicates)
  replicates_.Mutable(index)->assign(value);
}
inline void ShardInfoResponse::set_replicates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInfoResponse.replicates)
  replicates_.Mutable(index)->assign(std::move(value));
}
inline void ShardInfoResponse::set_replicates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  replicates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardInfoResponse.replicates)
}
inline void ShardInfoResponse::set_replicates(int index, const char* value, size_t size) {
  replicates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardInfoResponse.replicates)
}
inline std::string* ShardInfoResponse::_internal_add_replicates() {
  return replicates_.Add();
}
inline void ShardInfoResponse::add_replicates(const std::string& value) {
  replicates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bedrock.dataserver.ShardInfoResponse.replicates)
}
inline void ShardInfoResponse::add_replicates(std::string&& value) {
  replicates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bedrock.dataserver.ShardInfoResponse.replicates)
}
inline void ShardInfoResponse::add_replicates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  replicates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bedrock.dataserver.ShardInfoResponse.replicates)
}
inline void ShardInfoResponse::add_replicates(const char* value, size_t size) {
  replicates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bedrock.dataserver.ShardInfoResponse.replicates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShardInfoResponse::replicates() const {
  // @@protoc_insertion_point(field_list:bedrock.dataserver.ShardInfoResponse.replicates)
  return replicates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShardInfoResponse::mutable_replicates() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.dataserver.ShardInfoResponse.replicates)
  return &replicates_;
}

// .google.protobuf.Timestamp replicates_update_ts = 4;
inline bool ShardInfoResponse::_internal_has_replicates_update_ts() const {
  return this != internal_default_instance() && replicates_update_ts_ != nullptr;
}
inline bool ShardInfoResponse::has_replicates_update_ts() const {
  return _internal_has_replicates_update_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardInfoResponse::_internal_replicates_update_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = replicates_update_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardInfoResponse::replicates_update_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoResponse.replicates_update_ts)
  return _internal_replicates_update_ts();
}
inline void ShardInfoResponse::unsafe_arena_set_allocated_replicates_update_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replicates_update_ts_);
  }
  replicates_update_ts_ = replicates_update_ts;
  if (replicates_update_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardInfoResponse.replicates_update_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::release_replicates_update_ts() {
  auto temp = unsafe_arena_release_replicates_update_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::unsafe_arena_release_replicates_update_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardInfoResponse.replicates_update_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = replicates_update_ts_;
  replicates_update_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::_internal_mutable_replicates_update_ts() {
  
  if (replicates_update_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    replicates_update_ts_ = p;
  }
  return replicates_update_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::mutable_replicates_update_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardInfoResponse.replicates_update_ts)
  return _internal_mutable_replicates_update_ts();
}
inline void ShardInfoResponse::set_allocated_replicates_update_ts(PROTOBUF_NAMESPACE_ID::Timestamp* replicates_update_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replicates_update_ts_);
  }
  if (replicates_update_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replicates_update_ts)->GetArena();
    if (message_arena != submessage_arena) {
      replicates_update_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replicates_update_ts, submessage_arena);
    }
    
  } else {
    
  }
  replicates_update_ts_ = replicates_update_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardInfoResponse.replicates_update_ts)
}

// bool is_leader = 5;
inline void ShardInfoResponse::clear_is_leader() {
  is_leader_ = false;
}
inline bool ShardInfoResponse::_internal_is_leader() const {
  return is_leader_;
}
inline bool ShardInfoResponse::is_leader() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoResponse.is_leader)
  return _internal_is_leader();
}
inline void ShardInfoResponse::_internal_set_is_leader(bool value) {
  
  is_leader_ = value;
}
inline void ShardInfoResponse::set_is_leader(bool value) {
  _internal_set_is_leader(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInfoResponse.is_leader)
}

// string leader = 6;
inline void ShardInfoResponse::clear_leader() {
  leader_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardInfoResponse::leader() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoResponse.leader)
  return _internal_leader();
}
inline void ShardInfoResponse::set_leader(const std::string& value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInfoResponse.leader)
}
inline std::string* ShardInfoResponse::mutable_leader() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardInfoResponse.leader)
  return _internal_mutable_leader();
}
inline const std::string& ShardInfoResponse::_internal_leader() const {
  return leader_.Get();
}
inline void ShardInfoResponse::_internal_set_leader(const std::string& value) {
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardInfoResponse::set_leader(std::string&& value) {
  
  leader_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardInfoResponse.leader)
}
inline void ShardInfoResponse::set_leader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardInfoResponse.leader)
}
inline void ShardInfoResponse::set_leader(const char* value,
    size_t size) {
  
  leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardInfoResponse.leader)
}
inline std::string* ShardInfoResponse::_internal_mutable_leader() {
  
  return leader_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardInfoResponse::release_leader() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardInfoResponse.leader)
  return leader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardInfoResponse::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    
  } else {
    
  }
  leader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardInfoResponse.leader)
}
inline std::string* ShardInfoResponse::unsafe_arena_release_leader() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardInfoResponse.leader)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardInfoResponse::unsafe_arena_set_allocated_leader(
    std::string* leader) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader != nullptr) {
    
  } else {
    
  }
  leader_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardInfoResponse.leader)
}

// .google.protobuf.Timestamp leader_change_ts = 7;
inline bool ShardInfoResponse::_internal_has_leader_change_ts() const {
  return this != internal_default_instance() && leader_change_ts_ != nullptr;
}
inline bool ShardInfoResponse::has_leader_change_ts() const {
  return _internal_has_leader_change_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardInfoResponse::_internal_leader_change_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = leader_change_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardInfoResponse::leader_change_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoResponse.leader_change_ts)
  return _internal_leader_change_ts();
}
inline void ShardInfoResponse::unsafe_arena_set_allocated_leader_change_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  leader_change_ts_ = leader_change_ts;
  if (leader_change_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardInfoResponse.leader_change_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::release_leader_change_ts() {
  auto temp = unsafe_arena_release_leader_change_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::unsafe_arena_release_leader_change_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardInfoResponse.leader_change_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = leader_change_ts_;
  leader_change_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::_internal_mutable_leader_change_ts() {
  
  if (leader_change_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    leader_change_ts_ = p;
  }
  return leader_change_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardInfoResponse::mutable_leader_change_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardInfoResponse.leader_change_ts)
  return _internal_mutable_leader_change_ts();
}
inline void ShardInfoResponse::set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  if (leader_change_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts)->GetArena();
    if (message_arena != submessage_arena) {
      leader_change_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_change_ts, submessage_arena);
    }
    
  } else {
    
  }
  leader_change_ts_ = leader_change_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardInfoResponse.leader_change_ts)
}

// uint64 last_wal_index = 8;
inline void ShardInfoResponse::clear_last_wal_index() {
  last_wal_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInfoResponse::_internal_last_wal_index() const {
  return last_wal_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInfoResponse::last_wal_index() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInfoResponse.last_wal_index)
  return _internal_last_wal_index();
}
inline void ShardInfoResponse::_internal_set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_wal_index_ = value;
}
inline void ShardInfoResponse::set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_wal_index(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInfoResponse.last_wal_index)
}

// -------------------------------------------------------------------

// PullShardDataRequest

// -------------------------------------------------------------------

// PullShardDataResponse

// -------------------------------------------------------------------

// MigrateShardRequest_Entry

// bytes key = 3;
inline void MigrateShardRequest_Entry::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MigrateShardRequest_Entry::key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MigrateShardRequest.Entry.key)
  return _internal_key();
}
inline void MigrateShardRequest_Entry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.MigrateShardRequest.Entry.key)
}
inline std::string* MigrateShardRequest_Entry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.MigrateShardRequest.Entry.key)
  return _internal_mutable_key();
}
inline const std::string& MigrateShardRequest_Entry::_internal_key() const {
  return key_.Get();
}
inline void MigrateShardRequest_Entry::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MigrateShardRequest_Entry::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.MigrateShardRequest.Entry.key)
}
inline void MigrateShardRequest_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.MigrateShardRequest.Entry.key)
}
inline void MigrateShardRequest_Entry::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.MigrateShardRequest.Entry.key)
}
inline std::string* MigrateShardRequest_Entry::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MigrateShardRequest_Entry::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.MigrateShardRequest.Entry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateShardRequest_Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.MigrateShardRequest.Entry.key)
}
inline std::string* MigrateShardRequest_Entry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.MigrateShardRequest.Entry.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MigrateShardRequest_Entry::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.MigrateShardRequest.Entry.key)
}

// bytes value = 4;
inline void MigrateShardRequest_Entry::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MigrateShardRequest_Entry::value() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MigrateShardRequest.Entry.value)
  return _internal_value();
}
inline void MigrateShardRequest_Entry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.MigrateShardRequest.Entry.value)
}
inline std::string* MigrateShardRequest_Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.MigrateShardRequest.Entry.value)
  return _internal_mutable_value();
}
inline const std::string& MigrateShardRequest_Entry::_internal_value() const {
  return value_.Get();
}
inline void MigrateShardRequest_Entry::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MigrateShardRequest_Entry::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.MigrateShardRequest.Entry.value)
}
inline void MigrateShardRequest_Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.MigrateShardRequest.Entry.value)
}
inline void MigrateShardRequest_Entry::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.MigrateShardRequest.Entry.value)
}
inline std::string* MigrateShardRequest_Entry::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MigrateShardRequest_Entry::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.MigrateShardRequest.Entry.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateShardRequest_Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.MigrateShardRequest.Entry.value)
}
inline std::string* MigrateShardRequest_Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.MigrateShardRequest.Entry.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MigrateShardRequest_Entry::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.MigrateShardRequest.Entry.value)
}

// -------------------------------------------------------------------

// MigrateShardRequest

// uint64 shard_id_from = 1;
inline void MigrateShardRequest::clear_shard_id_from() {
  shard_id_from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MigrateShardRequest::_internal_shard_id_from() const {
  return shard_id_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MigrateShardRequest::shard_id_from() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MigrateShardRequest.shard_id_from)
  return _internal_shard_id_from();
}
inline void MigrateShardRequest::_internal_set_shard_id_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_from_ = value;
}
inline void MigrateShardRequest::set_shard_id_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id_from(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.MigrateShardRequest.shard_id_from)
}

// uint64 shard_id_to = 2;
inline void MigrateShardRequest::clear_shard_id_to() {
  shard_id_to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MigrateShardRequest::_internal_shard_id_to() const {
  return shard_id_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MigrateShardRequest::shard_id_to() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MigrateShardRequest.shard_id_to)
  return _internal_shard_id_to();
}
inline void MigrateShardRequest::_internal_set_shard_id_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_to_ = value;
}
inline void MigrateShardRequest::set_shard_id_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id_to(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.MigrateShardRequest.shard_id_to)
}

// string target_address = 3;
inline void MigrateShardRequest::clear_target_address() {
  target_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MigrateShardRequest::target_address() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MigrateShardRequest.target_address)
  return _internal_target_address();
}
inline void MigrateShardRequest::set_target_address(const std::string& value) {
  _internal_set_target_address(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.MigrateShardRequest.target_address)
}
inline std::string* MigrateShardRequest::mutable_target_address() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.MigrateShardRequest.target_address)
  return _internal_mutable_target_address();
}
inline const std::string& MigrateShardRequest::_internal_target_address() const {
  return target_address_.Get();
}
inline void MigrateShardRequest::_internal_set_target_address(const std::string& value) {
  
  target_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MigrateShardRequest::set_target_address(std::string&& value) {
  
  target_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.MigrateShardRequest.target_address)
}
inline void MigrateShardRequest::set_target_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.MigrateShardRequest.target_address)
}
inline void MigrateShardRequest::set_target_address(const char* value,
    size_t size) {
  
  target_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.MigrateShardRequest.target_address)
}
inline std::string* MigrateShardRequest::_internal_mutable_target_address() {
  
  return target_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MigrateShardRequest::release_target_address() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.MigrateShardRequest.target_address)
  return target_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MigrateShardRequest::set_allocated_target_address(std::string* target_address) {
  if (target_address != nullptr) {
    
  } else {
    
  }
  target_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.MigrateShardRequest.target_address)
}
inline std::string* MigrateShardRequest::unsafe_arena_release_target_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.MigrateShardRequest.target_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MigrateShardRequest::unsafe_arena_set_allocated_target_address(
    std::string* target_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_address != nullptr) {
    
  } else {
    
  }
  target_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.MigrateShardRequest.target_address)
}

// .bedrock.dataserver.MigrateShardRequest.Direction direction = 4;
inline void MigrateShardRequest::clear_direction() {
  direction_ = 0;
}
inline ::bedrock::dataserver::MigrateShardRequest_Direction MigrateShardRequest::_internal_direction() const {
  return static_cast< ::bedrock::dataserver::MigrateShardRequest_Direction >(direction_);
}
inline ::bedrock::dataserver::MigrateShardRequest_Direction MigrateShardRequest::direction() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MigrateShardRequest.direction)
  return _internal_direction();
}
inline void MigrateShardRequest::_internal_set_direction(::bedrock::dataserver::MigrateShardRequest_Direction value) {
  
  direction_ = value;
}
inline void MigrateShardRequest::set_direction(::bedrock::dataserver::MigrateShardRequest_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.MigrateShardRequest.direction)
}

// repeated .bedrock.dataserver.MigrateShardRequest.Entry entries = 5;
inline int MigrateShardRequest::_internal_entries_size() const {
  return entries_.size();
}
inline int MigrateShardRequest::entries_size() const {
  return _internal_entries_size();
}
inline void MigrateShardRequest::clear_entries() {
  entries_.Clear();
}
inline ::bedrock::dataserver::MigrateShardRequest_Entry* MigrateShardRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.MigrateShardRequest.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::MigrateShardRequest_Entry >*
MigrateShardRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.dataserver.MigrateShardRequest.entries)
  return &entries_;
}
inline const ::bedrock::dataserver::MigrateShardRequest_Entry& MigrateShardRequest::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::bedrock::dataserver::MigrateShardRequest_Entry& MigrateShardRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.MigrateShardRequest.entries)
  return _internal_entries(index);
}
inline ::bedrock::dataserver::MigrateShardRequest_Entry* MigrateShardRequest::_internal_add_entries() {
  return entries_.Add();
}
inline ::bedrock::dataserver::MigrateShardRequest_Entry* MigrateShardRequest::add_entries() {
  // @@protoc_insertion_point(field_add:bedrock.dataserver.MigrateShardRequest.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::MigrateShardRequest_Entry >&
MigrateShardRequest::entries() const {
  // @@protoc_insertion_point(field_list:bedrock.dataserver.MigrateShardRequest.entries)
  return entries_;
}

// -------------------------------------------------------------------

// MigrateShardResponse

// -------------------------------------------------------------------

// AddShardReplicaRequest

// -------------------------------------------------------------------

// AddShardReplicaResponse

// -------------------------------------------------------------------

// DeleteShardReplicaRequest

// -------------------------------------------------------------------

// DeleteShardReplicaResponse

// -------------------------------------------------------------------

// TransferShardLeaderRequest

// uint64 shard_id = 1;
inline void TransferShardLeaderRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferShardLeaderRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferShardLeaderRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.TransferShardLeaderRequest.shard_id)
  return _internal_shard_id();
}
inline void TransferShardLeaderRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void TransferShardLeaderRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.TransferShardLeaderRequest.shard_id)
}

// repeated string replicates = 2;
inline int TransferShardLeaderRequest::_internal_replicates_size() const {
  return replicates_.size();
}
inline int TransferShardLeaderRequest::replicates_size() const {
  return _internal_replicates_size();
}
inline void TransferShardLeaderRequest::clear_replicates() {
  replicates_.Clear();
}
inline std::string* TransferShardLeaderRequest::add_replicates() {
  // @@protoc_insertion_point(field_add_mutable:bedrock.dataserver.TransferShardLeaderRequest.replicates)
  return _internal_add_replicates();
}
inline const std::string& TransferShardLeaderRequest::_internal_replicates(int index) const {
  return replicates_.Get(index);
}
inline const std::string& TransferShardLeaderRequest::replicates(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.TransferShardLeaderRequest.replicates)
  return _internal_replicates(index);
}
inline std::string* TransferShardLeaderRequest::mutable_replicates(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.TransferShardLeaderRequest.replicates)
  return replicates_.Mutable(index);
}
inline void TransferShardLeaderRequest::set_replicates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bedrock.dataserver.TransferShardLeaderRequest.replicates)
  replicates_.Mutable(index)->assign(value);
}
inline void TransferShardLeaderRequest::set_replicates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bedrock.dataserver.TransferShardLeaderRequest.replicates)
  replicates_.Mutable(index)->assign(std::move(value));
}
inline void TransferShardLeaderRequest::set_replicates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  replicates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.TransferShardLeaderRequest.replicates)
}
inline void TransferShardLeaderRequest::set_replicates(int index, const char* value, size_t size) {
  replicates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.TransferShardLeaderRequest.replicates)
}
inline std::string* TransferShardLeaderRequest::_internal_add_replicates() {
  return replicates_.Add();
}
inline void TransferShardLeaderRequest::add_replicates(const std::string& value) {
  replicates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bedrock.dataserver.TransferShardLeaderRequest.replicates)
}
inline void TransferShardLeaderRequest::add_replicates(std::string&& value) {
  replicates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bedrock.dataserver.TransferShardLeaderRequest.replicates)
}
inline void TransferShardLeaderRequest::add_replicates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  replicates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bedrock.dataserver.TransferShardLeaderRequest.replicates)
}
inline void TransferShardLeaderRequest::add_replicates(const char* value, size_t size) {
  replicates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bedrock.dataserver.TransferShardLeaderRequest.replicates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransferShardLeaderRequest::replicates() const {
  // @@protoc_insertion_point(field_list:bedrock.dataserver.TransferShardLeaderRequest.replicates)
  return replicates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransferShardLeaderRequest::mutable_replicates() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.dataserver.TransferShardLeaderRequest.replicates)
  return &replicates_;
}

// .google.protobuf.Timestamp leader_change_ts = 3;
inline bool TransferShardLeaderRequest::_internal_has_leader_change_ts() const {
  return this != internal_default_instance() && leader_change_ts_ != nullptr;
}
inline bool TransferShardLeaderRequest::has_leader_change_ts() const {
  return _internal_has_leader_change_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TransferShardLeaderRequest::_internal_leader_change_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = leader_change_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TransferShardLeaderRequest::leader_change_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.TransferShardLeaderRequest.leader_change_ts)
  return _internal_leader_change_ts();
}
inline void TransferShardLeaderRequest::unsafe_arena_set_allocated_leader_change_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  leader_change_ts_ = leader_change_ts;
  if (leader_change_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.TransferShardLeaderRequest.leader_change_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransferShardLeaderRequest::release_leader_change_ts() {
  auto temp = unsafe_arena_release_leader_change_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransferShardLeaderRequest::unsafe_arena_release_leader_change_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.TransferShardLeaderRequest.leader_change_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = leader_change_ts_;
  leader_change_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransferShardLeaderRequest::_internal_mutable_leader_change_ts() {
  
  if (leader_change_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    leader_change_ts_ = p;
  }
  return leader_change_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransferShardLeaderRequest::mutable_leader_change_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.TransferShardLeaderRequest.leader_change_ts)
  return _internal_mutable_leader_change_ts();
}
inline void TransferShardLeaderRequest::set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  if (leader_change_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts)->GetArena();
    if (message_arena != submessage_arena) {
      leader_change_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_change_ts, submessage_arena);
    }
    
  } else {
    
  }
  leader_change_ts_ = leader_change_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.TransferShardLeaderRequest.leader_change_ts)
}

// -------------------------------------------------------------------

// TransferShardLeaderResponse

// -------------------------------------------------------------------

// LockShardRequest

// -------------------------------------------------------------------

// LockShardResponse

// -------------------------------------------------------------------

// UnlockShardRequest

// -------------------------------------------------------------------

// UnlockShardResponse

// -------------------------------------------------------------------

// ShardReadRequest

// uint64 shard_id = 1;
inline void ShardReadRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardReadRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardReadRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardReadRequest.shard_id)
  return _internal_shard_id();
}
inline void ShardReadRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void ShardReadRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardReadRequest.shard_id)
}

// bytes key = 2;
inline void ShardReadRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardReadRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardReadRequest.key)
  return _internal_key();
}
inline void ShardReadRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardReadRequest.key)
}
inline std::string* ShardReadRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardReadRequest.key)
  return _internal_mutable_key();
}
inline const std::string& ShardReadRequest::_internal_key() const {
  return key_.Get();
}
inline void ShardReadRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardReadRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardReadRequest.key)
}
inline void ShardReadRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardReadRequest.key)
}
inline void ShardReadRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardReadRequest.key)
}
inline std::string* ShardReadRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardReadRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardReadRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardReadRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardReadRequest.key)
}
inline std::string* ShardReadRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardReadRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardReadRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardReadRequest.key)
}

// -------------------------------------------------------------------

// ShardReadResponse

// bytes value = 1;
inline void ShardReadResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardReadResponse::value() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardReadResponse.value)
  return _internal_value();
}
inline void ShardReadResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardReadResponse.value)
}
inline std::string* ShardReadResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardReadResponse.value)
  return _internal_mutable_value();
}
inline const std::string& ShardReadResponse::_internal_value() const {
  return value_.Get();
}
inline void ShardReadResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardReadResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardReadResponse.value)
}
inline void ShardReadResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardReadResponse.value)
}
inline void ShardReadResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardReadResponse.value)
}
inline std::string* ShardReadResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardReadResponse::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardReadResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardReadResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardReadResponse.value)
}
inline std::string* ShardReadResponse::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardReadResponse.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardReadResponse::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardReadResponse.value)
}

// -------------------------------------------------------------------

// ShardWriteRequest

// uint64 shard_id = 1;
inline void ShardWriteRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardWriteRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardWriteRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardWriteRequest.shard_id)
  return _internal_shard_id();
}
inline void ShardWriteRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void ShardWriteRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardWriteRequest.shard_id)
}

// bytes key = 2;
inline void ShardWriteRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardWriteRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardWriteRequest.key)
  return _internal_key();
}
inline void ShardWriteRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardWriteRequest.key)
}
inline std::string* ShardWriteRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardWriteRequest.key)
  return _internal_mutable_key();
}
inline const std::string& ShardWriteRequest::_internal_key() const {
  return key_.Get();
}
inline void ShardWriteRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardWriteRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardWriteRequest.key)
}
inline void ShardWriteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardWriteRequest.key)
}
inline void ShardWriteRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardWriteRequest.key)
}
inline std::string* ShardWriteRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardWriteRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardWriteRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardWriteRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardWriteRequest.key)
}
inline std::string* ShardWriteRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardWriteRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardWriteRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardWriteRequest.key)
}

// bytes value = 3;
inline void ShardWriteRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardWriteRequest::value() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardWriteRequest.value)
  return _internal_value();
}
inline void ShardWriteRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardWriteRequest.value)
}
inline std::string* ShardWriteRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardWriteRequest.value)
  return _internal_mutable_value();
}
inline const std::string& ShardWriteRequest::_internal_value() const {
  return value_.Get();
}
inline void ShardWriteRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardWriteRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardWriteRequest.value)
}
inline void ShardWriteRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardWriteRequest.value)
}
inline void ShardWriteRequest::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardWriteRequest.value)
}
inline std::string* ShardWriteRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardWriteRequest::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardWriteRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardWriteRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardWriteRequest.value)
}
inline std::string* ShardWriteRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardWriteRequest.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardWriteRequest::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardWriteRequest.value)
}

// -------------------------------------------------------------------

// ShardWriteResponse

// bool not_leader = 1;
inline void ShardWriteResponse::clear_not_leader() {
  not_leader_ = false;
}
inline bool ShardWriteResponse::_internal_not_leader() const {
  return not_leader_;
}
inline bool ShardWriteResponse::not_leader() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardWriteResponse.not_leader)
  return _internal_not_leader();
}
inline void ShardWriteResponse::_internal_set_not_leader(bool value) {
  
  not_leader_ = value;
}
inline void ShardWriteResponse::set_not_leader(bool value) {
  _internal_set_not_leader(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardWriteResponse.not_leader)
}

// -------------------------------------------------------------------

// ShardScanRequest

// uint64 shard_id = 1;
inline void ShardScanRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardScanRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardScanRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardScanRequest.shard_id)
  return _internal_shard_id();
}
inline void ShardScanRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void ShardScanRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardScanRequest.shard_id)
}

// bytes start_key = 2;
inline void ShardScanRequest::clear_start_key() {
  start_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardScanRequest.start_key)
  return _internal_start_key();
}
inline void ShardScanRequest::set_start_key(const std::string& value) {
  _internal_set_start_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardScanRequest.start_key)
}
inline std::string* ShardScanRequest::mutable_start_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardScanRequest.start_key)
  return _internal_mutable_start_key();
}
inline const std::string& ShardScanRequest::_internal_start_key() const {
  return start_key_.Get();
}
inline void ShardScanRequest::_internal_set_start_key(const std::string& value) {
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardScanRequest::set_start_key(std::string&& value) {
  
  start_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardScanRequest.start_key)
}
inline void ShardScanRequest::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardScanRequest.start_key)
}
inline void ShardScanRequest::set_start_key(const void* value,
    size_t size) {
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardScanRequest.start_key)
}
inline std::string* ShardScanRequest::_internal_mutable_start_key() {
  
  return start_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardScanRequest.start_key)
  return start_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardScanRequest::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardScanRequest.start_key)
}
inline std::string* ShardScanRequest::unsafe_arena_release_start_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardScanRequest.start_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardScanRequest::unsafe_arena_set_allocated_start_key(
    std::string* start_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardScanRequest.start_key)
}

// bytes end_key = 3;
inline void ShardScanRequest::clear_end_key() {
  end_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardScanRequest::end_key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardScanRequest.end_key)
  return _internal_end_key();
}
inline void ShardScanRequest::set_end_key(const std::string& value) {
  _internal_set_end_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardScanRequest.end_key)
}
inline std::string* ShardScanRequest::mutable_end_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardScanRequest.end_key)
  return _internal_mutable_end_key();
}
inline const std::string& ShardScanRequest::_internal_end_key() const {
  return end_key_.Get();
}
inline void ShardScanRequest::_internal_set_end_key(const std::string& value) {
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardScanRequest::set_end_key(std::string&& value) {
  
  end_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardScanRequest.end_key)
}
inline void ShardScanRequest::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardScanRequest.end_key)
}
inline void ShardScanRequest::set_end_key(const void* value,
    size_t size) {
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardScanRequest.end_key)
}
inline std::string* ShardScanRequest::_internal_mutable_end_key() {
  
  return end_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardScanRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardScanRequest.end_key)
  return end_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardScanRequest::set_allocated_end_key(std::string* end_key) {
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardScanRequest.end_key)
}
inline std::string* ShardScanRequest::unsafe_arena_release_end_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardScanRequest.end_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardScanRequest::unsafe_arena_set_allocated_end_key(
    std::string* end_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardScanRequest.end_key)
}

// -------------------------------------------------------------------

// KeyValue

// bytes key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.KeyValue.key)
}
inline void KeyValue::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.KeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.KeyValue.key)
}
inline std::string* KeyValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.KeyValue.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValue::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.KeyValue.key)
}

// bytes value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.KeyValue.value)
}
inline void KeyValue::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.KeyValue.value)
}
inline std::string* KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.KeyValue.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeyValue::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.KeyValue.value)
}

// -------------------------------------------------------------------

// ShardScanResponse

// repeated .bedrock.dataserver.KeyValue kvs = 1;
inline int ShardScanResponse::_internal_kvs_size() const {
  return kvs_.size();
}
inline int ShardScanResponse::kvs_size() const {
  return _internal_kvs_size();
}
inline void ShardScanResponse::clear_kvs() {
  kvs_.Clear();
}
inline ::bedrock::dataserver::KeyValue* ShardScanResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardScanResponse.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::KeyValue >*
ShardScanResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.dataserver.ShardScanResponse.kvs)
  return &kvs_;
}
inline const ::bedrock::dataserver::KeyValue& ShardScanResponse::_internal_kvs(int index) const {
  return kvs_.Get(index);
}
inline const ::bedrock::dataserver::KeyValue& ShardScanResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardScanResponse.kvs)
  return _internal_kvs(index);
}
inline ::bedrock::dataserver::KeyValue* ShardScanResponse::_internal_add_kvs() {
  return kvs_.Add();
}
inline ::bedrock::dataserver::KeyValue* ShardScanResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:bedrock.dataserver.ShardScanResponse.kvs)
  return _internal_add_kvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::KeyValue >&
ShardScanResponse::kvs() const {
  // @@protoc_insertion_point(field_list:bedrock.dataserver.ShardScanResponse.kvs)
  return kvs_;
}

// bool no_left = 2;
inline void ShardScanResponse::clear_no_left() {
  no_left_ = false;
}
inline bool ShardScanResponse::_internal_no_left() const {
  return no_left_;
}
inline bool ShardScanResponse::no_left() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardScanResponse.no_left)
  return _internal_no_left();
}
inline void ShardScanResponse::_internal_set_no_left(bool value) {
  
  no_left_ = value;
}
inline void ShardScanResponse::set_no_left(bool value) {
  _internal_set_no_left(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardScanResponse.no_left)
}

// -------------------------------------------------------------------

// ShardAppendLogRequest_Entry

// string op = 1;
inline void ShardAppendLogRequest_Entry::clear_op() {
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardAppendLogRequest_Entry::op() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
  return _internal_op();
}
inline void ShardAppendLogRequest_Entry::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
}
inline std::string* ShardAppendLogRequest_Entry::mutable_op() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
  return _internal_mutable_op();
}
inline const std::string& ShardAppendLogRequest_Entry::_internal_op() const {
  return op_.Get();
}
inline void ShardAppendLogRequest_Entry::_internal_set_op(const std::string& value) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardAppendLogRequest_Entry::set_op(std::string&& value) {
  
  op_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
}
inline void ShardAppendLogRequest_Entry::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
}
inline void ShardAppendLogRequest_Entry::set_op(const char* value,
    size_t size) {
  
  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
}
inline std::string* ShardAppendLogRequest_Entry::_internal_mutable_op() {
  
  return op_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardAppendLogRequest_Entry::release_op() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
  return op_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardAppendLogRequest_Entry::set_allocated_op(std::string* op) {
  if (op != nullptr) {
    
  } else {
    
  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
}
inline std::string* ShardAppendLogRequest_Entry::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return op_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardAppendLogRequest_Entry::unsafe_arena_set_allocated_op(
    std::string* op) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (op != nullptr) {
    
  } else {
    
  }
  op_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      op, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardAppendLogRequest.Entry.op)
}

// uint64 index = 2;
inline void ShardAppendLogRequest_Entry::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardAppendLogRequest_Entry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardAppendLogRequest_Entry::index() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogRequest.Entry.index)
  return _internal_index();
}
inline void ShardAppendLogRequest_Entry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void ShardAppendLogRequest_Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardAppendLogRequest.Entry.index)
}

// bytes key = 3;
inline void ShardAppendLogRequest_Entry::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardAppendLogRequest_Entry::key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
  return _internal_key();
}
inline void ShardAppendLogRequest_Entry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
}
inline std::string* ShardAppendLogRequest_Entry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
  return _internal_mutable_key();
}
inline const std::string& ShardAppendLogRequest_Entry::_internal_key() const {
  return key_.Get();
}
inline void ShardAppendLogRequest_Entry::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardAppendLogRequest_Entry::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
}
inline void ShardAppendLogRequest_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
}
inline void ShardAppendLogRequest_Entry::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
}
inline std::string* ShardAppendLogRequest_Entry::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardAppendLogRequest_Entry::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardAppendLogRequest_Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
}
inline std::string* ShardAppendLogRequest_Entry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardAppendLogRequest_Entry::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardAppendLogRequest.Entry.key)
}

// bytes value = 4;
inline void ShardAppendLogRequest_Entry::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardAppendLogRequest_Entry::value() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
  return _internal_value();
}
inline void ShardAppendLogRequest_Entry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
}
inline std::string* ShardAppendLogRequest_Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
  return _internal_mutable_value();
}
inline const std::string& ShardAppendLogRequest_Entry::_internal_value() const {
  return value_.Get();
}
inline void ShardAppendLogRequest_Entry::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardAppendLogRequest_Entry::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
}
inline void ShardAppendLogRequest_Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
}
inline void ShardAppendLogRequest_Entry::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
}
inline std::string* ShardAppendLogRequest_Entry::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardAppendLogRequest_Entry::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardAppendLogRequest_Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
}
inline std::string* ShardAppendLogRequest_Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardAppendLogRequest_Entry::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardAppendLogRequest.Entry.value)
}

// -------------------------------------------------------------------

// ShardAppendLogRequest

// uint64 shard_id = 1;
inline void ShardAppendLogRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardAppendLogRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardAppendLogRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogRequest.shard_id)
  return _internal_shard_id();
}
inline void ShardAppendLogRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void ShardAppendLogRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardAppendLogRequest.shard_id)
}

// .google.protobuf.Timestamp leader_change_ts = 2;
inline bool ShardAppendLogRequest::_internal_has_leader_change_ts() const {
  return this != internal_default_instance() && leader_change_ts_ != nullptr;
}
inline bool ShardAppendLogRequest::has_leader_change_ts() const {
  return _internal_has_leader_change_ts();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardAppendLogRequest::_internal_leader_change_ts() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = leader_change_ts_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ShardAppendLogRequest::leader_change_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogRequest.leader_change_ts)
  return _internal_leader_change_ts();
}
inline void ShardAppendLogRequest::unsafe_arena_set_allocated_leader_change_ts(
    PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  leader_change_ts_ = leader_change_ts;
  if (leader_change_ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardAppendLogRequest.leader_change_ts)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardAppendLogRequest::release_leader_change_ts() {
  auto temp = unsafe_arena_release_leader_change_ts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardAppendLogRequest::unsafe_arena_release_leader_change_ts() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardAppendLogRequest.leader_change_ts)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = leader_change_ts_;
  leader_change_ts_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardAppendLogRequest::_internal_mutable_leader_change_ts() {
  
  if (leader_change_ts_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    leader_change_ts_ = p;
  }
  return leader_change_ts_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ShardAppendLogRequest::mutable_leader_change_ts() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardAppendLogRequest.leader_change_ts)
  return _internal_mutable_leader_change_ts();
}
inline void ShardAppendLogRequest::set_allocated_leader_change_ts(PROTOBUF_NAMESPACE_ID::Timestamp* leader_change_ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts_);
  }
  if (leader_change_ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leader_change_ts)->GetArena();
    if (message_arena != submessage_arena) {
      leader_change_ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leader_change_ts, submessage_arena);
    }
    
  } else {
    
  }
  leader_change_ts_ = leader_change_ts;
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardAppendLogRequest.leader_change_ts)
}

// repeated .bedrock.dataserver.ShardAppendLogRequest.Entry entries = 3;
inline int ShardAppendLogRequest::_internal_entries_size() const {
  return entries_.size();
}
inline int ShardAppendLogRequest::entries_size() const {
  return _internal_entries_size();
}
inline void ShardAppendLogRequest::clear_entries() {
  entries_.Clear();
}
inline ::bedrock::dataserver::ShardAppendLogRequest_Entry* ShardAppendLogRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardAppendLogRequest.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::ShardAppendLogRequest_Entry >*
ShardAppendLogRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.dataserver.ShardAppendLogRequest.entries)
  return &entries_;
}
inline const ::bedrock::dataserver::ShardAppendLogRequest_Entry& ShardAppendLogRequest::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::bedrock::dataserver::ShardAppendLogRequest_Entry& ShardAppendLogRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogRequest.entries)
  return _internal_entries(index);
}
inline ::bedrock::dataserver::ShardAppendLogRequest_Entry* ShardAppendLogRequest::_internal_add_entries() {
  return entries_.Add();
}
inline ::bedrock::dataserver::ShardAppendLogRequest_Entry* ShardAppendLogRequest::add_entries() {
  // @@protoc_insertion_point(field_add:bedrock.dataserver.ShardAppendLogRequest.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::dataserver::ShardAppendLogRequest_Entry >&
ShardAppendLogRequest::entries() const {
  // @@protoc_insertion_point(field_list:bedrock.dataserver.ShardAppendLogRequest.entries)
  return entries_;
}

// -------------------------------------------------------------------

// ShardAppendLogResponse

// bool is_old_leader = 1;
inline void ShardAppendLogResponse::clear_is_old_leader() {
  is_old_leader_ = false;
}
inline bool ShardAppendLogResponse::_internal_is_old_leader() const {
  return is_old_leader_;
}
inline bool ShardAppendLogResponse::is_old_leader() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogResponse.is_old_leader)
  return _internal_is_old_leader();
}
inline void ShardAppendLogResponse::_internal_set_is_old_leader(bool value) {
  
  is_old_leader_ = value;
}
inline void ShardAppendLogResponse::set_is_old_leader(bool value) {
  _internal_set_is_old_leader(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardAppendLogResponse.is_old_leader)
}

// uint64 last_applied_index = 2;
inline void ShardAppendLogResponse::clear_last_applied_index() {
  last_applied_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardAppendLogResponse::_internal_last_applied_index() const {
  return last_applied_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardAppendLogResponse::last_applied_index() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardAppendLogResponse.last_applied_index)
  return _internal_last_applied_index();
}
inline void ShardAppendLogResponse::_internal_set_last_applied_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_applied_index_ = value;
}
inline void ShardAppendLogResponse::set_last_applied_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_applied_index(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardAppendLogResponse.last_applied_index)
}

// -------------------------------------------------------------------

// ShardInstallSnapshotRequest

// uint64 shard_id = 1;
inline void ShardInstallSnapshotRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInstallSnapshotRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInstallSnapshotRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInstallSnapshotRequest.shard_id)
  return _internal_shard_id();
}
inline void ShardInstallSnapshotRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void ShardInstallSnapshotRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInstallSnapshotRequest.shard_id)
}

// bytes data_piece = 2;
inline void ShardInstallSnapshotRequest::clear_data_piece() {
  data_piece_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShardInstallSnapshotRequest::data_piece() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
  return _internal_data_piece();
}
inline void ShardInstallSnapshotRequest::set_data_piece(const std::string& value) {
  _internal_set_data_piece(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
}
inline std::string* ShardInstallSnapshotRequest::mutable_data_piece() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
  return _internal_mutable_data_piece();
}
inline const std::string& ShardInstallSnapshotRequest::_internal_data_piece() const {
  return data_piece_.Get();
}
inline void ShardInstallSnapshotRequest::_internal_set_data_piece(const std::string& value) {
  
  data_piece_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShardInstallSnapshotRequest::set_data_piece(std::string&& value) {
  
  data_piece_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
}
inline void ShardInstallSnapshotRequest::set_data_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_piece_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
}
inline void ShardInstallSnapshotRequest::set_data_piece(const void* value,
    size_t size) {
  
  data_piece_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
}
inline std::string* ShardInstallSnapshotRequest::_internal_mutable_data_piece() {
  
  return data_piece_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShardInstallSnapshotRequest::release_data_piece() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
  return data_piece_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardInstallSnapshotRequest::set_allocated_data_piece(std::string* data_piece) {
  if (data_piece != nullptr) {
    
  } else {
    
  }
  data_piece_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_piece,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
}
inline std::string* ShardInstallSnapshotRequest::unsafe_arena_release_data_piece() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_piece_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShardInstallSnapshotRequest::unsafe_arena_set_allocated_data_piece(
    std::string* data_piece) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data_piece != nullptr) {
    
  } else {
    
  }
  data_piece_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data_piece, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.ShardInstallSnapshotRequest.data_piece)
}

// uint64 last_wal_index = 3;
inline void ShardInstallSnapshotRequest::clear_last_wal_index() {
  last_wal_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInstallSnapshotRequest::_internal_last_wal_index() const {
  return last_wal_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ShardInstallSnapshotRequest::last_wal_index() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.ShardInstallSnapshotRequest.last_wal_index)
  return _internal_last_wal_index();
}
inline void ShardInstallSnapshotRequest::_internal_set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_wal_index_ = value;
}
inline void ShardInstallSnapshotRequest::set_last_wal_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_wal_index(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.ShardInstallSnapshotRequest.last_wal_index)
}

// -------------------------------------------------------------------

// ShardInstallSnapshotResponse

// -------------------------------------------------------------------

// ShardWriteReplicaRequest

// -------------------------------------------------------------------

// ShardWriteReplicaResponse

// -------------------------------------------------------------------

// ShardRepairRequest

// -------------------------------------------------------------------

// ShardRepairResponse

// -------------------------------------------------------------------

// DataServerJoinRequest

// -------------------------------------------------------------------

// DataServerJoinResponse

// -------------------------------------------------------------------

// DataServerLeaveRequest

// -------------------------------------------------------------------

// DataServerLeaveResponse

// -------------------------------------------------------------------

// StartTxRequest

// -------------------------------------------------------------------

// StartTxResponse

// -------------------------------------------------------------------

// PrepareTxRequest

// -------------------------------------------------------------------

// PrepareTxResponse

// -------------------------------------------------------------------

// CommitTxRequest

// -------------------------------------------------------------------

// CommitTxResponse

// -------------------------------------------------------------------

// CancelTxRequest

// -------------------------------------------------------------------

// CancelTxResponse

// -------------------------------------------------------------------

// LockRecordRequest

// uint64 tx_id = 1;
inline void LockRecordRequest::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockRecordRequest::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockRecordRequest::tx_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.LockRecordRequest.tx_id)
  return _internal_tx_id();
}
inline void LockRecordRequest::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void LockRecordRequest::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.LockRecordRequest.tx_id)
}

// uint64 shard_id = 2;
inline void LockRecordRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockRecordRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockRecordRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.LockRecordRequest.shard_id)
  return _internal_shard_id();
}
inline void LockRecordRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void LockRecordRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.LockRecordRequest.shard_id)
}

// bytes key = 3;
inline void LockRecordRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LockRecordRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.LockRecordRequest.key)
  return _internal_key();
}
inline void LockRecordRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.LockRecordRequest.key)
}
inline std::string* LockRecordRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.LockRecordRequest.key)
  return _internal_mutable_key();
}
inline const std::string& LockRecordRequest::_internal_key() const {
  return key_.Get();
}
inline void LockRecordRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LockRecordRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.LockRecordRequest.key)
}
inline void LockRecordRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.LockRecordRequest.key)
}
inline void LockRecordRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.LockRecordRequest.key)
}
inline std::string* LockRecordRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LockRecordRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.LockRecordRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LockRecordRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.LockRecordRequest.key)
}
inline std::string* LockRecordRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.LockRecordRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LockRecordRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.LockRecordRequest.key)
}

// -------------------------------------------------------------------

// LockRecordResponse

// -------------------------------------------------------------------

// LockRangeRequest

// uint64 tx_id = 1;
inline void LockRangeRequest::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockRangeRequest::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockRangeRequest::tx_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.LockRangeRequest.tx_id)
  return _internal_tx_id();
}
inline void LockRangeRequest::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void LockRangeRequest::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.LockRangeRequest.tx_id)
}

// uint64 shard_id = 2;
inline void LockRangeRequest::clear_shard_id() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockRangeRequest::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockRangeRequest::shard_id() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.LockRangeRequest.shard_id)
  return _internal_shard_id();
}
inline void LockRangeRequest::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  shard_id_ = value;
}
inline void LockRangeRequest::set_shard_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.LockRangeRequest.shard_id)
}

// bytes start_key = 3;
inline void LockRangeRequest::clear_start_key() {
  start_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LockRangeRequest::start_key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.LockRangeRequest.start_key)
  return _internal_start_key();
}
inline void LockRangeRequest::set_start_key(const std::string& value) {
  _internal_set_start_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.LockRangeRequest.start_key)
}
inline std::string* LockRangeRequest::mutable_start_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.LockRangeRequest.start_key)
  return _internal_mutable_start_key();
}
inline const std::string& LockRangeRequest::_internal_start_key() const {
  return start_key_.Get();
}
inline void LockRangeRequest::_internal_set_start_key(const std::string& value) {
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LockRangeRequest::set_start_key(std::string&& value) {
  
  start_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.LockRangeRequest.start_key)
}
inline void LockRangeRequest::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.LockRangeRequest.start_key)
}
inline void LockRangeRequest::set_start_key(const void* value,
    size_t size) {
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.LockRangeRequest.start_key)
}
inline std::string* LockRangeRequest::_internal_mutable_start_key() {
  
  return start_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LockRangeRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.LockRangeRequest.start_key)
  return start_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LockRangeRequest::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.LockRangeRequest.start_key)
}
inline std::string* LockRangeRequest::unsafe_arena_release_start_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.LockRangeRequest.start_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LockRangeRequest::unsafe_arena_set_allocated_start_key(
    std::string* start_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.LockRangeRequest.start_key)
}

// bytes end_key = 4;
inline void LockRangeRequest::clear_end_key() {
  end_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LockRangeRequest::end_key() const {
  // @@protoc_insertion_point(field_get:bedrock.dataserver.LockRangeRequest.end_key)
  return _internal_end_key();
}
inline void LockRangeRequest::set_end_key(const std::string& value) {
  _internal_set_end_key(value);
  // @@protoc_insertion_point(field_set:bedrock.dataserver.LockRangeRequest.end_key)
}
inline std::string* LockRangeRequest::mutable_end_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.dataserver.LockRangeRequest.end_key)
  return _internal_mutable_end_key();
}
inline const std::string& LockRangeRequest::_internal_end_key() const {
  return end_key_.Get();
}
inline void LockRangeRequest::_internal_set_end_key(const std::string& value) {
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LockRangeRequest::set_end_key(std::string&& value) {
  
  end_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.dataserver.LockRangeRequest.end_key)
}
inline void LockRangeRequest::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.dataserver.LockRangeRequest.end_key)
}
inline void LockRangeRequest::set_end_key(const void* value,
    size_t size) {
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.dataserver.LockRangeRequest.end_key)
}
inline std::string* LockRangeRequest::_internal_mutable_end_key() {
  
  return end_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LockRangeRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:bedrock.dataserver.LockRangeRequest.end_key)
  return end_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LockRangeRequest::set_allocated_end_key(std::string* end_key) {
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.dataserver.LockRangeRequest.end_key)
}
inline std::string* LockRangeRequest::unsafe_arena_release_end_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.dataserver.LockRangeRequest.end_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LockRangeRequest::unsafe_arena_set_allocated_end_key(
    std::string* end_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.dataserver.LockRangeRequest.end_key)
}

// -------------------------------------------------------------------

// LockRangeResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataserver
}  // namespace bedrock

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bedrock::dataserver::MigrateShardRequest_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bedrock::dataserver::MigrateShardRequest_Direction>() {
  return ::bedrock::dataserver::MigrateShardRequest_Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dataserver_2eproto
