syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "sr.ht/moyanhao/bedrock-metaserver/clients/metaserver";

package bedrock.metaserver;
option cc_generic_services = true;

message Storage {
    uint32 id = 1;
    string name = 2;

    google.protobuf.Timestamp deleted_ts = 3;
    google.protobuf.Timestamp create_ts = 4;

    uint32 last_shard_isn = 5; // internel serial number
    string owner = 6;
}

message Shard {
    uint32 isn = 1;
    uint32 storage_id = 2;
    google.protobuf.Timestamp  replica_update_ts = 3;
    repeated string replicates = 4;
    bool is_deleted = 5;
    google.protobuf.Timestamp deleted_ts = 6;
    google.protobuf.Timestamp create_ts = 7;
    string leader = 8;
    google.protobuf.Timestamp leader_change_ts = 9;
}

message DataServer {
    string ip = 1;
    string port = 2;
    uint64 capacity = 3;
    uint64 free = 4;
    google.protobuf.Timestamp last_heartbeat_ts = 5;
    string status = 6;
    string idc = 7;
}

message HeartBeatRequest {
    message ShardIDAndQps {
        uint64 shard_id = 1;
        uint64 qps = 2;
    };

    message ShardIDAndSize {
        uint64 shard_id = 1;
        uint64 size = 2;
    }
    string addr = 1;
    google.protobuf.Timestamp timestamp = 2;
    bool restarting = 3;
    uint64 free_capacity = 4;
    float cpu_usage = 5;
    uint64 qps = 6;
    repeated ShardIDAndQps hot_shards = 7;
    repeated ShardIDAndSize big_shards = 8;
}

message CreateStorageRequest {
    string name = 1;
    uint32 initial_range_count = 2;
}

message CreateStorageResponse {
    uint64 id = 1;
}

message CreateShardRequest {
    uint32 storage_id = 1;
    uint32 shard_isn = 2;
    bytes range_start = 3;
    bytes range_end = 4;
}

message CreateShardResponse {
}

message RemoveShardRequest {
    uint32 storage_id = 1;
    uint32 shard_isn = 2;
}

message RemoveShardResponse {
}

message DeleteStorageRequest {
    uint32 id = 1;
    bool real_delete = 2;
    uint64 recycle_after = 3; // in minutes
}

message DeleteStorageResponse {
}

message UndeleteStorageRequest {
    uint32 id = 1;
}

message UndeleteStorageResponse {
}

message RenameStorageRequest {
    uint32 id = 1;
    string new_name = 2;
}

message RenameStorageResponse {
}

message ResizeStorageRequest {
    uint32 id = 1;
    uint64 new_size = 2;
    uint64 new_shard_count = 3;
}

message ResizeStorageResponse {
}

message StorageInfoRequest {
    repeated uint32 ids = 1;
    repeated string names = 2;
}

message StorageInfoResponse {
    repeated Storage storages = 1;
}

message ScanShardRangeRequest {
    uint32 storage_id = 1;
    bytes range_start = 2;
    uint32 range_count = 3;
}

message ScanShardRangeResponse {
    message ShardRange {
        uint64 shard_id = 1;
        bytes range_start = 2;
        bytes range_end = 3;
        string leader_addr = 4;
        repeated string addrs = 5;
    }
    bool is_end = 1;
    repeated ShardRange ranges = 2;
}

message AddDataServerRequest {
    string addr = 1;
}

message AddDataServerResponse {
}

message RemoveDataServerRequest {
    string addr = 1;
}

message RemoveDataServerResponse {
}

message ListDataServerRequest {
}

message ListDataServerResponse {
    repeated DataServer data_servers = 1;
}

message UpdateDataServerRequest {
}

message UpdateDataServerResponse {
}

message ShardInfoRequest {
    uint64 id = 1;
}

message ShardInfoResponse {
     Shard shard = 1;
}

message SyncShardInDataServerRequest {
    message SyncShardInfo {
        uint64 shard_id = 1;
        google.protobuf.Timestamp  replica_update_ts = 2;
        google.protobuf.Timestamp create_ts = 3;
        string leader = 4;
        google.protobuf.Timestamp leader_change_ts = 5;
    }

    bool is_last_piece = 1;
    google.protobuf.Timestamp sync_ts = 2;
    string dataserver_addr = 3;

    repeated SyncShardInfo shards = 4;
}

message SyncShardInDataServerResponse {
}

message AllocateTxidsRequest {
    uint32 count = 1;
}

message AllocateTxidsResponse {
    uint64 txid_range_start = 1;
    uint64 txid_range_end = 2;
}

message InfoRequest {
}

message InfoResponse {
    string leader_addr = 1;
    repeated string follower_addrs = 2;
}

service MetaService {
    rpc Info(InfoRequest) returns (InfoResponse); // P0
    rpc HeartBeat (HeartBeatRequest) returns (google.protobuf.Empty); // P0
    rpc ScanShardRange(ScanShardRangeRequest) returns (ScanShardRangeResponse); // P0

    rpc ShardInfo(ShardInfoRequest) returns (ShardInfoResponse); // P1
    rpc CreateShard(CreateShardRequest) returns (CreateShardResponse); // P2
    rpc RemoveShard(RemoveShardRequest) returns (RemoveShardResponse); // P2
    // rpc ChangeShardReplicateCount(ChangeShardReplicateCountRequest) returns(ChangeShardReplicateCountResponse);

    rpc CreateStorage (CreateStorageRequest) returns (CreateStorageResponse); // P0
    rpc DeleteStorage (DeleteStorageRequest) returns (DeleteStorageResponse); // P0
    rpc UndeleteStorage (UndeleteStorageRequest) returns (UndeleteStorageResponse);
    rpc RenameStorage (RenameStorageRequest) returns (RenameStorageResponse); // P2
    rpc ResizeStorage (ResizeStorageRequest) returns (ResizeStorageResponse); // P2
    rpc StorageInfo (StorageInfoRequest) returns (StorageInfoResponse); // P1

    rpc AddDataServer (AddDataServerRequest) returns (AddDataServerResponse); // P0
    rpc RemoveDataServer (RemoveDataServerRequest) returns (RemoveDataServerResponse); // P0
    rpc ListDataServer (ListDataServerRequest) returns (ListDataServerResponse); // P1
    rpc UpdateDataServer (UpdateDataServerRequest) returns (UpdateDataServerResponse); // P2
    rpc SyncShardInDataServer(stream SyncShardInDataServerRequest) returns (SyncShardInDataServerResponse); // P0

    rpc AllocateTxids(AllocateTxidsRequest) returns (AllocateTxidsResponse); // P1
}
