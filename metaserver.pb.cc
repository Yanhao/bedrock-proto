// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metaserver.proto

#include "metaserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_metaserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataServer_metaserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metaserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteRecord_metaserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metaserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Shard_metaserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metaserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardList_metaserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metaserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardRange_metaserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metaserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Storage_metaserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metaserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncShardInDataServerRequest_SyncShardInfo_metaserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bedrock {
namespace metaserver {
class StorageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Storage> _instance;
} _Storage_default_instance_;
class ShardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shard> _instance;
} _Shard_default_instance_;
class DataServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataServer> _instance;
} _DataServer_default_instance_;
class ReplicateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Replicate> _instance;
} _Replicate_default_instance_;
class HeartBeatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatRequest> _instance;
} _HeartBeatRequest_default_instance_;
class HeartBeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatResponse> _instance;
} _HeartBeatResponse_default_instance_;
class CreateStorageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateStorageRequest> _instance;
} _CreateStorageRequest_default_instance_;
class CreateStorageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateStorageResponse> _instance;
} _CreateStorageResponse_default_instance_;
class CreateShardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateShardRequest> _instance;
} _CreateShardRequest_default_instance_;
class CreateShardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateShardResponse> _instance;
} _CreateShardResponse_default_instance_;
class RemoveShardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveShardRequest> _instance;
} _RemoveShardRequest_default_instance_;
class RemoveShardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveShardResponse> _instance;
} _RemoveShardResponse_default_instance_;
class DeleteStorageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStorageRequest> _instance;
} _DeleteStorageRequest_default_instance_;
class DeleteStorageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStorageResponse> _instance;
} _DeleteStorageResponse_default_instance_;
class UndeleteStorageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UndeleteStorageRequest> _instance;
} _UndeleteStorageRequest_default_instance_;
class UndeleteStorageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UndeleteStorageResponse> _instance;
} _UndeleteStorageResponse_default_instance_;
class RenameStorageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameStorageRequest> _instance;
} _RenameStorageRequest_default_instance_;
class RenameStorageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RenameStorageResponse> _instance;
} _RenameStorageResponse_default_instance_;
class ResizeStorageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResizeStorageRequest> _instance;
} _ResizeStorageRequest_default_instance_;
class ResizeStorageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResizeStorageResponse> _instance;
} _ResizeStorageResponse_default_instance_;
class GetStoragesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStoragesRequest> _instance;
} _GetStoragesRequest_default_instance_;
class GetStoragesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStoragesResponse> _instance;
} _GetStoragesResponse_default_instance_;
class ShardRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShardRange> _instance;
} _ShardRange_default_instance_;
class RouteRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteRecord> _instance;
} _RouteRecord_default_instance_;
class ShardListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShardList> _instance;
} _ShardList_default_instance_;
class GetShardRoutesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetShardRoutesRequest> _instance;
  const ::bedrock::metaserver::ShardList* shards_list_;
  const ::bedrock::metaserver::ShardRange* shard_range_;
} _GetShardRoutesRequest_default_instance_;
class GetShardRoutesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetShardRoutesResponse> _instance;
} _GetShardRoutesResponse_default_instance_;
class GetShardRoutesByStorageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetShardRoutesByStorageRequest> _instance;
} _GetShardRoutesByStorageRequest_default_instance_;
class GetShardRoutesByStorageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetShardRoutesByStorageResponse> _instance;
} _GetShardRoutesByStorageResponse_default_instance_;
class AddDataServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDataServerRequest> _instance;
} _AddDataServerRequest_default_instance_;
class AddDataServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDataServerResponse> _instance;
} _AddDataServerResponse_default_instance_;
class RemoveDataServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveDataServerRequest> _instance;
} _RemoveDataServerRequest_default_instance_;
class RemoveDataServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveDataServerResponse> _instance;
} _RemoveDataServerResponse_default_instance_;
class ListDataServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDataServerRequest> _instance;
} _ListDataServerRequest_default_instance_;
class ListDataServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListDataServerResponse> _instance;
} _ListDataServerResponse_default_instance_;
class UpdateDataServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDataServerRequest> _instance;
} _UpdateDataServerRequest_default_instance_;
class UpdateDataServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateDataServerResponse> _instance;
} _UpdateDataServerResponse_default_instance_;
class ShardInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShardInfoRequest> _instance;
} _ShardInfoRequest_default_instance_;
class ShardInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShardInfoResponse> _instance;
} _ShardInfoResponse_default_instance_;
class GetShardIDByKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetShardIDByKeyRequest> _instance;
} _GetShardIDByKeyRequest_default_instance_;
class GetShardIDByKeyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetShardIDByKeyResponse> _instance;
} _GetShardIDByKeyResponse_default_instance_;
class SyncShardInDataServerRequest_SyncShardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncShardInDataServerRequest_SyncShardInfo> _instance;
} _SyncShardInDataServerRequest_SyncShardInfo_default_instance_;
class SyncShardInDataServerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncShardInDataServerRequest> _instance;
} _SyncShardInDataServerRequest_default_instance_;
class SyncShardInDataServerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncShardInDataServerResponse> _instance;
} _SyncShardInDataServerResponse_default_instance_;
class AllocateTxIDsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocateTxIDsRequest> _instance;
} _AllocateTxIDsRequest_default_instance_;
class AllocateTxIDsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocateTxIDsResponse> _instance;
} _AllocateTxIDsResponse_default_instance_;
}  // namespace metaserver
}  // namespace bedrock
static void InitDefaultsscc_info_AddDataServerRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_AddDataServerRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::AddDataServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::AddDataServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddDataServerRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddDataServerRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_AddDataServerResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_AddDataServerResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::AddDataServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::AddDataServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddDataServerResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddDataServerResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_AllocateTxIDsRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_AllocateTxIDsRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::AllocateTxIDsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::AllocateTxIDsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocateTxIDsRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllocateTxIDsRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_AllocateTxIDsResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_AllocateTxIDsResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::AllocateTxIDsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::AllocateTxIDsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllocateTxIDsResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllocateTxIDsResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_CreateShardRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_CreateShardRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::CreateShardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::CreateShardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateShardRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateShardRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_CreateShardResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_CreateShardResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::CreateShardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::CreateShardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateShardResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateShardResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_CreateStorageRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_CreateStorageRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::CreateStorageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::CreateStorageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateStorageRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateStorageRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_CreateStorageResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_CreateStorageResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::CreateStorageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::CreateStorageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateStorageResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateStorageResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_DataServer_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_DataServer_default_instance_;
    new (ptr) ::bedrock::metaserver::DataServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::DataServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataServer_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataServer_metaserver_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_DeleteStorageRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_DeleteStorageRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::DeleteStorageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::DeleteStorageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStorageRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteStorageRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_DeleteStorageResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_DeleteStorageResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::DeleteStorageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::DeleteStorageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteStorageResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteStorageResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_GetShardIDByKeyRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_GetShardIDByKeyRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::GetShardIDByKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::GetShardIDByKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetShardIDByKeyRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetShardIDByKeyRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_GetShardIDByKeyResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_GetShardIDByKeyResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::GetShardIDByKeyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::GetShardIDByKeyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetShardIDByKeyResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetShardIDByKeyResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_GetShardRoutesByStorageRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_GetShardRoutesByStorageRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::GetShardRoutesByStorageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::GetShardRoutesByStorageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetShardRoutesByStorageRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetShardRoutesByStorageRequest_metaserver_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetShardRoutesByStorageResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_GetShardRoutesByStorageResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::GetShardRoutesByStorageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::GetShardRoutesByStorageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetShardRoutesByStorageResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetShardRoutesByStorageResponse_metaserver_2eproto}, {
      &scc_info_RouteRecord_metaserver_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetShardRoutesRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_GetShardRoutesRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::GetShardRoutesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::GetShardRoutesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetShardRoutesRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetShardRoutesRequest_metaserver_2eproto}, {
      &scc_info_ShardList_metaserver_2eproto.base,
      &scc_info_ShardRange_metaserver_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetShardRoutesResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_GetShardRoutesResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::GetShardRoutesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::GetShardRoutesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetShardRoutesResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetShardRoutesResponse_metaserver_2eproto}, {
      &scc_info_RouteRecord_metaserver_2eproto.base,}};

static void InitDefaultsscc_info_GetStoragesRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_GetStoragesRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::GetStoragesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::GetStoragesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStoragesRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStoragesRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_GetStoragesResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_GetStoragesResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::GetStoragesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::GetStoragesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStoragesResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStoragesResponse_metaserver_2eproto}, {
      &scc_info_Storage_metaserver_2eproto.base,}};

static void InitDefaultsscc_info_HeartBeatRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_HeartBeatRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::HeartBeatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::HeartBeatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeatRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeatRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_HeartBeatResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_HeartBeatResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::HeartBeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::HeartBeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeatResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeatResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_ListDataServerRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_ListDataServerRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::ListDataServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::ListDataServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListDataServerRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListDataServerRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_ListDataServerResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_ListDataServerResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::ListDataServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::ListDataServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListDataServerResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListDataServerResponse_metaserver_2eproto}, {
      &scc_info_DataServer_metaserver_2eproto.base,}};

static void InitDefaultsscc_info_RemoveDataServerRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_RemoveDataServerRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::RemoveDataServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::RemoveDataServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveDataServerRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveDataServerRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_RemoveDataServerResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_RemoveDataServerResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::RemoveDataServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::RemoveDataServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveDataServerResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveDataServerResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_RemoveShardRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_RemoveShardRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::RemoveShardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::RemoveShardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveShardRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveShardRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_RemoveShardResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_RemoveShardResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::RemoveShardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::RemoveShardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveShardResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveShardResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_RenameStorageRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_RenameStorageRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::RenameStorageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::RenameStorageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RenameStorageRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RenameStorageRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_RenameStorageResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_RenameStorageResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::RenameStorageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::RenameStorageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RenameStorageResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RenameStorageResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_Replicate_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_Replicate_default_instance_;
    new (ptr) ::bedrock::metaserver::Replicate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::Replicate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Replicate_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Replicate_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_ResizeStorageRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_ResizeStorageRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::ResizeStorageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::ResizeStorageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResizeStorageRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResizeStorageRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_ResizeStorageResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_ResizeStorageResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::ResizeStorageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::ResizeStorageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResizeStorageResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResizeStorageResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_RouteRecord_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_RouteRecord_default_instance_;
    new (ptr) ::bedrock::metaserver::RouteRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::RouteRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteRecord_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteRecord_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_Shard_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_Shard_default_instance_;
    new (ptr) ::bedrock::metaserver::Shard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::Shard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Shard_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Shard_metaserver_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ShardInfoRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_ShardInfoRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::ShardInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::ShardInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardInfoRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShardInfoRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_ShardInfoResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_ShardInfoResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::ShardInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::ShardInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShardInfoResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShardInfoResponse_metaserver_2eproto}, {
      &scc_info_Shard_metaserver_2eproto.base,}};

static void InitDefaultsscc_info_ShardList_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_ShardList_default_instance_;
    new (ptr) ::bedrock::metaserver::ShardList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::ShardList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardList_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShardList_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_ShardRange_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_ShardRange_default_instance_;
    new (ptr) ::bedrock::metaserver::ShardRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::ShardRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShardRange_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShardRange_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_Storage_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_Storage_default_instance_;
    new (ptr) ::bedrock::metaserver::Storage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::Storage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Storage_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Storage_metaserver_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SyncShardInDataServerRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_SyncShardInDataServerRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::SyncShardInDataServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::SyncShardInDataServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SyncShardInDataServerRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SyncShardInDataServerRequest_metaserver_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_SyncShardInDataServerRequest_SyncShardInfo_metaserver_2eproto.base,}};

static void InitDefaultsscc_info_SyncShardInDataServerRequest_SyncShardInfo_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_SyncShardInDataServerRequest_SyncShardInfo_default_instance_;
    new (ptr) ::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncShardInDataServerRequest_SyncShardInfo_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncShardInDataServerRequest_SyncShardInfo_metaserver_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SyncShardInDataServerResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_SyncShardInDataServerResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::SyncShardInDataServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::SyncShardInDataServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncShardInDataServerResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncShardInDataServerResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_UndeleteStorageRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_UndeleteStorageRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::UndeleteStorageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::UndeleteStorageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UndeleteStorageRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UndeleteStorageRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_UndeleteStorageResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_UndeleteStorageResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::UndeleteStorageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::UndeleteStorageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UndeleteStorageResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UndeleteStorageResponse_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_UpdateDataServerRequest_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_UpdateDataServerRequest_default_instance_;
    new (ptr) ::bedrock::metaserver::UpdateDataServerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::UpdateDataServerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateDataServerRequest_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateDataServerRequest_metaserver_2eproto}, {}};

static void InitDefaultsscc_info_UpdateDataServerResponse_metaserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::metaserver::_UpdateDataServerResponse_default_instance_;
    new (ptr) ::bedrock::metaserver::UpdateDataServerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::metaserver::UpdateDataServerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateDataServerResponse_metaserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateDataServerResponse_metaserver_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metaserver_2eproto[46];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_metaserver_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_metaserver_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_metaserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, name_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, deleted_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, create_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, last_shard_isn_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, isn_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, replica_update_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, replicates_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, is_deleted_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, deleted_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, create_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, leader_change_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, ip_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, port_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, capacity_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, free_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, last_heartbeat_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, status_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, idc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Replicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Replicate, addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::HeartBeatRequest, addr_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::HeartBeatRequest, restarting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageRequest, name_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageRequest, initial_range_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateShardRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateShardRequest, shard_isn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveShardRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveShardRequest, shard_isn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageRequest, id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageRequest, real_delete_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageRequest, recycle_after_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UndeleteStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UndeleteStorageRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UndeleteStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RenameStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RenameStorageRequest, id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RenameStorageRequest, new_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RenameStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageRequest, id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageRequest, new_size_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageRequest, new_shard_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesRequest, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesResponse, storages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardRange, start_shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardRange, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RouteRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RouteRecord, shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RouteRecord, leader_addr_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RouteRecord, addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardList, shard_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::bedrock::metaserver::GetShardRoutesRequestDefaultTypeInternal, shards_list_),
  offsetof(::bedrock::metaserver::GetShardRoutesRequestDefaultTypeInternal, shard_range_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesRequest, shards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesResponse, routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageRequest, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageResponse, routes_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageResponse, is_full_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AddDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AddDataServerRequest, addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AddDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveDataServerRequest, addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ListDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ListDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ListDataServerResponse, data_servers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UpdateDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UpdateDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardInfoRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardInfoResponse, shard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyResponse, shard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo, shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo, replica_update_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo, create_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo, leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo, leader_change_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest, is_last_piece_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest, sync_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest, dataserver_addr_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerRequest, shards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::SyncShardInDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AllocateTxIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AllocateTxIDsRequest, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AllocateTxIDsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AllocateTxIDsResponse, tx_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bedrock::metaserver::Storage)},
  { 11, -1, sizeof(::bedrock::metaserver::Shard)},
  { 25, -1, sizeof(::bedrock::metaserver::DataServer)},
  { 37, -1, sizeof(::bedrock::metaserver::Replicate)},
  { 43, -1, sizeof(::bedrock::metaserver::HeartBeatRequest)},
  { 50, -1, sizeof(::bedrock::metaserver::HeartBeatResponse)},
  { 55, -1, sizeof(::bedrock::metaserver::CreateStorageRequest)},
  { 62, -1, sizeof(::bedrock::metaserver::CreateStorageResponse)},
  { 68, -1, sizeof(::bedrock::metaserver::CreateShardRequest)},
  { 75, -1, sizeof(::bedrock::metaserver::CreateShardResponse)},
  { 80, -1, sizeof(::bedrock::metaserver::RemoveShardRequest)},
  { 87, -1, sizeof(::bedrock::metaserver::RemoveShardResponse)},
  { 92, -1, sizeof(::bedrock::metaserver::DeleteStorageRequest)},
  { 100, -1, sizeof(::bedrock::metaserver::DeleteStorageResponse)},
  { 105, -1, sizeof(::bedrock::metaserver::UndeleteStorageRequest)},
  { 111, -1, sizeof(::bedrock::metaserver::UndeleteStorageResponse)},
  { 116, -1, sizeof(::bedrock::metaserver::RenameStorageRequest)},
  { 123, -1, sizeof(::bedrock::metaserver::RenameStorageResponse)},
  { 128, -1, sizeof(::bedrock::metaserver::ResizeStorageRequest)},
  { 136, -1, sizeof(::bedrock::metaserver::ResizeStorageResponse)},
  { 141, -1, sizeof(::bedrock::metaserver::GetStoragesRequest)},
  { 148, -1, sizeof(::bedrock::metaserver::GetStoragesResponse)},
  { 154, -1, sizeof(::bedrock::metaserver::ShardRange)},
  { 161, -1, sizeof(::bedrock::metaserver::RouteRecord)},
  { 169, -1, sizeof(::bedrock::metaserver::ShardList)},
  { 175, -1, sizeof(::bedrock::metaserver::GetShardRoutesRequest)},
  { 184, -1, sizeof(::bedrock::metaserver::GetShardRoutesResponse)},
  { 190, -1, sizeof(::bedrock::metaserver::GetShardRoutesByStorageRequest)},
  { 197, -1, sizeof(::bedrock::metaserver::GetShardRoutesByStorageResponse)},
  { 205, -1, sizeof(::bedrock::metaserver::AddDataServerRequest)},
  { 211, -1, sizeof(::bedrock::metaserver::AddDataServerResponse)},
  { 216, -1, sizeof(::bedrock::metaserver::RemoveDataServerRequest)},
  { 222, -1, sizeof(::bedrock::metaserver::RemoveDataServerResponse)},
  { 227, -1, sizeof(::bedrock::metaserver::ListDataServerRequest)},
  { 232, -1, sizeof(::bedrock::metaserver::ListDataServerResponse)},
  { 238, -1, sizeof(::bedrock::metaserver::UpdateDataServerRequest)},
  { 243, -1, sizeof(::bedrock::metaserver::UpdateDataServerResponse)},
  { 248, -1, sizeof(::bedrock::metaserver::ShardInfoRequest)},
  { 254, -1, sizeof(::bedrock::metaserver::ShardInfoResponse)},
  { 260, -1, sizeof(::bedrock::metaserver::GetShardIDByKeyRequest)},
  { 267, -1, sizeof(::bedrock::metaserver::GetShardIDByKeyResponse)},
  { 273, -1, sizeof(::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo)},
  { 283, -1, sizeof(::bedrock::metaserver::SyncShardInDataServerRequest)},
  { 292, -1, sizeof(::bedrock::metaserver::SyncShardInDataServerResponse)},
  { 297, -1, sizeof(::bedrock::metaserver::AllocateTxIDsRequest)},
  { 303, -1, sizeof(::bedrock::metaserver::AllocateTxIDsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_Storage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_Shard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_DataServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_Replicate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_HeartBeatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_HeartBeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_CreateStorageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_CreateStorageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_CreateShardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_CreateShardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_RemoveShardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_RemoveShardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_DeleteStorageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_DeleteStorageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_UndeleteStorageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_UndeleteStorageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_RenameStorageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_RenameStorageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_ResizeStorageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_ResizeStorageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_GetStoragesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_GetStoragesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_ShardRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_RouteRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_ShardList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_GetShardRoutesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_GetShardRoutesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_GetShardRoutesByStorageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_GetShardRoutesByStorageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_AddDataServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_AddDataServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_RemoveDataServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_RemoveDataServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_ListDataServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_ListDataServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_UpdateDataServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_UpdateDataServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_ShardInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_ShardInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_GetShardIDByKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_GetShardIDByKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_SyncShardInDataServerRequest_SyncShardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_SyncShardInDataServerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_SyncShardInDataServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_AllocateTxIDsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::metaserver::_AllocateTxIDsResponse_default_instance_),
};

const char descriptor_table_protodef_metaserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020metaserver.proto\022\022bedrock.metaserver\032\033"
  "google/protobuf/empty.proto\032\037google/prot"
  "obuf/timestamp.proto\"\251\001\n\007Storage\022\n\n\002id\030\001"
  " \001(\r\022\014\n\004name\030\002 \001(\t\022.\n\ndeleted_ts\030\003 \001(\0132\032"
  ".google.protobuf.Timestamp\022-\n\tcreate_ts\030"
  "\004 \001(\0132\032.google.protobuf.Timestamp\022\026\n\016las"
  "t_shard_isn\030\005 \001(\r\022\r\n\005owner\030\006 \001(\t\"\254\002\n\005Sha"
  "rd\022\013\n\003isn\030\001 \001(\r\022\022\n\nstorage_id\030\002 \001(\r\0225\n\021r"
  "eplica_update_ts\030\003 \001(\0132\032.google.protobuf"
  ".Timestamp\022\022\n\nreplicates\030\004 \003(\t\022\022\n\nis_del"
  "eted\030\005 \001(\010\022.\n\ndeleted_ts\030\006 \001(\0132\032.google."
  "protobuf.Timestamp\022-\n\tcreate_ts\030\007 \001(\0132\032."
  "google.protobuf.Timestamp\022\016\n\006leader\030\010 \001("
  "\t\0224\n\020leader_change_ts\030\t \001(\0132\032.google.pro"
  "tobuf.Timestamp\"\232\001\n\nDataServer\022\n\n\002ip\030\001 \001"
  "(\t\022\014\n\004port\030\002 \001(\t\022\020\n\010capacity\030\003 \001(\004\022\014\n\004fr"
  "ee\030\004 \001(\004\0225\n\021last_heartbeat_ts\030\005 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\016\n\006status\030\006 \001(\t\022"
  "\013\n\003idc\030\007 \001(\t\"\032\n\tReplicate\022\r\n\005addrs\030\001 \003(\t"
  "\"4\n\020HeartBeatRequest\022\014\n\004addr\030\001 \001(\t\022\022\n\nre"
  "starting\030\002 \001(\010\"\023\n\021HeartBeatResponse\"A\n\024C"
  "reateStorageRequest\022\014\n\004name\030\001 \001(\t\022\033\n\023ini"
  "tial_range_count\030\002 \001(\r\"#\n\025CreateStorageR"
  "esponse\022\n\n\002id\030\001 \001(\004\";\n\022CreateShardReques"
  "t\022\022\n\nstorage_id\030\001 \001(\r\022\021\n\tshard_isn\030\002 \001(\r"
  "\"\025\n\023CreateShardResponse\";\n\022RemoveShardRe"
  "quest\022\022\n\nstorage_id\030\001 \001(\r\022\021\n\tshard_isn\030\002"
  " \001(\r\"\025\n\023RemoveShardResponse\"N\n\024DeleteSto"
  "rageRequest\022\n\n\002id\030\001 \001(\r\022\023\n\013real_delete\030\002"
  " \001(\010\022\025\n\rrecycle_after\030\003 \001(\004\"\027\n\025DeleteSto"
  "rageResponse\"$\n\026UndeleteStorageRequest\022\n"
  "\n\002id\030\001 \001(\r\"\031\n\027UndeleteStorageResponse\"4\n"
  "\024RenameStorageRequest\022\n\n\002id\030\001 \001(\r\022\020\n\010new"
  "_name\030\002 \001(\t\"\027\n\025RenameStorageResponse\"M\n\024"
  "ResizeStorageRequest\022\n\n\002id\030\001 \001(\r\022\020\n\010new_"
  "size\030\002 \001(\004\022\027\n\017new_shard_count\030\003 \001(\004\"\027\n\025R"
  "esizeStorageResponse\"0\n\022GetStoragesReque"
  "st\022\013\n\003ids\030\001 \003(\r\022\r\n\005names\030\002 \003(\t\"D\n\023GetSto"
  "ragesResponse\022-\n\010storages\030\001 \003(\0132\033.bedroc"
  "k.metaserver.Storage\"4\n\nShardRange\022\026\n\016st"
  "art_shard_id\030\001 \001(\004\022\016\n\006offset\030\002 \001(\004\"C\n\013Ro"
  "uteRecord\022\020\n\010shard_id\030\001 \001(\004\022\023\n\013leader_ad"
  "dr\030\002 \001(\t\022\r\n\005addrs\030\003 \003(\t\"\036\n\tShardList\022\021\n\t"
  "shard_ids\030\001 \003(\004\"\275\001\n\025GetShardRoutesReques"
  "t\0224\n\013shards_list\030\001 \001(\0132\035.bedrock.metaser"
  "ver.ShardListH\000\0225\n\013shard_range\030\002 \001(\0132\036.b"
  "edrock.metaserver.ShardRangeH\000\022-\n\ttimest"
  "amp\030\003 \001(\0132\032.google.protobuf.TimestampB\010\n"
  "\006shards\"I\n\026GetShardRoutesResponse\022/\n\006rou"
  "tes\030\001 \003(\0132\037.bedrock.metaserver.RouteReco"
  "rd\"c\n\036GetShardRoutesByStorageRequest\022\022\n\n"
  "storage_id\030\001 \001(\r\022-\n\ttimestamp\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\"\222\001\n\037GetShardRout"
  "esByStorageResponse\022/\n\006routes\030\001 \003(\0132\037.be"
  "drock.metaserver.RouteRecord\022-\n\ttimestam"
  "p\030\002 \001(\0132\032.google.protobuf.Timestamp\022\017\n\007i"
  "s_full\030\003 \001(\010\"$\n\024AddDataServerRequest\022\014\n\004"
  "addr\030\001 \001(\t\"\027\n\025AddDataServerResponse\"\'\n\027R"
  "emoveDataServerRequest\022\014\n\004addr\030\001 \001(\t\"\032\n\030"
  "RemoveDataServerResponse\"\027\n\025ListDataServ"
  "erRequest\"N\n\026ListDataServerResponse\0224\n\014d"
  "ata_servers\030\001 \003(\0132\036.bedrock.metaserver.D"
  "ataServer\"\031\n\027UpdateDataServerRequest\"\032\n\030"
  "UpdateDataServerResponse\"\036\n\020ShardInfoReq"
  "uest\022\n\n\002id\030\001 \001(\004\"=\n\021ShardInfoResponse\022(\n"
  "\005shard\030\001 \001(\0132\031.bedrock.metaserver.Shard\""
  "9\n\026GetShardIDByKeyRequest\022\022\n\nstorage_id\030"
  "\001 \001(\r\022\013\n\003key\030\002 \001(\014\"+\n\027GetShardIDByKeyRes"
  "ponse\022\020\n\010shard_id\030\001 \001(\004\"\233\003\n\034SyncShardInD"
  "ataServerRequest\022\025\n\ris_last_piece\030\001 \001(\010\022"
  "+\n\007sync_ts\030\002 \001(\0132\032.google.protobuf.Times"
  "tamp\022\027\n\017dataserver_addr\030\003 \001(\t\022N\n\006shards\030"
  "\004 \003(\0132>.bedrock.metaserver.SyncShardInDa"
  "taServerRequest.SyncShardInfo\032\315\001\n\rSyncSh"
  "ardInfo\022\020\n\010shard_id\030\001 \001(\004\0225\n\021replica_upd"
  "ate_ts\030\002 \001(\0132\032.google.protobuf.Timestamp"
  "\022-\n\tcreate_ts\030\003 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\016\n\006leader\030\004 \001(\t\0224\n\020leader_change"
  "_ts\030\005 \001(\0132\032.google.protobuf.Timestamp\"\037\n"
  "\035SyncShardInDataServerResponse\"%\n\024Alloca"
  "teTxIDsRequest\022\r\n\005count\030\001 \001(\r\"\'\n\025Allocat"
  "eTxIDsResponse\022\016\n\006tx_ids\030\001 \003(\0042\276\016\n\013MetaS"
  "ervice\022I\n\tHeartBeat\022$.bedrock.metaserver"
  ".HeartBeatRequest\032\026.google.protobuf.Empt"
  "y\022g\n\016GetShardRoutes\022).bedrock.metaserver"
  ".GetShardRoutesRequest\032*.bedrock.metaser"
  "ver.GetShardRoutesResponse\022X\n\tShardInfo\022"
  "$.bedrock.metaserver.ShardInfoRequest\032%."
  "bedrock.metaserver.ShardInfoResponse\022^\n\013"
  "CreateShard\022&.bedrock.metaserver.CreateS"
  "hardRequest\032\'.bedrock.metaserver.CreateS"
  "hardResponse\022^\n\013RemoveShard\022&.bedrock.me"
  "taserver.RemoveShardRequest\032\'.bedrock.me"
  "taserver.RemoveShardResponse\022j\n\017GetShard"
  "IDByKey\022*.bedrock.metaserver.GetShardIDB"
  "yKeyRequest\032+.bedrock.metaserver.GetShar"
  "dIDByKeyResponse\022d\n\rCreateStorage\022(.bedr"
  "ock.metaserver.CreateStorageRequest\032).be"
  "drock.metaserver.CreateStorageResponse\022d"
  "\n\rDeleteStorage\022(.bedrock.metaserver.Del"
  "eteStorageRequest\032).bedrock.metaserver.D"
  "eleteStorageResponse\022j\n\017UndeleteStorage\022"
  "*.bedrock.metaserver.UndeleteStorageRequ"
  "est\032+.bedrock.metaserver.UndeleteStorage"
  "Response\022d\n\rRenameStorage\022(.bedrock.meta"
  "server.RenameStorageRequest\032).bedrock.me"
  "taserver.RenameStorageResponse\022d\n\rResize"
  "Storage\022(.bedrock.metaserver.ResizeStora"
  "geRequest\032).bedrock.metaserver.ResizeSto"
  "rageResponse\022^\n\013GetStorages\022&.bedrock.me"
  "taserver.GetStoragesRequest\032\'.bedrock.me"
  "taserver.GetStoragesResponse\022d\n\rAddDataS"
  "erver\022(.bedrock.metaserver.AddDataServer"
  "Request\032).bedrock.metaserver.AddDataServ"
  "erResponse\022m\n\020RemoveDataServer\022+.bedrock"
  ".metaserver.RemoveDataServerRequest\032,.be"
  "drock.metaserver.RemoveDataServerRespons"
  "e\022g\n\016ListDataServer\022).bedrock.metaserver"
  ".ListDataServerRequest\032*.bedrock.metaser"
  "ver.ListDataServerResponse\022m\n\020UpdateData"
  "Server\022+.bedrock.metaserver.UpdateDataSe"
  "rverRequest\032,.bedrock.metaserver.UpdateD"
  "ataServerResponse\022~\n\025SyncShardInDataServ"
  "er\0220.bedrock.metaserver.SyncShardInDataS"
  "erverRequest\0321.bedrock.metaserver.SyncSh"
  "ardInDataServerResponse(\001\022d\n\rAllocateTxI"
  "Ds\022(.bedrock.metaserver.AllocateTxIDsReq"
  "uest\032).bedrock.metaserver.AllocateTxIDsR"
  "esponseB.Z)sr.ht/moyanhao/bedrock-metase"
  "rver/service\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_metaserver_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_metaserver_2eproto_sccs[46] = {
  &scc_info_AddDataServerRequest_metaserver_2eproto.base,
  &scc_info_AddDataServerResponse_metaserver_2eproto.base,
  &scc_info_AllocateTxIDsRequest_metaserver_2eproto.base,
  &scc_info_AllocateTxIDsResponse_metaserver_2eproto.base,
  &scc_info_CreateShardRequest_metaserver_2eproto.base,
  &scc_info_CreateShardResponse_metaserver_2eproto.base,
  &scc_info_CreateStorageRequest_metaserver_2eproto.base,
  &scc_info_CreateStorageResponse_metaserver_2eproto.base,
  &scc_info_DataServer_metaserver_2eproto.base,
  &scc_info_DeleteStorageRequest_metaserver_2eproto.base,
  &scc_info_DeleteStorageResponse_metaserver_2eproto.base,
  &scc_info_GetShardIDByKeyRequest_metaserver_2eproto.base,
  &scc_info_GetShardIDByKeyResponse_metaserver_2eproto.base,
  &scc_info_GetShardRoutesByStorageRequest_metaserver_2eproto.base,
  &scc_info_GetShardRoutesByStorageResponse_metaserver_2eproto.base,
  &scc_info_GetShardRoutesRequest_metaserver_2eproto.base,
  &scc_info_GetShardRoutesResponse_metaserver_2eproto.base,
  &scc_info_GetStoragesRequest_metaserver_2eproto.base,
  &scc_info_GetStoragesResponse_metaserver_2eproto.base,
  &scc_info_HeartBeatRequest_metaserver_2eproto.base,
  &scc_info_HeartBeatResponse_metaserver_2eproto.base,
  &scc_info_ListDataServerRequest_metaserver_2eproto.base,
  &scc_info_ListDataServerResponse_metaserver_2eproto.base,
  &scc_info_RemoveDataServerRequest_metaserver_2eproto.base,
  &scc_info_RemoveDataServerResponse_metaserver_2eproto.base,
  &scc_info_RemoveShardRequest_metaserver_2eproto.base,
  &scc_info_RemoveShardResponse_metaserver_2eproto.base,
  &scc_info_RenameStorageRequest_metaserver_2eproto.base,
  &scc_info_RenameStorageResponse_metaserver_2eproto.base,
  &scc_info_Replicate_metaserver_2eproto.base,
  &scc_info_ResizeStorageRequest_metaserver_2eproto.base,
  &scc_info_ResizeStorageResponse_metaserver_2eproto.base,
  &scc_info_RouteRecord_metaserver_2eproto.base,
  &scc_info_Shard_metaserver_2eproto.base,
  &scc_info_ShardInfoRequest_metaserver_2eproto.base,
  &scc_info_ShardInfoResponse_metaserver_2eproto.base,
  &scc_info_ShardList_metaserver_2eproto.base,
  &scc_info_ShardRange_metaserver_2eproto.base,
  &scc_info_Storage_metaserver_2eproto.base,
  &scc_info_SyncShardInDataServerRequest_metaserver_2eproto.base,
  &scc_info_SyncShardInDataServerRequest_SyncShardInfo_metaserver_2eproto.base,
  &scc_info_SyncShardInDataServerResponse_metaserver_2eproto.base,
  &scc_info_UndeleteStorageRequest_metaserver_2eproto.base,
  &scc_info_UndeleteStorageResponse_metaserver_2eproto.base,
  &scc_info_UpdateDataServerRequest_metaserver_2eproto.base,
  &scc_info_UpdateDataServerResponse_metaserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_metaserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metaserver_2eproto = {
  false, false, descriptor_table_protodef_metaserver_2eproto, "metaserver.proto", 5183,
  &descriptor_table_metaserver_2eproto_once, descriptor_table_metaserver_2eproto_sccs, descriptor_table_metaserver_2eproto_deps, 46, 2,
  schemas, file_default_instances, TableStruct_metaserver_2eproto::offsets,
  file_level_metadata_metaserver_2eproto, 46, file_level_enum_descriptors_metaserver_2eproto, file_level_service_descriptors_metaserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_metaserver_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_metaserver_2eproto)), true);
namespace bedrock {
namespace metaserver {

// ===================================================================

void Storage::InitAsDefaultInstance() {
  ::bedrock::metaserver::_Storage_default_instance_._instance.get_mutable()->deleted_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bedrock::metaserver::_Storage_default_instance_._instance.get_mutable()->create_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Storage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& deleted_ts(const Storage* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_ts(const Storage* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Storage::_Internal::deleted_ts(const Storage* msg) {
  return *msg->deleted_ts_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Storage::_Internal::create_ts(const Storage* msg) {
  return *msg->create_ts_;
}
void Storage::clear_deleted_ts() {
  if (GetArena() == nullptr && deleted_ts_ != nullptr) {
    delete deleted_ts_;
  }
  deleted_ts_ = nullptr;
}
void Storage::clear_create_ts() {
  if (GetArena() == nullptr && create_ts_ != nullptr) {
    delete create_ts_;
  }
  create_ts_ = nullptr;
}
Storage::Storage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.Storage)
}
Storage::Storage(const Storage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_owner(),
      GetArena());
  }
  if (from._internal_has_deleted_ts()) {
    deleted_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.deleted_ts_);
  } else {
    deleted_ts_ = nullptr;
  }
  if (from._internal_has_create_ts()) {
    create_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_ts_);
  } else {
    create_ts_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_shard_isn_) -
    reinterpret_cast<char*>(&id_)) + sizeof(last_shard_isn_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.Storage)
}

void Storage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Storage_metaserver_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&deleted_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_shard_isn_) -
      reinterpret_cast<char*>(&deleted_ts_)) + sizeof(last_shard_isn_));
}

Storage::~Storage() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.Storage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Storage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deleted_ts_;
  if (this != internal_default_instance()) delete create_ts_;
}

void Storage::ArenaDtor(void* object) {
  Storage* _this = reinterpret_cast< Storage* >(object);
  (void)_this;
}
void Storage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Storage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Storage& Storage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Storage_metaserver_2eproto.base);
  return *internal_default_instance();
}


void Storage::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.Storage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && deleted_ts_ != nullptr) {
    delete deleted_ts_;
  }
  deleted_ts_ = nullptr;
  if (GetArena() == nullptr && create_ts_ != nullptr) {
    delete create_ts_;
  }
  create_ts_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_shard_isn_) -
      reinterpret_cast<char*>(&id_)) + sizeof(last_shard_isn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Storage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.Storage.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_shard_isn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_shard_isn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.Storage.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Storage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.Storage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Storage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp deleted_ts = 3;
  if (this->has_deleted_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::deleted_ts(this), target, stream);
  }

  // .google.protobuf.Timestamp create_ts = 4;
  if (this->has_create_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::create_ts(this), target, stream);
  }

  // uint32 last_shard_isn = 5;
  if (this->last_shard_isn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_last_shard_isn(), target);
  }

  // string owner = 6;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Storage.owner");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.Storage)
  return target;
}

size_t Storage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.Storage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string owner = 6;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .google.protobuf.Timestamp deleted_ts = 3;
  if (this->has_deleted_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_ts_);
  }

  // .google.protobuf.Timestamp create_ts = 4;
  if (this->has_create_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_ts_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 last_shard_isn = 5;
  if (this->last_shard_isn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_shard_isn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Storage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.Storage)
  GOOGLE_DCHECK_NE(&from, this);
  const Storage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Storage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.Storage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.Storage)
    MergeFrom(*source);
  }
}

void Storage::MergeFrom(const Storage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.Storage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.owner().size() > 0) {
    _internal_set_owner(from._internal_owner());
  }
  if (from.has_deleted_ts()) {
    _internal_mutable_deleted_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deleted_ts());
  }
  if (from.has_create_ts()) {
    _internal_mutable_create_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_ts());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.last_shard_isn() != 0) {
    _internal_set_last_shard_isn(from._internal_last_shard_isn());
  }
}

void Storage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.Storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Storage::CopyFrom(const Storage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.Storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Storage::IsInitialized() const {
  return true;
}

void Storage::InternalSwap(Storage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Storage, last_shard_isn_)
      + sizeof(Storage::last_shard_isn_)
      - PROTOBUF_FIELD_OFFSET(Storage, deleted_ts_)>(
          reinterpret_cast<char*>(&deleted_ts_),
          reinterpret_cast<char*>(&other->deleted_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Storage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shard::InitAsDefaultInstance() {
  ::bedrock::metaserver::_Shard_default_instance_._instance.get_mutable()->replica_update_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bedrock::metaserver::_Shard_default_instance_._instance.get_mutable()->deleted_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bedrock::metaserver::_Shard_default_instance_._instance.get_mutable()->create_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bedrock::metaserver::_Shard_default_instance_._instance.get_mutable()->leader_change_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Shard::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& replica_update_ts(const Shard* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& deleted_ts(const Shard* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_ts(const Shard* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts(const Shard* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Shard::_Internal::replica_update_ts(const Shard* msg) {
  return *msg->replica_update_ts_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Shard::_Internal::deleted_ts(const Shard* msg) {
  return *msg->deleted_ts_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Shard::_Internal::create_ts(const Shard* msg) {
  return *msg->create_ts_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Shard::_Internal::leader_change_ts(const Shard* msg) {
  return *msg->leader_change_ts_;
}
void Shard::clear_replica_update_ts() {
  if (GetArena() == nullptr && replica_update_ts_ != nullptr) {
    delete replica_update_ts_;
  }
  replica_update_ts_ = nullptr;
}
void Shard::clear_deleted_ts() {
  if (GetArena() == nullptr && deleted_ts_ != nullptr) {
    delete deleted_ts_;
  }
  deleted_ts_ = nullptr;
}
void Shard::clear_create_ts() {
  if (GetArena() == nullptr && create_ts_ != nullptr) {
    delete create_ts_;
  }
  create_ts_ = nullptr;
}
void Shard::clear_leader_change_ts() {
  if (GetArena() == nullptr && leader_change_ts_ != nullptr) {
    delete leader_change_ts_;
  }
  leader_change_ts_ = nullptr;
}
Shard::Shard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  replicates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.Shard)
}
Shard::Shard(const Shard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replicates_(from.replicates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader().empty()) {
    leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader(),
      GetArena());
  }
  if (from._internal_has_replica_update_ts()) {
    replica_update_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.replica_update_ts_);
  } else {
    replica_update_ts_ = nullptr;
  }
  if (from._internal_has_deleted_ts()) {
    deleted_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.deleted_ts_);
  } else {
    deleted_ts_ = nullptr;
  }
  if (from._internal_has_create_ts()) {
    create_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_ts_);
  } else {
    create_ts_ = nullptr;
  }
  if (from._internal_has_leader_change_ts()) {
    leader_change_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.leader_change_ts_);
  } else {
    leader_change_ts_ = nullptr;
  }
  ::memcpy(&isn_, &from.isn_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_deleted_) -
    reinterpret_cast<char*>(&isn_)) + sizeof(is_deleted_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.Shard)
}

void Shard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Shard_metaserver_2eproto.base);
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&replica_update_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_deleted_) -
      reinterpret_cast<char*>(&replica_update_ts_)) + sizeof(is_deleted_));
}

Shard::~Shard() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.Shard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Shard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete replica_update_ts_;
  if (this != internal_default_instance()) delete deleted_ts_;
  if (this != internal_default_instance()) delete create_ts_;
  if (this != internal_default_instance()) delete leader_change_ts_;
}

void Shard::ArenaDtor(void* object) {
  Shard* _this = reinterpret_cast< Shard* >(object);
  (void)_this;
}
void Shard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Shard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shard& Shard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shard_metaserver_2eproto.base);
  return *internal_default_instance();
}


void Shard::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.Shard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicates_.Clear();
  leader_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && replica_update_ts_ != nullptr) {
    delete replica_update_ts_;
  }
  replica_update_ts_ = nullptr;
  if (GetArena() == nullptr && deleted_ts_ != nullptr) {
    delete deleted_ts_;
  }
  deleted_ts_ = nullptr;
  if (GetArena() == nullptr && create_ts_ != nullptr) {
    delete create_ts_;
  }
  create_ts_ = nullptr;
  if (GetArena() == nullptr && leader_change_ts_ != nullptr) {
    delete leader_change_ts_;
  }
  leader_change_ts_ = nullptr;
  ::memset(&isn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_deleted_) -
      reinterpret_cast<char*>(&isn_)) + sizeof(is_deleted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 isn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 storage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp replica_update_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replica_update_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string replicates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_replicates();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.Shard.replicates"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_deleted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leader = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_leader();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.Shard.leader"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp leader_change_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_change_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.Shard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 isn = 1;
  if (this->isn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_isn(), target);
  }

  // uint32 storage_id = 2;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_storage_id(), target);
  }

  // .google.protobuf.Timestamp replica_update_ts = 3;
  if (this->has_replica_update_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::replica_update_ts(this), target, stream);
  }

  // repeated string replicates = 4;
  for (int i = 0, n = this->_internal_replicates_size(); i < n; i++) {
    const auto& s = this->_internal_replicates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Shard.replicates");
    target = stream->WriteString(4, s, target);
  }

  // bool is_deleted = 5;
  if (this->is_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_deleted(), target);
  }

  // .google.protobuf.Timestamp deleted_ts = 6;
  if (this->has_deleted_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::deleted_ts(this), target, stream);
  }

  // .google.protobuf.Timestamp create_ts = 7;
  if (this->has_create_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::create_ts(this), target, stream);
  }

  // string leader = 8;
  if (this->leader().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Shard.leader");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_leader(), target);
  }

  // .google.protobuf.Timestamp leader_change_ts = 9;
  if (this->has_leader_change_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::leader_change_ts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.Shard)
  return target;
}

size_t Shard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.Shard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string replicates = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(replicates_.size());
  for (int i = 0, n = replicates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      replicates_.Get(i));
  }

  // string leader = 8;
  if (this->leader().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader());
  }

  // .google.protobuf.Timestamp replica_update_ts = 3;
  if (this->has_replica_update_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replica_update_ts_);
  }

  // .google.protobuf.Timestamp deleted_ts = 6;
  if (this->has_deleted_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_ts_);
  }

  // .google.protobuf.Timestamp create_ts = 7;
  if (this->has_create_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_ts_);
  }

  // .google.protobuf.Timestamp leader_change_ts = 9;
  if (this->has_leader_change_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_change_ts_);
  }

  // uint32 isn = 1;
  if (this->isn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_isn());
  }

  // uint32 storage_id = 2;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  // bool is_deleted = 5;
  if (this->is_deleted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.Shard)
  GOOGLE_DCHECK_NE(&from, this);
  const Shard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.Shard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.Shard)
    MergeFrom(*source);
  }
}

void Shard::MergeFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.Shard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicates_.MergeFrom(from.replicates_);
  if (from.leader().size() > 0) {
    _internal_set_leader(from._internal_leader());
  }
  if (from.has_replica_update_ts()) {
    _internal_mutable_replica_update_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_replica_update_ts());
  }
  if (from.has_deleted_ts()) {
    _internal_mutable_deleted_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deleted_ts());
  }
  if (from.has_create_ts()) {
    _internal_mutable_create_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_ts());
  }
  if (from.has_leader_change_ts()) {
    _internal_mutable_leader_change_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_leader_change_ts());
  }
  if (from.isn() != 0) {
    _internal_set_isn(from._internal_isn());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
  if (from.is_deleted() != 0) {
    _internal_set_is_deleted(from._internal_is_deleted());
  }
}

void Shard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.Shard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shard::CopyFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.Shard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shard::IsInitialized() const {
  return true;
}

void Shard::InternalSwap(Shard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  replicates_.InternalSwap(&other->replicates_);
  leader_.Swap(&other->leader_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Shard, is_deleted_)
      + sizeof(Shard::is_deleted_)
      - PROTOBUF_FIELD_OFFSET(Shard, replica_update_ts_)>(
          reinterpret_cast<char*>(&replica_update_ts_),
          reinterpret_cast<char*>(&other->replica_update_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Shard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataServer::InitAsDefaultInstance() {
  ::bedrock::metaserver::_DataServer_default_instance_._instance.get_mutable()->last_heartbeat_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class DataServer::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_heartbeat_ts(const DataServer* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
DataServer::_Internal::last_heartbeat_ts(const DataServer* msg) {
  return *msg->last_heartbeat_ts_;
}
void DataServer::clear_last_heartbeat_ts() {
  if (GetArena() == nullptr && last_heartbeat_ts_ != nullptr) {
    delete last_heartbeat_ts_;
  }
  last_heartbeat_ts_ = nullptr;
}
DataServer::DataServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.DataServer)
}
DataServer::DataServer(const DataServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_port(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  idc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idc().empty()) {
    idc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_idc(),
      GetArena());
  }
  if (from._internal_has_last_heartbeat_ts()) {
    last_heartbeat_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_heartbeat_ts_);
  } else {
    last_heartbeat_ts_ = nullptr;
  }
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(free_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.DataServer)
}

void DataServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataServer_metaserver_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_heartbeat_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_) -
      reinterpret_cast<char*>(&last_heartbeat_ts_)) + sizeof(free_));
}

DataServer::~DataServer() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.DataServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_heartbeat_ts_;
}

void DataServer::ArenaDtor(void* object) {
  DataServer* _this = reinterpret_cast< DataServer* >(object);
  (void)_this;
}
void DataServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataServer& DataServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataServer_metaserver_2eproto.base);
  return *internal_default_instance();
}


void DataServer::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.DataServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && last_heartbeat_ts_ != nullptr) {
    delete last_heartbeat_ts_;
  }
  last_heartbeat_ts_ = nullptr;
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(free_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.DataServer.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.DataServer.port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 free = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_heartbeat_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_heartbeat_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.DataServer.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string idc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_idc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.DataServer.idc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.DataServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.DataServer.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // string port = 2;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.DataServer.port");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  // uint64 capacity = 3;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_capacity(), target);
  }

  // uint64 free = 4;
  if (this->free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_free(), target);
  }

  // .google.protobuf.Timestamp last_heartbeat_ts = 5;
  if (this->has_last_heartbeat_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_heartbeat_ts(this), target, stream);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.DataServer.status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  // string idc = 7;
  if (this->idc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idc().data(), static_cast<int>(this->_internal_idc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.DataServer.idc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_idc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.DataServer)
  return target;
}

size_t DataServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.DataServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string port = 2;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // string status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string idc = 7;
  if (this->idc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idc());
  }

  // .google.protobuf.Timestamp last_heartbeat_ts = 5;
  if (this->has_last_heartbeat_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_heartbeat_ts_);
  }

  // uint64 capacity = 3;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_capacity());
  }

  // uint64 free = 4;
  if (this->free() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_free());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.DataServer)
  GOOGLE_DCHECK_NE(&from, this);
  const DataServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.DataServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.DataServer)
    MergeFrom(*source);
  }
}

void DataServer::MergeFrom(const DataServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.DataServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port().size() > 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.idc().size() > 0) {
    _internal_set_idc(from._internal_idc());
  }
  if (from.has_last_heartbeat_ts()) {
    _internal_mutable_last_heartbeat_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_heartbeat_ts());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.free() != 0) {
    _internal_set_free(from._internal_free());
  }
}

void DataServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.DataServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataServer::CopyFrom(const DataServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.DataServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataServer::IsInitialized() const {
  return true;
}

void DataServer::InternalSwap(DataServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  idc_.Swap(&other->idc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataServer, free_)
      + sizeof(DataServer::free_)
      - PROTOBUF_FIELD_OFFSET(DataServer, last_heartbeat_ts_)>(
          reinterpret_cast<char*>(&last_heartbeat_ts_),
          reinterpret_cast<char*>(&other->last_heartbeat_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Replicate::InitAsDefaultInstance() {
}
class Replicate::_Internal {
 public:
};

Replicate::Replicate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addrs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.Replicate)
}
Replicate::Replicate(const Replicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.Replicate)
}

void Replicate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Replicate_metaserver_2eproto.base);
}

Replicate::~Replicate() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.Replicate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Replicate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Replicate::ArenaDtor(void* object) {
  Replicate* _this = reinterpret_cast< Replicate* >(object);
  (void)_this;
}
void Replicate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Replicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Replicate& Replicate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Replicate_metaserver_2eproto.base);
  return *internal_default_instance();
}


void Replicate::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.Replicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Replicate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string addrs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addrs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.Replicate.addrs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Replicate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.Replicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addrs = 1;
  for (int i = 0, n = this->_internal_addrs_size(); i < n; i++) {
    const auto& s = this->_internal_addrs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Replicate.addrs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.Replicate)
  return target;
}

size_t Replicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.Replicate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addrs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addrs_.size());
  for (int i = 0, n = addrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addrs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Replicate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.Replicate)
  GOOGLE_DCHECK_NE(&from, this);
  const Replicate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Replicate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.Replicate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.Replicate)
    MergeFrom(*source);
  }
}

void Replicate::MergeFrom(const Replicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.Replicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
}

void Replicate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.Replicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replicate::CopyFrom(const Replicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.Replicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replicate::IsInitialized() const {
  return true;
}

void Replicate::InternalSwap(Replicate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addrs_.InternalSwap(&other->addrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Replicate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatRequest::InitAsDefaultInstance() {
}
class HeartBeatRequest::_Internal {
 public:
};

HeartBeatRequest::HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr(),
      GetArena());
  }
  restarting_ = from.restarting_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeatRequest_metaserver_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  restarting_ = false;
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.HeartBeatRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatRequest::ArenaDtor(void* object) {
  HeartBeatRequest* _this = reinterpret_cast< HeartBeatRequest* >(object);
  (void)_this;
}
void HeartBeatRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatRequest& HeartBeatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.HeartBeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  restarting_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.HeartBeatRequest.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool restarting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          restarting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.HeartBeatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.HeartBeatRequest.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // bool restarting = 2;
  if (this->restarting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_restarting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.HeartBeatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // bool restarting = 2;
  if (this->restarting() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.HeartBeatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.HeartBeatRequest)
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.restarting() != 0) {
    _internal_set_restarting(from._internal_restarting());
  }
}

void HeartBeatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  return true;
}

void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(restarting_, other->restarting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatResponse::InitAsDefaultInstance() {
}
class HeartBeatResponse::_Internal {
 public:
};

HeartBeatResponse::HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.HeartBeatResponse)
}

void HeartBeatResponse::SharedCtor() {
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.HeartBeatResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartBeatResponse::ArenaDtor(void* object) {
  HeartBeatResponse* _this = reinterpret_cast< HeartBeatResponse* >(object);
  (void)_this;
}
void HeartBeatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatResponse& HeartBeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.HeartBeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.HeartBeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.HeartBeatResponse)
  return target;
}

size_t HeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.HeartBeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.HeartBeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.HeartBeatResponse)
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HeartBeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  return true;
}

void HeartBeatResponse::InternalSwap(HeartBeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateStorageRequest::InitAsDefaultInstance() {
}
class CreateStorageRequest::_Internal {
 public:
};

CreateStorageRequest::CreateStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.CreateStorageRequest)
}
CreateStorageRequest::CreateStorageRequest(const CreateStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  initial_range_count_ = from.initial_range_count_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.CreateStorageRequest)
}

void CreateStorageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateStorageRequest_metaserver_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_range_count_ = 0u;
}

CreateStorageRequest::~CreateStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.CreateStorageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateStorageRequest::ArenaDtor(void* object) {
  CreateStorageRequest* _this = reinterpret_cast< CreateStorageRequest* >(object);
  (void)_this;
}
void CreateStorageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateStorageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateStorageRequest& CreateStorageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateStorageRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void CreateStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.CreateStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  initial_range_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateStorageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.CreateStorageRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 initial_range_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          initial_range_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateStorageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.CreateStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.CreateStorageRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 initial_range_count = 2;
  if (this->initial_range_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_initial_range_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.CreateStorageRequest)
  return target;
}

size_t CreateStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.CreateStorageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 initial_range_count = 2;
  if (this->initial_range_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_initial_range_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateStorageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.CreateStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStorageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateStorageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.CreateStorageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.CreateStorageRequest)
    MergeFrom(*source);
  }
}

void CreateStorageRequest::MergeFrom(const CreateStorageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.CreateStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.initial_range_count() != 0) {
    _internal_set_initial_range_count(from._internal_initial_range_count());
  }
}

void CreateStorageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.CreateStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStorageRequest::CopyFrom(const CreateStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.CreateStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStorageRequest::IsInitialized() const {
  return true;
}

void CreateStorageRequest::InternalSwap(CreateStorageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(initial_range_count_, other->initial_range_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStorageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateStorageResponse::InitAsDefaultInstance() {
}
class CreateStorageResponse::_Internal {
 public:
};

CreateStorageResponse::CreateStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.CreateStorageResponse)
}
CreateStorageResponse::CreateStorageResponse(const CreateStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.CreateStorageResponse)
}

void CreateStorageResponse::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

CreateStorageResponse::~CreateStorageResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.CreateStorageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateStorageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateStorageResponse::ArenaDtor(void* object) {
  CreateStorageResponse* _this = reinterpret_cast< CreateStorageResponse* >(object);
  (void)_this;
}
void CreateStorageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateStorageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateStorageResponse& CreateStorageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateStorageResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void CreateStorageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.CreateStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateStorageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateStorageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.CreateStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.CreateStorageResponse)
  return target;
}

size_t CreateStorageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.CreateStorageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateStorageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.CreateStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStorageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateStorageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.CreateStorageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.CreateStorageResponse)
    MergeFrom(*source);
  }
}

void CreateStorageResponse::MergeFrom(const CreateStorageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.CreateStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CreateStorageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.CreateStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStorageResponse::CopyFrom(const CreateStorageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.CreateStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStorageResponse::IsInitialized() const {
  return true;
}

void CreateStorageResponse::InternalSwap(CreateStorageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStorageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateShardRequest::InitAsDefaultInstance() {
}
class CreateShardRequest::_Internal {
 public:
};

CreateShardRequest::CreateShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.CreateShardRequest)
}
CreateShardRequest::CreateShardRequest(const CreateShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&storage_id_, &from.storage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_isn_) -
    reinterpret_cast<char*>(&storage_id_)) + sizeof(shard_isn_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.CreateShardRequest)
}

void CreateShardRequest::SharedCtor() {
  ::memset(&storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_isn_) -
      reinterpret_cast<char*>(&storage_id_)) + sizeof(shard_isn_));
}

CreateShardRequest::~CreateShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.CreateShardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateShardRequest::ArenaDtor(void* object) {
  CreateShardRequest* _this = reinterpret_cast< CreateShardRequest* >(object);
  (void)_this;
}
void CreateShardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateShardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateShardRequest& CreateShardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateShardRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void CreateShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.CreateShardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_isn_) -
      reinterpret_cast<char*>(&storage_id_)) + sizeof(shard_isn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateShardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shard_isn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          shard_isn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateShardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.CreateShardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint32 shard_isn = 2;
  if (this->shard_isn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shard_isn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.CreateShardRequest)
  return target;
}

size_t CreateShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.CreateShardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  // uint32 shard_isn = 2;
  if (this->shard_isn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shard_isn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateShardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.CreateShardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateShardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateShardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.CreateShardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.CreateShardRequest)
    MergeFrom(*source);
  }
}

void CreateShardRequest::MergeFrom(const CreateShardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.CreateShardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
  if (from.shard_isn() != 0) {
    _internal_set_shard_isn(from._internal_shard_isn());
  }
}

void CreateShardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.CreateShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateShardRequest::CopyFrom(const CreateShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.CreateShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateShardRequest::IsInitialized() const {
  return true;
}

void CreateShardRequest::InternalSwap(CreateShardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateShardRequest, shard_isn_)
      + sizeof(CreateShardRequest::shard_isn_)
      - PROTOBUF_FIELD_OFFSET(CreateShardRequest, storage_id_)>(
          reinterpret_cast<char*>(&storage_id_),
          reinterpret_cast<char*>(&other->storage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateShardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateShardResponse::InitAsDefaultInstance() {
}
class CreateShardResponse::_Internal {
 public:
};

CreateShardResponse::CreateShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.CreateShardResponse)
}
CreateShardResponse::CreateShardResponse(const CreateShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.CreateShardResponse)
}

void CreateShardResponse::SharedCtor() {
}

CreateShardResponse::~CreateShardResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.CreateShardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateShardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateShardResponse::ArenaDtor(void* object) {
  CreateShardResponse* _this = reinterpret_cast< CreateShardResponse* >(object);
  (void)_this;
}
void CreateShardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateShardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateShardResponse& CreateShardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateShardResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void CreateShardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.CreateShardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateShardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateShardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.CreateShardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.CreateShardResponse)
  return target;
}

size_t CreateShardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.CreateShardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateShardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.CreateShardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateShardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateShardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.CreateShardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.CreateShardResponse)
    MergeFrom(*source);
  }
}

void CreateShardResponse::MergeFrom(const CreateShardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.CreateShardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CreateShardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.CreateShardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateShardResponse::CopyFrom(const CreateShardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.CreateShardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateShardResponse::IsInitialized() const {
  return true;
}

void CreateShardResponse::InternalSwap(CreateShardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateShardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveShardRequest::InitAsDefaultInstance() {
}
class RemoveShardRequest::_Internal {
 public:
};

RemoveShardRequest::RemoveShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RemoveShardRequest)
}
RemoveShardRequest::RemoveShardRequest(const RemoveShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&storage_id_, &from.storage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_isn_) -
    reinterpret_cast<char*>(&storage_id_)) + sizeof(shard_isn_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RemoveShardRequest)
}

void RemoveShardRequest::SharedCtor() {
  ::memset(&storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_isn_) -
      reinterpret_cast<char*>(&storage_id_)) + sizeof(shard_isn_));
}

RemoveShardRequest::~RemoveShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RemoveShardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveShardRequest::ArenaDtor(void* object) {
  RemoveShardRequest* _this = reinterpret_cast< RemoveShardRequest* >(object);
  (void)_this;
}
void RemoveShardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveShardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveShardRequest& RemoveShardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveShardRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void RemoveShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RemoveShardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_isn_) -
      reinterpret_cast<char*>(&storage_id_)) + sizeof(shard_isn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveShardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shard_isn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          shard_isn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveShardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RemoveShardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint32 shard_isn = 2;
  if (this->shard_isn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shard_isn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RemoveShardRequest)
  return target;
}

size_t RemoveShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RemoveShardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  // uint32 shard_isn = 2;
  if (this->shard_isn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shard_isn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveShardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.RemoveShardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveShardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveShardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.RemoveShardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.RemoveShardRequest)
    MergeFrom(*source);
  }
}

void RemoveShardRequest::MergeFrom(const RemoveShardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RemoveShardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
  if (from.shard_isn() != 0) {
    _internal_set_shard_isn(from._internal_shard_isn());
  }
}

void RemoveShardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.RemoveShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveShardRequest::CopyFrom(const RemoveShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RemoveShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveShardRequest::IsInitialized() const {
  return true;
}

void RemoveShardRequest::InternalSwap(RemoveShardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveShardRequest, shard_isn_)
      + sizeof(RemoveShardRequest::shard_isn_)
      - PROTOBUF_FIELD_OFFSET(RemoveShardRequest, storage_id_)>(
          reinterpret_cast<char*>(&storage_id_),
          reinterpret_cast<char*>(&other->storage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveShardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveShardResponse::InitAsDefaultInstance() {
}
class RemoveShardResponse::_Internal {
 public:
};

RemoveShardResponse::RemoveShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RemoveShardResponse)
}
RemoveShardResponse::RemoveShardResponse(const RemoveShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RemoveShardResponse)
}

void RemoveShardResponse::SharedCtor() {
}

RemoveShardResponse::~RemoveShardResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RemoveShardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveShardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveShardResponse::ArenaDtor(void* object) {
  RemoveShardResponse* _this = reinterpret_cast< RemoveShardResponse* >(object);
  (void)_this;
}
void RemoveShardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveShardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveShardResponse& RemoveShardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveShardResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void RemoveShardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RemoveShardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveShardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveShardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RemoveShardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RemoveShardResponse)
  return target;
}

size_t RemoveShardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RemoveShardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveShardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.RemoveShardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveShardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveShardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.RemoveShardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.RemoveShardResponse)
    MergeFrom(*source);
  }
}

void RemoveShardResponse::MergeFrom(const RemoveShardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RemoveShardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveShardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.RemoveShardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveShardResponse::CopyFrom(const RemoveShardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RemoveShardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveShardResponse::IsInitialized() const {
  return true;
}

void RemoveShardResponse::InternalSwap(RemoveShardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveShardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteStorageRequest::InitAsDefaultInstance() {
}
class DeleteStorageRequest::_Internal {
 public:
};

DeleteStorageRequest::DeleteStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.DeleteStorageRequest)
}
DeleteStorageRequest::DeleteStorageRequest(const DeleteStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&recycle_after_) -
    reinterpret_cast<char*>(&id_)) + sizeof(recycle_after_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.DeleteStorageRequest)
}

void DeleteStorageRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recycle_after_) -
      reinterpret_cast<char*>(&id_)) + sizeof(recycle_after_));
}

DeleteStorageRequest::~DeleteStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.DeleteStorageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteStorageRequest::ArenaDtor(void* object) {
  DeleteStorageRequest* _this = reinterpret_cast< DeleteStorageRequest* >(object);
  (void)_this;
}
void DeleteStorageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteStorageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStorageRequest& DeleteStorageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStorageRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void DeleteStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.DeleteStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recycle_after_) -
      reinterpret_cast<char*>(&id_)) + sizeof(recycle_after_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteStorageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool real_delete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          real_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 recycle_after = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          recycle_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStorageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.DeleteStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bool real_delete = 2;
  if (this->real_delete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_real_delete(), target);
  }

  // uint64 recycle_after = 3;
  if (this->recycle_after() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_recycle_after(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.DeleteStorageRequest)
  return target;
}

size_t DeleteStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.DeleteStorageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // bool real_delete = 2;
  if (this->real_delete() != 0) {
    total_size += 1 + 1;
  }

  // uint64 recycle_after = 3;
  if (this->recycle_after() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recycle_after());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStorageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.DeleteStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStorageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStorageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.DeleteStorageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.DeleteStorageRequest)
    MergeFrom(*source);
  }
}

void DeleteStorageRequest::MergeFrom(const DeleteStorageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.DeleteStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.real_delete() != 0) {
    _internal_set_real_delete(from._internal_real_delete());
  }
  if (from.recycle_after() != 0) {
    _internal_set_recycle_after(from._internal_recycle_after());
  }
}

void DeleteStorageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.DeleteStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStorageRequest::CopyFrom(const DeleteStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.DeleteStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStorageRequest::IsInitialized() const {
  return true;
}

void DeleteStorageRequest::InternalSwap(DeleteStorageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteStorageRequest, recycle_after_)
      + sizeof(DeleteStorageRequest::recycle_after_)
      - PROTOBUF_FIELD_OFFSET(DeleteStorageRequest, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStorageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteStorageResponse::InitAsDefaultInstance() {
}
class DeleteStorageResponse::_Internal {
 public:
};

DeleteStorageResponse::DeleteStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.DeleteStorageResponse)
}
DeleteStorageResponse::DeleteStorageResponse(const DeleteStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.DeleteStorageResponse)
}

void DeleteStorageResponse::SharedCtor() {
}

DeleteStorageResponse::~DeleteStorageResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.DeleteStorageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteStorageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteStorageResponse::ArenaDtor(void* object) {
  DeleteStorageResponse* _this = reinterpret_cast< DeleteStorageResponse* >(object);
  (void)_this;
}
void DeleteStorageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteStorageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStorageResponse& DeleteStorageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStorageResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void DeleteStorageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.DeleteStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteStorageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStorageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.DeleteStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.DeleteStorageResponse)
  return target;
}

size_t DeleteStorageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.DeleteStorageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStorageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.DeleteStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStorageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStorageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.DeleteStorageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.DeleteStorageResponse)
    MergeFrom(*source);
  }
}

void DeleteStorageResponse::MergeFrom(const DeleteStorageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.DeleteStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteStorageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.DeleteStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStorageResponse::CopyFrom(const DeleteStorageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.DeleteStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStorageResponse::IsInitialized() const {
  return true;
}

void DeleteStorageResponse::InternalSwap(DeleteStorageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStorageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UndeleteStorageRequest::InitAsDefaultInstance() {
}
class UndeleteStorageRequest::_Internal {
 public:
};

UndeleteStorageRequest::UndeleteStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.UndeleteStorageRequest)
}
UndeleteStorageRequest::UndeleteStorageRequest(const UndeleteStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.UndeleteStorageRequest)
}

void UndeleteStorageRequest::SharedCtor() {
  id_ = 0u;
}

UndeleteStorageRequest::~UndeleteStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.UndeleteStorageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UndeleteStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UndeleteStorageRequest::ArenaDtor(void* object) {
  UndeleteStorageRequest* _this = reinterpret_cast< UndeleteStorageRequest* >(object);
  (void)_this;
}
void UndeleteStorageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndeleteStorageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UndeleteStorageRequest& UndeleteStorageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UndeleteStorageRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void UndeleteStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.UndeleteStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndeleteStorageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndeleteStorageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.UndeleteStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.UndeleteStorageRequest)
  return target;
}

size_t UndeleteStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.UndeleteStorageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndeleteStorageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.UndeleteStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UndeleteStorageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UndeleteStorageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.UndeleteStorageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.UndeleteStorageRequest)
    MergeFrom(*source);
  }
}

void UndeleteStorageRequest::MergeFrom(const UndeleteStorageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.UndeleteStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UndeleteStorageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.UndeleteStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndeleteStorageRequest::CopyFrom(const UndeleteStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.UndeleteStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndeleteStorageRequest::IsInitialized() const {
  return true;
}

void UndeleteStorageRequest::InternalSwap(UndeleteStorageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndeleteStorageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UndeleteStorageResponse::InitAsDefaultInstance() {
}
class UndeleteStorageResponse::_Internal {
 public:
};

UndeleteStorageResponse::UndeleteStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.UndeleteStorageResponse)
}
UndeleteStorageResponse::UndeleteStorageResponse(const UndeleteStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.UndeleteStorageResponse)
}

void UndeleteStorageResponse::SharedCtor() {
}

UndeleteStorageResponse::~UndeleteStorageResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.UndeleteStorageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UndeleteStorageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UndeleteStorageResponse::ArenaDtor(void* object) {
  UndeleteStorageResponse* _this = reinterpret_cast< UndeleteStorageResponse* >(object);
  (void)_this;
}
void UndeleteStorageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UndeleteStorageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UndeleteStorageResponse& UndeleteStorageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UndeleteStorageResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void UndeleteStorageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.UndeleteStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndeleteStorageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UndeleteStorageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.UndeleteStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.UndeleteStorageResponse)
  return target;
}

size_t UndeleteStorageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.UndeleteStorageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UndeleteStorageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.UndeleteStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UndeleteStorageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UndeleteStorageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.UndeleteStorageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.UndeleteStorageResponse)
    MergeFrom(*source);
  }
}

void UndeleteStorageResponse::MergeFrom(const UndeleteStorageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.UndeleteStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UndeleteStorageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.UndeleteStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndeleteStorageResponse::CopyFrom(const UndeleteStorageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.UndeleteStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndeleteStorageResponse::IsInitialized() const {
  return true;
}

void UndeleteStorageResponse::InternalSwap(UndeleteStorageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndeleteStorageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenameStorageRequest::InitAsDefaultInstance() {
}
class RenameStorageRequest::_Internal {
 public:
};

RenameStorageRequest::RenameStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RenameStorageRequest)
}
RenameStorageRequest::RenameStorageRequest(const RenameStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_name().empty()) {
    new_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_name(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RenameStorageRequest)
}

void RenameStorageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RenameStorageRequest_metaserver_2eproto.base);
  new_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

RenameStorageRequest::~RenameStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RenameStorageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenameStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenameStorageRequest::ArenaDtor(void* object) {
  RenameStorageRequest* _this = reinterpret_cast< RenameStorageRequest* >(object);
  (void)_this;
}
void RenameStorageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameStorageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameStorageRequest& RenameStorageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenameStorageRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void RenameStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RenameStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameStorageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.RenameStorageRequest.new_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameStorageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RenameStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string new_name = 2;
  if (this->new_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_name().data(), static_cast<int>(this->_internal_new_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.RenameStorageRequest.new_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RenameStorageRequest)
  return target;
}

size_t RenameStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RenameStorageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_name = 2;
  if (this->new_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_name());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameStorageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.RenameStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameStorageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameStorageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.RenameStorageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.RenameStorageRequest)
    MergeFrom(*source);
  }
}

void RenameStorageRequest::MergeFrom(const RenameStorageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RenameStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_name().size() > 0) {
    _internal_set_new_name(from._internal_new_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RenameStorageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.RenameStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameStorageRequest::CopyFrom(const RenameStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RenameStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameStorageRequest::IsInitialized() const {
  return true;
}

void RenameStorageRequest::InternalSwap(RenameStorageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  new_name_.Swap(&other->new_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameStorageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RenameStorageResponse::InitAsDefaultInstance() {
}
class RenameStorageResponse::_Internal {
 public:
};

RenameStorageResponse::RenameStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RenameStorageResponse)
}
RenameStorageResponse::RenameStorageResponse(const RenameStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RenameStorageResponse)
}

void RenameStorageResponse::SharedCtor() {
}

RenameStorageResponse::~RenameStorageResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RenameStorageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenameStorageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RenameStorageResponse::ArenaDtor(void* object) {
  RenameStorageResponse* _this = reinterpret_cast< RenameStorageResponse* >(object);
  (void)_this;
}
void RenameStorageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameStorageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenameStorageResponse& RenameStorageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RenameStorageResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void RenameStorageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RenameStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameStorageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenameStorageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RenameStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RenameStorageResponse)
  return target;
}

size_t RenameStorageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RenameStorageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenameStorageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.RenameStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RenameStorageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenameStorageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.RenameStorageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.RenameStorageResponse)
    MergeFrom(*source);
  }
}

void RenameStorageResponse::MergeFrom(const RenameStorageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RenameStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RenameStorageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.RenameStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameStorageResponse::CopyFrom(const RenameStorageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RenameStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameStorageResponse::IsInitialized() const {
  return true;
}

void RenameStorageResponse::InternalSwap(RenameStorageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameStorageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResizeStorageRequest::InitAsDefaultInstance() {
}
class ResizeStorageRequest::_Internal {
 public:
};

ResizeStorageRequest::ResizeStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ResizeStorageRequest)
}
ResizeStorageRequest::ResizeStorageRequest(const ResizeStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_size_, &from.new_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&new_size_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ResizeStorageRequest)
}

void ResizeStorageRequest::SharedCtor() {
  ::memset(&new_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&new_size_)) + sizeof(id_));
}

ResizeStorageRequest::~ResizeStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ResizeStorageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResizeStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResizeStorageRequest::ArenaDtor(void* object) {
  ResizeStorageRequest* _this = reinterpret_cast< ResizeStorageRequest* >(object);
  (void)_this;
}
void ResizeStorageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResizeStorageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResizeStorageRequest& ResizeStorageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResizeStorageRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void ResizeStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ResizeStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&new_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&new_size_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResizeStorageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_shard_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          new_shard_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResizeStorageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ResizeStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint64 new_size = 2;
  if (this->new_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_new_size(), target);
  }

  // uint64 new_shard_count = 3;
  if (this->new_shard_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_new_shard_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ResizeStorageRequest)
  return target;
}

size_t ResizeStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ResizeStorageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 new_size = 2;
  if (this->new_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_size());
  }

  // uint64 new_shard_count = 3;
  if (this->new_shard_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_shard_count());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResizeStorageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.ResizeStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeStorageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResizeStorageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.ResizeStorageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.ResizeStorageRequest)
    MergeFrom(*source);
  }
}

void ResizeStorageRequest::MergeFrom(const ResizeStorageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ResizeStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_size() != 0) {
    _internal_set_new_size(from._internal_new_size());
  }
  if (from.new_shard_count() != 0) {
    _internal_set_new_shard_count(from._internal_new_shard_count());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ResizeStorageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.ResizeStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeStorageRequest::CopyFrom(const ResizeStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ResizeStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeStorageRequest::IsInitialized() const {
  return true;
}

void ResizeStorageRequest::InternalSwap(ResizeStorageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResizeStorageRequest, id_)
      + sizeof(ResizeStorageRequest::id_)
      - PROTOBUF_FIELD_OFFSET(ResizeStorageRequest, new_size_)>(
          reinterpret_cast<char*>(&new_size_),
          reinterpret_cast<char*>(&other->new_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizeStorageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResizeStorageResponse::InitAsDefaultInstance() {
}
class ResizeStorageResponse::_Internal {
 public:
};

ResizeStorageResponse::ResizeStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ResizeStorageResponse)
}
ResizeStorageResponse::ResizeStorageResponse(const ResizeStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ResizeStorageResponse)
}

void ResizeStorageResponse::SharedCtor() {
}

ResizeStorageResponse::~ResizeStorageResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ResizeStorageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResizeStorageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResizeStorageResponse::ArenaDtor(void* object) {
  ResizeStorageResponse* _this = reinterpret_cast< ResizeStorageResponse* >(object);
  (void)_this;
}
void ResizeStorageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResizeStorageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResizeStorageResponse& ResizeStorageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResizeStorageResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void ResizeStorageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ResizeStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResizeStorageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResizeStorageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ResizeStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ResizeStorageResponse)
  return target;
}

size_t ResizeStorageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ResizeStorageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResizeStorageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.ResizeStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeStorageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResizeStorageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.ResizeStorageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.ResizeStorageResponse)
    MergeFrom(*source);
  }
}

void ResizeStorageResponse::MergeFrom(const ResizeStorageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ResizeStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResizeStorageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.ResizeStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeStorageResponse::CopyFrom(const ResizeStorageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ResizeStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeStorageResponse::IsInitialized() const {
  return true;
}

void ResizeStorageResponse::InternalSwap(ResizeStorageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizeStorageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStoragesRequest::InitAsDefaultInstance() {
}
class GetStoragesRequest::_Internal {
 public:
};

GetStoragesRequest::GetStoragesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetStoragesRequest)
}
GetStoragesRequest::GetStoragesRequest(const GetStoragesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetStoragesRequest)
}

void GetStoragesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStoragesRequest_metaserver_2eproto.base);
}

GetStoragesRequest::~GetStoragesRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetStoragesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStoragesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetStoragesRequest::ArenaDtor(void* object) {
  GetStoragesRequest* _this = reinterpret_cast< GetStoragesRequest* >(object);
  (void)_this;
}
void GetStoragesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStoragesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoragesRequest& GetStoragesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStoragesRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void GetStoragesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetStoragesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStoragesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.GetStoragesRequest.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStoragesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetStoragesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ids = 1;
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.GetStoragesRequest.names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetStoragesRequest)
  return target;
}

size_t GetStoragesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetStoragesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoragesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.GetStoragesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoragesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStoragesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.GetStoragesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.GetStoragesRequest)
    MergeFrom(*source);
  }
}

void GetStoragesRequest::MergeFrom(const GetStoragesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetStoragesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  names_.MergeFrom(from.names_);
}

void GetStoragesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.GetStoragesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoragesRequest::CopyFrom(const GetStoragesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetStoragesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoragesRequest::IsInitialized() const {
  return true;
}

void GetStoragesRequest::InternalSwap(GetStoragesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  names_.InternalSwap(&other->names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoragesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStoragesResponse::InitAsDefaultInstance() {
}
class GetStoragesResponse::_Internal {
 public:
};

GetStoragesResponse::GetStoragesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  storages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetStoragesResponse)
}
GetStoragesResponse::GetStoragesResponse(const GetStoragesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      storages_(from.storages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetStoragesResponse)
}

void GetStoragesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStoragesResponse_metaserver_2eproto.base);
}

GetStoragesResponse::~GetStoragesResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetStoragesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStoragesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetStoragesResponse::ArenaDtor(void* object) {
  GetStoragesResponse* _this = reinterpret_cast< GetStoragesResponse* >(object);
  (void)_this;
}
void GetStoragesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStoragesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStoragesResponse& GetStoragesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStoragesResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void GetStoragesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetStoragesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStoragesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bedrock.metaserver.Storage storages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_storages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStoragesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetStoragesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.Storage storages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_storages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_storages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetStoragesResponse)
  return target;
}

size_t GetStoragesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetStoragesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.Storage storages = 1;
  total_size += 1UL * this->_internal_storages_size();
  for (const auto& msg : this->storages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStoragesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.GetStoragesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStoragesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStoragesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.GetStoragesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.GetStoragesResponse)
    MergeFrom(*source);
  }
}

void GetStoragesResponse::MergeFrom(const GetStoragesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetStoragesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  storages_.MergeFrom(from.storages_);
}

void GetStoragesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.GetStoragesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoragesResponse::CopyFrom(const GetStoragesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetStoragesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoragesResponse::IsInitialized() const {
  return true;
}

void GetStoragesResponse::InternalSwap(GetStoragesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  storages_.InternalSwap(&other->storages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoragesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShardRange::InitAsDefaultInstance() {
}
class ShardRange::_Internal {
 public:
};

ShardRange::ShardRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ShardRange)
}
ShardRange::ShardRange(const ShardRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_shard_id_, &from.start_shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&start_shard_id_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ShardRange)
}

void ShardRange::SharedCtor() {
  ::memset(&start_shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&start_shard_id_)) + sizeof(offset_));
}

ShardRange::~ShardRange() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ShardRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShardRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShardRange::ArenaDtor(void* object) {
  ShardRange* _this = reinterpret_cast< ShardRange* >(object);
  (void)_this;
}
void ShardRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShardRange& ShardRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShardRange_metaserver_2eproto.base);
  return *internal_default_instance();
}


void ShardRange::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ShardRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&start_shard_id_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShardRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ShardRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_shard_id = 1;
  if (this->start_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start_shard_id(), target);
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ShardRange)
  return target;
}

size_t ShardRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ShardRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_shard_id = 1;
  if (this->start_shard_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_shard_id());
  }

  // uint64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShardRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.ShardRange)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShardRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.ShardRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.ShardRange)
    MergeFrom(*source);
  }
}

void ShardRange::MergeFrom(const ShardRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ShardRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_shard_id() != 0) {
    _internal_set_start_shard_id(from._internal_start_shard_id());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void ShardRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.ShardRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardRange::CopyFrom(const ShardRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ShardRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardRange::IsInitialized() const {
  return true;
}

void ShardRange::InternalSwap(ShardRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardRange, offset_)
      + sizeof(ShardRange::offset_)
      - PROTOBUF_FIELD_OFFSET(ShardRange, start_shard_id_)>(
          reinterpret_cast<char*>(&start_shard_id_),
          reinterpret_cast<char*>(&other->start_shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteRecord::InitAsDefaultInstance() {
}
class RouteRecord::_Internal {
 public:
};

RouteRecord::RouteRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addrs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RouteRecord)
}
RouteRecord::RouteRecord(const RouteRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addrs_(from.addrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_addr().empty()) {
    leader_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_addr(),
      GetArena());
  }
  shard_id_ = from.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RouteRecord)
}

void RouteRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteRecord_metaserver_2eproto.base);
  leader_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shard_id_ = PROTOBUF_ULONGLONG(0);
}

RouteRecord::~RouteRecord() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RouteRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteRecord::ArenaDtor(void* object) {
  RouteRecord* _this = reinterpret_cast< RouteRecord* >(object);
  (void)_this;
}
void RouteRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteRecord& RouteRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteRecord_metaserver_2eproto.base);
  return *internal_default_instance();
}


void RouteRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RouteRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrs_.Clear();
  leader_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shard_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leader_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_leader_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.RouteRecord.leader_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string addrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addrs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.RouteRecord.addrs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RouteRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // string leader_addr = 2;
  if (this->leader_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_addr().data(), static_cast<int>(this->_internal_leader_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.RouteRecord.leader_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader_addr(), target);
  }

  // repeated string addrs = 3;
  for (int i = 0, n = this->_internal_addrs_size(); i < n; i++) {
    const auto& s = this->_internal_addrs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.RouteRecord.addrs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RouteRecord)
  return target;
}

size_t RouteRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RouteRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addrs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addrs_.size());
  for (int i = 0, n = addrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addrs_.Get(i));
  }

  // string leader_addr = 2;
  if (this->leader_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_addr());
  }

  // uint64 shard_id = 1;
  if (this->shard_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_shard_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.RouteRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.RouteRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.RouteRecord)
    MergeFrom(*source);
  }
}

void RouteRecord::MergeFrom(const RouteRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RouteRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
  if (from.leader_addr().size() > 0) {
    _internal_set_leader_addr(from._internal_leader_addr());
  }
  if (from.shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
}

void RouteRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.RouteRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteRecord::CopyFrom(const RouteRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RouteRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteRecord::IsInitialized() const {
  return true;
}

void RouteRecord::InternalSwap(RouteRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addrs_.InternalSwap(&other->addrs_);
  leader_addr_.Swap(&other->leader_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(shard_id_, other->shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShardList::InitAsDefaultInstance() {
}
class ShardList::_Internal {
 public:
};

ShardList::ShardList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shard_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ShardList)
}
ShardList::ShardList(const ShardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shard_ids_(from.shard_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ShardList)
}

void ShardList::SharedCtor() {
}

ShardList::~ShardList() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ShardList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShardList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShardList::ArenaDtor(void* object) {
  ShardList* _this = reinterpret_cast< ShardList* >(object);
  (void)_this;
}
void ShardList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShardList& ShardList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShardList_metaserver_2eproto.base);
  return *internal_default_instance();
}


void ShardList::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ShardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 shard_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_shard_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_shard_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShardList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ShardList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 shard_ids = 1;
  {
    int byte_size = _shard_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_shard_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ShardList)
  return target;
}

size_t ShardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ShardList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 shard_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->shard_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shard_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShardList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.ShardList)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShardList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.ShardList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.ShardList)
    MergeFrom(*source);
  }
}

void ShardList::MergeFrom(const ShardList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ShardList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shard_ids_.MergeFrom(from.shard_ids_);
}

void ShardList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.ShardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardList::CopyFrom(const ShardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ShardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardList::IsInitialized() const {
  return true;
}

void ShardList::InternalSwap(ShardList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shard_ids_.InternalSwap(&other->shard_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetShardRoutesRequest::InitAsDefaultInstance() {
  ::bedrock::metaserver::_GetShardRoutesRequest_default_instance_.shards_list_ = const_cast< ::bedrock::metaserver::ShardList*>(
      ::bedrock::metaserver::ShardList::internal_default_instance());
  ::bedrock::metaserver::_GetShardRoutesRequest_default_instance_.shard_range_ = const_cast< ::bedrock::metaserver::ShardRange*>(
      ::bedrock::metaserver::ShardRange::internal_default_instance());
  ::bedrock::metaserver::_GetShardRoutesRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetShardRoutesRequest::_Internal {
 public:
  static const ::bedrock::metaserver::ShardList& shards_list(const GetShardRoutesRequest* msg);
  static const ::bedrock::metaserver::ShardRange& shard_range(const GetShardRoutesRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetShardRoutesRequest* msg);
};

const ::bedrock::metaserver::ShardList&
GetShardRoutesRequest::_Internal::shards_list(const GetShardRoutesRequest* msg) {
  return *msg->shards_.shards_list_;
}
const ::bedrock::metaserver::ShardRange&
GetShardRoutesRequest::_Internal::shard_range(const GetShardRoutesRequest* msg) {
  return *msg->shards_.shard_range_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetShardRoutesRequest::_Internal::timestamp(const GetShardRoutesRequest* msg) {
  return *msg->timestamp_;
}
void GetShardRoutesRequest::set_allocated_shards_list(::bedrock::metaserver::ShardList* shards_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shards();
  if (shards_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shards_list);
    if (message_arena != submessage_arena) {
      shards_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shards_list, submessage_arena);
    }
    set_has_shards_list();
    shards_.shards_list_ = shards_list;
  }
  // @@protoc_insertion_point(field_set_allocated:bedrock.metaserver.GetShardRoutesRequest.shards_list)
}
void GetShardRoutesRequest::set_allocated_shard_range(::bedrock::metaserver::ShardRange* shard_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_shards();
  if (shard_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shard_range);
    if (message_arena != submessage_arena) {
      shard_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shard_range, submessage_arena);
    }
    set_has_shard_range();
    shards_.shard_range_ = shard_range;
  }
  // @@protoc_insertion_point(field_set_allocated:bedrock.metaserver.GetShardRoutesRequest.shard_range)
}
void GetShardRoutesRequest::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
GetShardRoutesRequest::GetShardRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardRoutesRequest)
}
GetShardRoutesRequest::GetShardRoutesRequest(const GetShardRoutesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  clear_has_shards();
  switch (from.shards_case()) {
    case kShardsList: {
      _internal_mutable_shards_list()->::bedrock::metaserver::ShardList::MergeFrom(from._internal_shards_list());
      break;
    }
    case kShardRange: {
      _internal_mutable_shard_range()->::bedrock::metaserver::ShardRange::MergeFrom(from._internal_shard_range());
      break;
    }
    case SHARDS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardRoutesRequest)
}

void GetShardRoutesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetShardRoutesRequest_metaserver_2eproto.base);
  timestamp_ = nullptr;
  clear_has_shards();
}

GetShardRoutesRequest::~GetShardRoutesRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardRoutesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetShardRoutesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (has_shards()) {
    clear_shards();
  }
}

void GetShardRoutesRequest::ArenaDtor(void* object) {
  GetShardRoutesRequest* _this = reinterpret_cast< GetShardRoutesRequest* >(object);
  (void)_this;
}
void GetShardRoutesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardRoutesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetShardRoutesRequest& GetShardRoutesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetShardRoutesRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void GetShardRoutesRequest::clear_shards() {
// @@protoc_insertion_point(one_of_clear_start:bedrock.metaserver.GetShardRoutesRequest)
  switch (shards_case()) {
    case kShardsList: {
      if (GetArena() == nullptr) {
        delete shards_.shards_list_;
      }
      break;
    }
    case kShardRange: {
      if (GetArena() == nullptr) {
        delete shards_.shard_range_;
      }
      break;
    }
    case SHARDS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SHARDS_NOT_SET;
}


void GetShardRoutesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  clear_shards();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardRoutesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.metaserver.ShardList shards_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shards_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bedrock.metaserver.ShardRange shard_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetShardRoutesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.metaserver.ShardList shards_list = 1;
  if (_internal_has_shards_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shards_list(this), target, stream);
  }

  // .bedrock.metaserver.ShardRange shard_range = 2;
  if (_internal_has_shard_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shard_range(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardRoutesRequest)
  return target;
}

size_t GetShardRoutesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardRoutesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  switch (shards_case()) {
    // .bedrock.metaserver.ShardList shards_list = 1;
    case kShardsList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shards_.shards_list_);
      break;
    }
    // .bedrock.metaserver.ShardRange shard_range = 2;
    case kShardRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shards_.shard_range_);
      break;
    }
    case SHARDS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetShardRoutesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.GetShardRoutesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShardRoutesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetShardRoutesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.GetShardRoutesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.GetShardRoutesRequest)
    MergeFrom(*source);
  }
}

void GetShardRoutesRequest::MergeFrom(const GetShardRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardRoutesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  switch (from.shards_case()) {
    case kShardsList: {
      _internal_mutable_shards_list()->::bedrock::metaserver::ShardList::MergeFrom(from._internal_shards_list());
      break;
    }
    case kShardRange: {
      _internal_mutable_shard_range()->::bedrock::metaserver::ShardRange::MergeFrom(from._internal_shard_range());
      break;
    }
    case SHARDS_NOT_SET: {
      break;
    }
  }
}

void GetShardRoutesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.GetShardRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShardRoutesRequest::CopyFrom(const GetShardRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardRoutesRequest::IsInitialized() const {
  return true;
}

void GetShardRoutesRequest::InternalSwap(GetShardRoutesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(shards_, other->shards_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardRoutesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetShardRoutesResponse::InitAsDefaultInstance() {
}
class GetShardRoutesResponse::_Internal {
 public:
};

GetShardRoutesResponse::GetShardRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardRoutesResponse)
}
GetShardRoutesResponse::GetShardRoutesResponse(const GetShardRoutesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardRoutesResponse)
}

void GetShardRoutesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetShardRoutesResponse_metaserver_2eproto.base);
}

GetShardRoutesResponse::~GetShardRoutesResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardRoutesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetShardRoutesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetShardRoutesResponse::ArenaDtor(void* object) {
  GetShardRoutesResponse* _this = reinterpret_cast< GetShardRoutesResponse* >(object);
  (void)_this;
}
void GetShardRoutesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardRoutesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetShardRoutesResponse& GetShardRoutesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetShardRoutesResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void GetShardRoutesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardRoutesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bedrock.metaserver.RouteRecord routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetShardRoutesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.RouteRecord routes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardRoutesResponse)
  return target;
}

size_t GetShardRoutesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardRoutesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.RouteRecord routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetShardRoutesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.GetShardRoutesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShardRoutesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetShardRoutesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.GetShardRoutesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.GetShardRoutesResponse)
    MergeFrom(*source);
  }
}

void GetShardRoutesResponse::MergeFrom(const GetShardRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardRoutesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
}

void GetShardRoutesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.GetShardRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShardRoutesResponse::CopyFrom(const GetShardRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardRoutesResponse::IsInitialized() const {
  return true;
}

void GetShardRoutesResponse::InternalSwap(GetShardRoutesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardRoutesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetShardRoutesByStorageRequest::InitAsDefaultInstance() {
  ::bedrock::metaserver::_GetShardRoutesByStorageRequest_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetShardRoutesByStorageRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetShardRoutesByStorageRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetShardRoutesByStorageRequest::_Internal::timestamp(const GetShardRoutesByStorageRequest* msg) {
  return *msg->timestamp_;
}
void GetShardRoutesByStorageRequest::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
GetShardRoutesByStorageRequest::GetShardRoutesByStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardRoutesByStorageRequest)
}
GetShardRoutesByStorageRequest::GetShardRoutesByStorageRequest(const GetShardRoutesByStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardRoutesByStorageRequest)
}

void GetShardRoutesByStorageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetShardRoutesByStorageRequest_metaserver_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(storage_id_));
}

GetShardRoutesByStorageRequest::~GetShardRoutesByStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardRoutesByStorageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetShardRoutesByStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void GetShardRoutesByStorageRequest::ArenaDtor(void* object) {
  GetShardRoutesByStorageRequest* _this = reinterpret_cast< GetShardRoutesByStorageRequest* >(object);
  (void)_this;
}
void GetShardRoutesByStorageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardRoutesByStorageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetShardRoutesByStorageRequest& GetShardRoutesByStorageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetShardRoutesByStorageRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void GetShardRoutesByStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardRoutesByStorageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetShardRoutesByStorageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardRoutesByStorageRequest)
  return target;
}

size_t GetShardRoutesByStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetShardRoutesByStorageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShardRoutesByStorageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetShardRoutesByStorageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.GetShardRoutesByStorageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.GetShardRoutesByStorageRequest)
    MergeFrom(*source);
  }
}

void GetShardRoutesByStorageRequest::MergeFrom(const GetShardRoutesByStorageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void GetShardRoutesByStorageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShardRoutesByStorageRequest::CopyFrom(const GetShardRoutesByStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardRoutesByStorageRequest::IsInitialized() const {
  return true;
}

void GetShardRoutesByStorageRequest::InternalSwap(GetShardRoutesByStorageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetShardRoutesByStorageRequest, storage_id_)
      + sizeof(GetShardRoutesByStorageRequest::storage_id_)
      - PROTOBUF_FIELD_OFFSET(GetShardRoutesByStorageRequest, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardRoutesByStorageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetShardRoutesByStorageResponse::InitAsDefaultInstance() {
  ::bedrock::metaserver::_GetShardRoutesByStorageResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetShardRoutesByStorageResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetShardRoutesByStorageResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetShardRoutesByStorageResponse::_Internal::timestamp(const GetShardRoutesByStorageResponse* msg) {
  return *msg->timestamp_;
}
void GetShardRoutesByStorageResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
GetShardRoutesByStorageResponse::GetShardRoutesByStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardRoutesByStorageResponse)
}
GetShardRoutesByStorageResponse::GetShardRoutesByStorageResponse(const GetShardRoutesByStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  is_full_ = from.is_full_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardRoutesByStorageResponse)
}

void GetShardRoutesByStorageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetShardRoutesByStorageResponse_metaserver_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(is_full_));
}

GetShardRoutesByStorageResponse::~GetShardRoutesByStorageResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardRoutesByStorageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetShardRoutesByStorageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void GetShardRoutesByStorageResponse::ArenaDtor(void* object) {
  GetShardRoutesByStorageResponse* _this = reinterpret_cast< GetShardRoutesByStorageResponse* >(object);
  (void)_this;
}
void GetShardRoutesByStorageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardRoutesByStorageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetShardRoutesByStorageResponse& GetShardRoutesByStorageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetShardRoutesByStorageResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void GetShardRoutesByStorageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  is_full_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardRoutesByStorageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bedrock.metaserver.RouteRecord routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_full = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetShardRoutesByStorageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.RouteRecord routes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routes(i), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // bool is_full = 3;
  if (this->is_full() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_full(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardRoutesByStorageResponse)
  return target;
}

size_t GetShardRoutesByStorageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.RouteRecord routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool is_full = 3;
  if (this->is_full() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetShardRoutesByStorageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShardRoutesByStorageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetShardRoutesByStorageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.GetShardRoutesByStorageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.GetShardRoutesByStorageResponse)
    MergeFrom(*source);
  }
}

void GetShardRoutesByStorageResponse::MergeFrom(const GetShardRoutesByStorageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.is_full() != 0) {
    _internal_set_is_full(from._internal_is_full());
  }
}

void GetShardRoutesByStorageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShardRoutesByStorageResponse::CopyFrom(const GetShardRoutesByStorageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardRoutesByStorageResponse::IsInitialized() const {
  return true;
}

void GetShardRoutesByStorageResponse::InternalSwap(GetShardRoutesByStorageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetShardRoutesByStorageResponse, is_full_)
      + sizeof(GetShardRoutesByStorageResponse::is_full_)
      - PROTOBUF_FIELD_OFFSET(GetShardRoutesByStorageResponse, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardRoutesByStorageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddDataServerRequest::InitAsDefaultInstance() {
}
class AddDataServerRequest::_Internal {
 public:
};

AddDataServerRequest::AddDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.AddDataServerRequest)
}
AddDataServerRequest::AddDataServerRequest(const AddDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.AddDataServerRequest)
}

void AddDataServerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDataServerRequest_metaserver_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddDataServerRequest::~AddDataServerRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.AddDataServerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddDataServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddDataServerRequest::ArenaDtor(void* object) {
  AddDataServerRequest* _this = reinterpret_cast< AddDataServerRequest* >(object);
  (void)_this;
}
void AddDataServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDataServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDataServerRequest& AddDataServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDataServerRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void AddDataServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.AddDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDataServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.AddDataServerRequest.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDataServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.AddDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.AddDataServerRequest.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.AddDataServerRequest)
  return target;
}

size_t AddDataServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.AddDataServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDataServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.AddDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDataServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDataServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.AddDataServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.AddDataServerRequest)
    MergeFrom(*source);
  }
}

void AddDataServerRequest::MergeFrom(const AddDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.AddDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
}

void AddDataServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.AddDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDataServerRequest::CopyFrom(const AddDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.AddDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDataServerRequest::IsInitialized() const {
  return true;
}

void AddDataServerRequest::InternalSwap(AddDataServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDataServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddDataServerResponse::InitAsDefaultInstance() {
}
class AddDataServerResponse::_Internal {
 public:
};

AddDataServerResponse::AddDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.AddDataServerResponse)
}
AddDataServerResponse::AddDataServerResponse(const AddDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.AddDataServerResponse)
}

void AddDataServerResponse::SharedCtor() {
}

AddDataServerResponse::~AddDataServerResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.AddDataServerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddDataServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddDataServerResponse::ArenaDtor(void* object) {
  AddDataServerResponse* _this = reinterpret_cast< AddDataServerResponse* >(object);
  (void)_this;
}
void AddDataServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDataServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDataServerResponse& AddDataServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDataServerResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void AddDataServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.AddDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDataServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDataServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.AddDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.AddDataServerResponse)
  return target;
}

size_t AddDataServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.AddDataServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDataServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.AddDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDataServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDataServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.AddDataServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.AddDataServerResponse)
    MergeFrom(*source);
  }
}

void AddDataServerResponse::MergeFrom(const AddDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.AddDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddDataServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.AddDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDataServerResponse::CopyFrom(const AddDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.AddDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDataServerResponse::IsInitialized() const {
  return true;
}

void AddDataServerResponse::InternalSwap(AddDataServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDataServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveDataServerRequest::InitAsDefaultInstance() {
}
class RemoveDataServerRequest::_Internal {
 public:
};

RemoveDataServerRequest::RemoveDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RemoveDataServerRequest)
}
RemoveDataServerRequest::RemoveDataServerRequest(const RemoveDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RemoveDataServerRequest)
}

void RemoveDataServerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveDataServerRequest_metaserver_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveDataServerRequest::~RemoveDataServerRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RemoveDataServerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveDataServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveDataServerRequest::ArenaDtor(void* object) {
  RemoveDataServerRequest* _this = reinterpret_cast< RemoveDataServerRequest* >(object);
  (void)_this;
}
void RemoveDataServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveDataServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveDataServerRequest& RemoveDataServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveDataServerRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void RemoveDataServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RemoveDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDataServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.RemoveDataServerRequest.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveDataServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RemoveDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.RemoveDataServerRequest.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RemoveDataServerRequest)
  return target;
}

size_t RemoveDataServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RemoveDataServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveDataServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.RemoveDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveDataServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveDataServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.RemoveDataServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.RemoveDataServerRequest)
    MergeFrom(*source);
  }
}

void RemoveDataServerRequest::MergeFrom(const RemoveDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RemoveDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
}

void RemoveDataServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.RemoveDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDataServerRequest::CopyFrom(const RemoveDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RemoveDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDataServerRequest::IsInitialized() const {
  return true;
}

void RemoveDataServerRequest::InternalSwap(RemoveDataServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDataServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveDataServerResponse::InitAsDefaultInstance() {
}
class RemoveDataServerResponse::_Internal {
 public:
};

RemoveDataServerResponse::RemoveDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RemoveDataServerResponse)
}
RemoveDataServerResponse::RemoveDataServerResponse(const RemoveDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RemoveDataServerResponse)
}

void RemoveDataServerResponse::SharedCtor() {
}

RemoveDataServerResponse::~RemoveDataServerResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RemoveDataServerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveDataServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveDataServerResponse::ArenaDtor(void* object) {
  RemoveDataServerResponse* _this = reinterpret_cast< RemoveDataServerResponse* >(object);
  (void)_this;
}
void RemoveDataServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveDataServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveDataServerResponse& RemoveDataServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveDataServerResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void RemoveDataServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RemoveDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDataServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveDataServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RemoveDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RemoveDataServerResponse)
  return target;
}

size_t RemoveDataServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RemoveDataServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveDataServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.RemoveDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveDataServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveDataServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.RemoveDataServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.RemoveDataServerResponse)
    MergeFrom(*source);
  }
}

void RemoveDataServerResponse::MergeFrom(const RemoveDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RemoveDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveDataServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.RemoveDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDataServerResponse::CopyFrom(const RemoveDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RemoveDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDataServerResponse::IsInitialized() const {
  return true;
}

void RemoveDataServerResponse::InternalSwap(RemoveDataServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDataServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDataServerRequest::InitAsDefaultInstance() {
}
class ListDataServerRequest::_Internal {
 public:
};

ListDataServerRequest::ListDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ListDataServerRequest)
}
ListDataServerRequest::ListDataServerRequest(const ListDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ListDataServerRequest)
}

void ListDataServerRequest::SharedCtor() {
}

ListDataServerRequest::~ListDataServerRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ListDataServerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDataServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListDataServerRequest::ArenaDtor(void* object) {
  ListDataServerRequest* _this = reinterpret_cast< ListDataServerRequest* >(object);
  (void)_this;
}
void ListDataServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDataServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDataServerRequest& ListDataServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDataServerRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void ListDataServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ListDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDataServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDataServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ListDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ListDataServerRequest)
  return target;
}

size_t ListDataServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ListDataServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDataServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.ListDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDataServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDataServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.ListDataServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.ListDataServerRequest)
    MergeFrom(*source);
  }
}

void ListDataServerRequest::MergeFrom(const ListDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ListDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListDataServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.ListDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDataServerRequest::CopyFrom(const ListDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ListDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDataServerRequest::IsInitialized() const {
  return true;
}

void ListDataServerRequest::InternalSwap(ListDataServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDataServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListDataServerResponse::InitAsDefaultInstance() {
}
class ListDataServerResponse::_Internal {
 public:
};

ListDataServerResponse::ListDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ListDataServerResponse)
}
ListDataServerResponse::ListDataServerResponse(const ListDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_servers_(from.data_servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ListDataServerResponse)
}

void ListDataServerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListDataServerResponse_metaserver_2eproto.base);
}

ListDataServerResponse::~ListDataServerResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ListDataServerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListDataServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListDataServerResponse::ArenaDtor(void* object) {
  ListDataServerResponse* _this = reinterpret_cast< ListDataServerResponse* >(object);
  (void)_this;
}
void ListDataServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDataServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListDataServerResponse& ListDataServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListDataServerResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void ListDataServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ListDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_servers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDataServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bedrock.metaserver.DataServer data_servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListDataServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ListDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.DataServer data_servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ListDataServerResponse)
  return target;
}

size_t ListDataServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ListDataServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.DataServer data_servers = 1;
  total_size += 1UL * this->_internal_data_servers_size();
  for (const auto& msg : this->data_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListDataServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.ListDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListDataServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListDataServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.ListDataServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.ListDataServerResponse)
    MergeFrom(*source);
  }
}

void ListDataServerResponse::MergeFrom(const ListDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ListDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_servers_.MergeFrom(from.data_servers_);
}

void ListDataServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.ListDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListDataServerResponse::CopyFrom(const ListDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ListDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDataServerResponse::IsInitialized() const {
  return true;
}

void ListDataServerResponse::InternalSwap(ListDataServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_servers_.InternalSwap(&other->data_servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDataServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDataServerRequest::InitAsDefaultInstance() {
}
class UpdateDataServerRequest::_Internal {
 public:
};

UpdateDataServerRequest::UpdateDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.UpdateDataServerRequest)
}
UpdateDataServerRequest::UpdateDataServerRequest(const UpdateDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.UpdateDataServerRequest)
}

void UpdateDataServerRequest::SharedCtor() {
}

UpdateDataServerRequest::~UpdateDataServerRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.UpdateDataServerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDataServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateDataServerRequest::ArenaDtor(void* object) {
  UpdateDataServerRequest* _this = reinterpret_cast< UpdateDataServerRequest* >(object);
  (void)_this;
}
void UpdateDataServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDataServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDataServerRequest& UpdateDataServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDataServerRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void UpdateDataServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.UpdateDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDataServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDataServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.UpdateDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.UpdateDataServerRequest)
  return target;
}

size_t UpdateDataServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.UpdateDataServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDataServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.UpdateDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDataServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDataServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.UpdateDataServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.UpdateDataServerRequest)
    MergeFrom(*source);
  }
}

void UpdateDataServerRequest::MergeFrom(const UpdateDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.UpdateDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateDataServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.UpdateDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDataServerRequest::CopyFrom(const UpdateDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.UpdateDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDataServerRequest::IsInitialized() const {
  return true;
}

void UpdateDataServerRequest::InternalSwap(UpdateDataServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDataServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateDataServerResponse::InitAsDefaultInstance() {
}
class UpdateDataServerResponse::_Internal {
 public:
};

UpdateDataServerResponse::UpdateDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.UpdateDataServerResponse)
}
UpdateDataServerResponse::UpdateDataServerResponse(const UpdateDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.UpdateDataServerResponse)
}

void UpdateDataServerResponse::SharedCtor() {
}

UpdateDataServerResponse::~UpdateDataServerResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.UpdateDataServerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateDataServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateDataServerResponse::ArenaDtor(void* object) {
  UpdateDataServerResponse* _this = reinterpret_cast< UpdateDataServerResponse* >(object);
  (void)_this;
}
void UpdateDataServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDataServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateDataServerResponse& UpdateDataServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateDataServerResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void UpdateDataServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.UpdateDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDataServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateDataServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.UpdateDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.UpdateDataServerResponse)
  return target;
}

size_t UpdateDataServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.UpdateDataServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDataServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.UpdateDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateDataServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateDataServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.UpdateDataServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.UpdateDataServerResponse)
    MergeFrom(*source);
  }
}

void UpdateDataServerResponse::MergeFrom(const UpdateDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.UpdateDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateDataServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.UpdateDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDataServerResponse::CopyFrom(const UpdateDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.UpdateDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDataServerResponse::IsInitialized() const {
  return true;
}

void UpdateDataServerResponse::InternalSwap(UpdateDataServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDataServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShardInfoRequest::InitAsDefaultInstance() {
}
class ShardInfoRequest::_Internal {
 public:
};

ShardInfoRequest::ShardInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ShardInfoRequest)
}
ShardInfoRequest::ShardInfoRequest(const ShardInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ShardInfoRequest)
}

void ShardInfoRequest::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

ShardInfoRequest::~ShardInfoRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ShardInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShardInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShardInfoRequest::ArenaDtor(void* object) {
  ShardInfoRequest* _this = reinterpret_cast< ShardInfoRequest* >(object);
  (void)_this;
}
void ShardInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShardInfoRequest& ShardInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShardInfoRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void ShardInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ShardInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShardInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ShardInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ShardInfoRequest)
  return target;
}

size_t ShardInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ShardInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShardInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.ShardInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShardInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.ShardInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.ShardInfoRequest)
    MergeFrom(*source);
  }
}

void ShardInfoRequest::MergeFrom(const ShardInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ShardInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ShardInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.ShardInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardInfoRequest::CopyFrom(const ShardInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ShardInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfoRequest::IsInitialized() const {
  return true;
}

void ShardInfoRequest::InternalSwap(ShardInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShardInfoResponse::InitAsDefaultInstance() {
  ::bedrock::metaserver::_ShardInfoResponse_default_instance_._instance.get_mutable()->shard_ = const_cast< ::bedrock::metaserver::Shard*>(
      ::bedrock::metaserver::Shard::internal_default_instance());
}
class ShardInfoResponse::_Internal {
 public:
  static const ::bedrock::metaserver::Shard& shard(const ShardInfoResponse* msg);
};

const ::bedrock::metaserver::Shard&
ShardInfoResponse::_Internal::shard(const ShardInfoResponse* msg) {
  return *msg->shard_;
}
ShardInfoResponse::ShardInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ShardInfoResponse)
}
ShardInfoResponse::ShardInfoResponse(const ShardInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shard()) {
    shard_ = new ::bedrock::metaserver::Shard(*from.shard_);
  } else {
    shard_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ShardInfoResponse)
}

void ShardInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShardInfoResponse_metaserver_2eproto.base);
  shard_ = nullptr;
}

ShardInfoResponse::~ShardInfoResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ShardInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShardInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shard_;
}

void ShardInfoResponse::ArenaDtor(void* object) {
  ShardInfoResponse* _this = reinterpret_cast< ShardInfoResponse* >(object);
  (void)_this;
}
void ShardInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShardInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShardInfoResponse& ShardInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShardInfoResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void ShardInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ShardInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shard_ != nullptr) {
    delete shard_;
  }
  shard_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.metaserver.Shard shard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShardInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ShardInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.metaserver.Shard shard = 1;
  if (this->has_shard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shard(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ShardInfoResponse)
  return target;
}

size_t ShardInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ShardInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.metaserver.Shard shard = 1;
  if (this->has_shard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shard_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShardInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.ShardInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShardInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShardInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.ShardInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.ShardInfoResponse)
    MergeFrom(*source);
  }
}

void ShardInfoResponse::MergeFrom(const ShardInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ShardInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shard()) {
    _internal_mutable_shard()->::bedrock::metaserver::Shard::MergeFrom(from._internal_shard());
  }
}

void ShardInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.ShardInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardInfoResponse::CopyFrom(const ShardInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ShardInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfoResponse::IsInitialized() const {
  return true;
}

void ShardInfoResponse::InternalSwap(ShardInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(shard_, other->shard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetShardIDByKeyRequest::InitAsDefaultInstance() {
}
class GetShardIDByKeyRequest::_Internal {
 public:
};

GetShardIDByKeyRequest::GetShardIDByKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardIDByKeyRequest)
}
GetShardIDByKeyRequest::GetShardIDByKeyRequest(const GetShardIDByKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardIDByKeyRequest)
}

void GetShardIDByKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetShardIDByKeyRequest_metaserver_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_id_ = 0u;
}

GetShardIDByKeyRequest::~GetShardIDByKeyRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardIDByKeyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetShardIDByKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetShardIDByKeyRequest::ArenaDtor(void* object) {
  GetShardIDByKeyRequest* _this = reinterpret_cast< GetShardIDByKeyRequest* >(object);
  (void)_this;
}
void GetShardIDByKeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardIDByKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetShardIDByKeyRequest& GetShardIDByKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetShardIDByKeyRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void GetShardIDByKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardIDByKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardIDByKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetShardIDByKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardIDByKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardIDByKeyRequest)
  return target;
}

size_t GetShardIDByKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardIDByKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetShardIDByKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.GetShardIDByKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShardIDByKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetShardIDByKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.GetShardIDByKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.GetShardIDByKeyRequest)
    MergeFrom(*source);
  }
}

void GetShardIDByKeyRequest::MergeFrom(const GetShardIDByKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardIDByKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void GetShardIDByKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.GetShardIDByKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShardIDByKeyRequest::CopyFrom(const GetShardIDByKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardIDByKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardIDByKeyRequest::IsInitialized() const {
  return true;
}

void GetShardIDByKeyRequest::InternalSwap(GetShardIDByKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(storage_id_, other->storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardIDByKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetShardIDByKeyResponse::InitAsDefaultInstance() {
}
class GetShardIDByKeyResponse::_Internal {
 public:
};

GetShardIDByKeyResponse::GetShardIDByKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardIDByKeyResponse)
}
GetShardIDByKeyResponse::GetShardIDByKeyResponse(const GetShardIDByKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shard_id_ = from.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardIDByKeyResponse)
}

void GetShardIDByKeyResponse::SharedCtor() {
  shard_id_ = PROTOBUF_ULONGLONG(0);
}

GetShardIDByKeyResponse::~GetShardIDByKeyResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardIDByKeyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetShardIDByKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetShardIDByKeyResponse::ArenaDtor(void* object) {
  GetShardIDByKeyResponse* _this = reinterpret_cast< GetShardIDByKeyResponse* >(object);
  (void)_this;
}
void GetShardIDByKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetShardIDByKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetShardIDByKeyResponse& GetShardIDByKeyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetShardIDByKeyResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void GetShardIDByKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardIDByKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shard_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardIDByKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetShardIDByKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardIDByKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardIDByKeyResponse)
  return target;
}

size_t GetShardIDByKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardIDByKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->shard_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_shard_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetShardIDByKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.GetShardIDByKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetShardIDByKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetShardIDByKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.GetShardIDByKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.GetShardIDByKeyResponse)
    MergeFrom(*source);
  }
}

void GetShardIDByKeyResponse::MergeFrom(const GetShardIDByKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardIDByKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
}

void GetShardIDByKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.GetShardIDByKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShardIDByKeyResponse::CopyFrom(const GetShardIDByKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardIDByKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardIDByKeyResponse::IsInitialized() const {
  return true;
}

void GetShardIDByKeyResponse::InternalSwap(GetShardIDByKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(shard_id_, other->shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardIDByKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncShardInDataServerRequest_SyncShardInfo::InitAsDefaultInstance() {
  ::bedrock::metaserver::_SyncShardInDataServerRequest_SyncShardInfo_default_instance_._instance.get_mutable()->replica_update_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bedrock::metaserver::_SyncShardInDataServerRequest_SyncShardInfo_default_instance_._instance.get_mutable()->create_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bedrock::metaserver::_SyncShardInDataServerRequest_SyncShardInfo_default_instance_._instance.get_mutable()->leader_change_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SyncShardInDataServerRequest_SyncShardInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& replica_update_ts(const SyncShardInDataServerRequest_SyncShardInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_ts(const SyncShardInDataServerRequest_SyncShardInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts(const SyncShardInDataServerRequest_SyncShardInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SyncShardInDataServerRequest_SyncShardInfo::_Internal::replica_update_ts(const SyncShardInDataServerRequest_SyncShardInfo* msg) {
  return *msg->replica_update_ts_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SyncShardInDataServerRequest_SyncShardInfo::_Internal::create_ts(const SyncShardInDataServerRequest_SyncShardInfo* msg) {
  return *msg->create_ts_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SyncShardInDataServerRequest_SyncShardInfo::_Internal::leader_change_ts(const SyncShardInDataServerRequest_SyncShardInfo* msg) {
  return *msg->leader_change_ts_;
}
void SyncShardInDataServerRequest_SyncShardInfo::clear_replica_update_ts() {
  if (GetArena() == nullptr && replica_update_ts_ != nullptr) {
    delete replica_update_ts_;
  }
  replica_update_ts_ = nullptr;
}
void SyncShardInDataServerRequest_SyncShardInfo::clear_create_ts() {
  if (GetArena() == nullptr && create_ts_ != nullptr) {
    delete create_ts_;
  }
  create_ts_ = nullptr;
}
void SyncShardInDataServerRequest_SyncShardInfo::clear_leader_change_ts() {
  if (GetArena() == nullptr && leader_change_ts_ != nullptr) {
    delete leader_change_ts_;
  }
  leader_change_ts_ = nullptr;
}
SyncShardInDataServerRequest_SyncShardInfo::SyncShardInDataServerRequest_SyncShardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
}
SyncShardInDataServerRequest_SyncShardInfo::SyncShardInDataServerRequest_SyncShardInfo(const SyncShardInDataServerRequest_SyncShardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader().empty()) {
    leader_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader(),
      GetArena());
  }
  if (from._internal_has_replica_update_ts()) {
    replica_update_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.replica_update_ts_);
  } else {
    replica_update_ts_ = nullptr;
  }
  if (from._internal_has_create_ts()) {
    create_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_ts_);
  } else {
    create_ts_ = nullptr;
  }
  if (from._internal_has_leader_change_ts()) {
    leader_change_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.leader_change_ts_);
  } else {
    leader_change_ts_ = nullptr;
  }
  shard_id_ = from.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
}

void SyncShardInDataServerRequest_SyncShardInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncShardInDataServerRequest_SyncShardInfo_metaserver_2eproto.base);
  leader_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&replica_update_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_id_) -
      reinterpret_cast<char*>(&replica_update_ts_)) + sizeof(shard_id_));
}

SyncShardInDataServerRequest_SyncShardInfo::~SyncShardInDataServerRequest_SyncShardInfo() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncShardInDataServerRequest_SyncShardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  leader_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete replica_update_ts_;
  if (this != internal_default_instance()) delete create_ts_;
  if (this != internal_default_instance()) delete leader_change_ts_;
}

void SyncShardInDataServerRequest_SyncShardInfo::ArenaDtor(void* object) {
  SyncShardInDataServerRequest_SyncShardInfo* _this = reinterpret_cast< SyncShardInDataServerRequest_SyncShardInfo* >(object);
  (void)_this;
}
void SyncShardInDataServerRequest_SyncShardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncShardInDataServerRequest_SyncShardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncShardInDataServerRequest_SyncShardInfo& SyncShardInDataServerRequest_SyncShardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncShardInDataServerRequest_SyncShardInfo_metaserver_2eproto.base);
  return *internal_default_instance();
}


void SyncShardInDataServerRequest_SyncShardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && replica_update_ts_ != nullptr) {
    delete replica_update_ts_;
  }
  replica_update_ts_ = nullptr;
  if (GetArena() == nullptr && create_ts_ != nullptr) {
    delete create_ts_;
  }
  create_ts_ = nullptr;
  if (GetArena() == nullptr && leader_change_ts_ != nullptr) {
    delete leader_change_ts_;
  }
  leader_change_ts_ = nullptr;
  shard_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncShardInDataServerRequest_SyncShardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp replica_update_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replica_update_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_leader();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo.leader"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp leader_change_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_change_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncShardInDataServerRequest_SyncShardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // .google.protobuf.Timestamp replica_update_ts = 2;
  if (this->has_replica_update_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::replica_update_ts(this), target, stream);
  }

  // .google.protobuf.Timestamp create_ts = 3;
  if (this->has_create_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::create_ts(this), target, stream);
  }

  // string leader = 4;
  if (this->leader().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo.leader");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_leader(), target);
  }

  // .google.protobuf.Timestamp leader_change_ts = 5;
  if (this->has_leader_change_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::leader_change_ts(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  return target;
}

size_t SyncShardInDataServerRequest_SyncShardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string leader = 4;
  if (this->leader().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader());
  }

  // .google.protobuf.Timestamp replica_update_ts = 2;
  if (this->has_replica_update_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replica_update_ts_);
  }

  // .google.protobuf.Timestamp create_ts = 3;
  if (this->has_create_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_ts_);
  }

  // .google.protobuf.Timestamp leader_change_ts = 5;
  if (this->has_leader_change_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leader_change_ts_);
  }

  // uint64 shard_id = 1;
  if (this->shard_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_shard_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncShardInDataServerRequest_SyncShardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncShardInDataServerRequest_SyncShardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncShardInDataServerRequest_SyncShardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
    MergeFrom(*source);
  }
}

void SyncShardInDataServerRequest_SyncShardInfo::MergeFrom(const SyncShardInDataServerRequest_SyncShardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader().size() > 0) {
    _internal_set_leader(from._internal_leader());
  }
  if (from.has_replica_update_ts()) {
    _internal_mutable_replica_update_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_replica_update_ts());
  }
  if (from.has_create_ts()) {
    _internal_mutable_create_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_ts());
  }
  if (from.has_leader_change_ts()) {
    _internal_mutable_leader_change_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_leader_change_ts());
  }
  if (from.shard_id() != 0) {
    _internal_set_shard_id(from._internal_shard_id());
  }
}

void SyncShardInDataServerRequest_SyncShardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncShardInDataServerRequest_SyncShardInfo::CopyFrom(const SyncShardInDataServerRequest_SyncShardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncShardInDataServerRequest_SyncShardInfo::IsInitialized() const {
  return true;
}

void SyncShardInDataServerRequest_SyncShardInfo::InternalSwap(SyncShardInDataServerRequest_SyncShardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leader_.Swap(&other->leader_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncShardInDataServerRequest_SyncShardInfo, shard_id_)
      + sizeof(SyncShardInDataServerRequest_SyncShardInfo::shard_id_)
      - PROTOBUF_FIELD_OFFSET(SyncShardInDataServerRequest_SyncShardInfo, replica_update_ts_)>(
          reinterpret_cast<char*>(&replica_update_ts_),
          reinterpret_cast<char*>(&other->replica_update_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncShardInDataServerRequest_SyncShardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncShardInDataServerRequest::InitAsDefaultInstance() {
  ::bedrock::metaserver::_SyncShardInDataServerRequest_default_instance_._instance.get_mutable()->sync_ts_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SyncShardInDataServerRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sync_ts(const SyncShardInDataServerRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SyncShardInDataServerRequest::_Internal::sync_ts(const SyncShardInDataServerRequest* msg) {
  return *msg->sync_ts_;
}
void SyncShardInDataServerRequest::clear_sync_ts() {
  if (GetArena() == nullptr && sync_ts_ != nullptr) {
    delete sync_ts_;
  }
  sync_ts_ = nullptr;
}
SyncShardInDataServerRequest::SyncShardInDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.SyncShardInDataServerRequest)
}
SyncShardInDataServerRequest::SyncShardInDataServerRequest(const SyncShardInDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shards_(from.shards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dataserver_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dataserver_addr().empty()) {
    dataserver_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataserver_addr(),
      GetArena());
  }
  if (from._internal_has_sync_ts()) {
    sync_ts_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sync_ts_);
  } else {
    sync_ts_ = nullptr;
  }
  is_last_piece_ = from.is_last_piece_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.SyncShardInDataServerRequest)
}

void SyncShardInDataServerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncShardInDataServerRequest_metaserver_2eproto.base);
  dataserver_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sync_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_piece_) -
      reinterpret_cast<char*>(&sync_ts_)) + sizeof(is_last_piece_));
}

SyncShardInDataServerRequest::~SyncShardInDataServerRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.SyncShardInDataServerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncShardInDataServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dataserver_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sync_ts_;
}

void SyncShardInDataServerRequest::ArenaDtor(void* object) {
  SyncShardInDataServerRequest* _this = reinterpret_cast< SyncShardInDataServerRequest* >(object);
  (void)_this;
}
void SyncShardInDataServerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncShardInDataServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncShardInDataServerRequest& SyncShardInDataServerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncShardInDataServerRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void SyncShardInDataServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.SyncShardInDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shards_.Clear();
  dataserver_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sync_ts_ != nullptr) {
    delete sync_ts_;
  }
  sync_ts_ = nullptr;
  is_last_piece_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncShardInDataServerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_last_piece = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_last_piece_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sync_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_ts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dataserver_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dataserver_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bedrock.metaserver.SyncShardInDataServerRequest.dataserver_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo shards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncShardInDataServerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.SyncShardInDataServerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_last_piece = 1;
  if (this->is_last_piece() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_last_piece(), target);
  }

  // .google.protobuf.Timestamp sync_ts = 2;
  if (this->has_sync_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sync_ts(this), target, stream);
  }

  // string dataserver_addr = 3;
  if (this->dataserver_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dataserver_addr().data(), static_cast<int>(this->_internal_dataserver_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.SyncShardInDataServerRequest.dataserver_addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dataserver_addr(), target);
  }

  // repeated .bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo shards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_shards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.SyncShardInDataServerRequest)
  return target;
}

size_t SyncShardInDataServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.SyncShardInDataServerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.SyncShardInDataServerRequest.SyncShardInfo shards = 4;
  total_size += 1UL * this->_internal_shards_size();
  for (const auto& msg : this->shards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string dataserver_addr = 3;
  if (this->dataserver_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataserver_addr());
  }

  // .google.protobuf.Timestamp sync_ts = 2;
  if (this->has_sync_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_ts_);
  }

  // bool is_last_piece = 1;
  if (this->is_last_piece() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncShardInDataServerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.SyncShardInDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncShardInDataServerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncShardInDataServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.SyncShardInDataServerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.SyncShardInDataServerRequest)
    MergeFrom(*source);
  }
}

void SyncShardInDataServerRequest::MergeFrom(const SyncShardInDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.SyncShardInDataServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shards_.MergeFrom(from.shards_);
  if (from.dataserver_addr().size() > 0) {
    _internal_set_dataserver_addr(from._internal_dataserver_addr());
  }
  if (from.has_sync_ts()) {
    _internal_mutable_sync_ts()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sync_ts());
  }
  if (from.is_last_piece() != 0) {
    _internal_set_is_last_piece(from._internal_is_last_piece());
  }
}

void SyncShardInDataServerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.SyncShardInDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncShardInDataServerRequest::CopyFrom(const SyncShardInDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.SyncShardInDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncShardInDataServerRequest::IsInitialized() const {
  return true;
}

void SyncShardInDataServerRequest::InternalSwap(SyncShardInDataServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shards_.InternalSwap(&other->shards_);
  dataserver_addr_.Swap(&other->dataserver_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncShardInDataServerRequest, is_last_piece_)
      + sizeof(SyncShardInDataServerRequest::is_last_piece_)
      - PROTOBUF_FIELD_OFFSET(SyncShardInDataServerRequest, sync_ts_)>(
          reinterpret_cast<char*>(&sync_ts_),
          reinterpret_cast<char*>(&other->sync_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncShardInDataServerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncShardInDataServerResponse::InitAsDefaultInstance() {
}
class SyncShardInDataServerResponse::_Internal {
 public:
};

SyncShardInDataServerResponse::SyncShardInDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.SyncShardInDataServerResponse)
}
SyncShardInDataServerResponse::SyncShardInDataServerResponse(const SyncShardInDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.SyncShardInDataServerResponse)
}

void SyncShardInDataServerResponse::SharedCtor() {
}

SyncShardInDataServerResponse::~SyncShardInDataServerResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.SyncShardInDataServerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncShardInDataServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SyncShardInDataServerResponse::ArenaDtor(void* object) {
  SyncShardInDataServerResponse* _this = reinterpret_cast< SyncShardInDataServerResponse* >(object);
  (void)_this;
}
void SyncShardInDataServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncShardInDataServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncShardInDataServerResponse& SyncShardInDataServerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncShardInDataServerResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void SyncShardInDataServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.SyncShardInDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncShardInDataServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncShardInDataServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.SyncShardInDataServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.SyncShardInDataServerResponse)
  return target;
}

size_t SyncShardInDataServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.SyncShardInDataServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncShardInDataServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.SyncShardInDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncShardInDataServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncShardInDataServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.SyncShardInDataServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.SyncShardInDataServerResponse)
    MergeFrom(*source);
  }
}

void SyncShardInDataServerResponse::MergeFrom(const SyncShardInDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.SyncShardInDataServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SyncShardInDataServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.SyncShardInDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncShardInDataServerResponse::CopyFrom(const SyncShardInDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.SyncShardInDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncShardInDataServerResponse::IsInitialized() const {
  return true;
}

void SyncShardInDataServerResponse::InternalSwap(SyncShardInDataServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncShardInDataServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllocateTxIDsRequest::InitAsDefaultInstance() {
}
class AllocateTxIDsRequest::_Internal {
 public:
};

AllocateTxIDsRequest::AllocateTxIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.AllocateTxIDsRequest)
}
AllocateTxIDsRequest::AllocateTxIDsRequest(const AllocateTxIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.AllocateTxIDsRequest)
}

void AllocateTxIDsRequest::SharedCtor() {
  count_ = 0u;
}

AllocateTxIDsRequest::~AllocateTxIDsRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.AllocateTxIDsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocateTxIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllocateTxIDsRequest::ArenaDtor(void* object) {
  AllocateTxIDsRequest* _this = reinterpret_cast< AllocateTxIDsRequest* >(object);
  (void)_this;
}
void AllocateTxIDsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocateTxIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocateTxIDsRequest& AllocateTxIDsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocateTxIDsRequest_metaserver_2eproto.base);
  return *internal_default_instance();
}


void AllocateTxIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.AllocateTxIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocateTxIDsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocateTxIDsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.AllocateTxIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.AllocateTxIDsRequest)
  return target;
}

size_t AllocateTxIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.AllocateTxIDsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateTxIDsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.AllocateTxIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateTxIDsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocateTxIDsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.AllocateTxIDsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.AllocateTxIDsRequest)
    MergeFrom(*source);
  }
}

void AllocateTxIDsRequest::MergeFrom(const AllocateTxIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.AllocateTxIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void AllocateTxIDsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.AllocateTxIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateTxIDsRequest::CopyFrom(const AllocateTxIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.AllocateTxIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateTxIDsRequest::IsInitialized() const {
  return true;
}

void AllocateTxIDsRequest::InternalSwap(AllocateTxIDsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocateTxIDsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllocateTxIDsResponse::InitAsDefaultInstance() {
}
class AllocateTxIDsResponse::_Internal {
 public:
};

AllocateTxIDsResponse::AllocateTxIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tx_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.AllocateTxIDsResponse)
}
AllocateTxIDsResponse::AllocateTxIDsResponse(const AllocateTxIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tx_ids_(from.tx_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.AllocateTxIDsResponse)
}

void AllocateTxIDsResponse::SharedCtor() {
}

AllocateTxIDsResponse::~AllocateTxIDsResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.AllocateTxIDsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocateTxIDsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllocateTxIDsResponse::ArenaDtor(void* object) {
  AllocateTxIDsResponse* _this = reinterpret_cast< AllocateTxIDsResponse* >(object);
  (void)_this;
}
void AllocateTxIDsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocateTxIDsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocateTxIDsResponse& AllocateTxIDsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocateTxIDsResponse_metaserver_2eproto.base);
  return *internal_default_instance();
}


void AllocateTxIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.AllocateTxIDsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocateTxIDsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 tx_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_tx_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_tx_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocateTxIDsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.AllocateTxIDsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 tx_ids = 1;
  {
    int byte_size = _tx_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_tx_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.AllocateTxIDsResponse)
  return target;
}

size_t AllocateTxIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.AllocateTxIDsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 tx_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->tx_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tx_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateTxIDsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.metaserver.AllocateTxIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateTxIDsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocateTxIDsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.metaserver.AllocateTxIDsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.metaserver.AllocateTxIDsResponse)
    MergeFrom(*source);
  }
}

void AllocateTxIDsResponse::MergeFrom(const AllocateTxIDsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.AllocateTxIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_ids_.MergeFrom(from.tx_ids_);
}

void AllocateTxIDsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.metaserver.AllocateTxIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateTxIDsResponse::CopyFrom(const AllocateTxIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.AllocateTxIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateTxIDsResponse::IsInitialized() const {
  return true;
}

void AllocateTxIDsResponse::InternalSwap(AllocateTxIDsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_ids_.InternalSwap(&other->tx_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocateTxIDsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MetaService::~MetaService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MetaService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metaserver_2eproto);
  return file_level_service_descriptors_metaserver_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MetaService::GetDescriptor() {
  return descriptor();
}

void MetaService::HeartBeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::HeartBeatRequest*,
                         PROTOBUF_NAMESPACE_ID::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method HeartBeat() not implemented.");
  done->Run();
}

void MetaService::GetShardRoutes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::GetShardRoutesRequest*,
                         ::bedrock::metaserver::GetShardRoutesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetShardRoutes() not implemented.");
  done->Run();
}

void MetaService::ShardInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::ShardInfoRequest*,
                         ::bedrock::metaserver::ShardInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShardInfo() not implemented.");
  done->Run();
}

void MetaService::CreateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::CreateShardRequest*,
                         ::bedrock::metaserver::CreateShardResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateShard() not implemented.");
  done->Run();
}

void MetaService::RemoveShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::RemoveShardRequest*,
                         ::bedrock::metaserver::RemoveShardResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveShard() not implemented.");
  done->Run();
}

void MetaService::GetShardIDByKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::GetShardIDByKeyRequest*,
                         ::bedrock::metaserver::GetShardIDByKeyResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetShardIDByKey() not implemented.");
  done->Run();
}

void MetaService::CreateStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::CreateStorageRequest*,
                         ::bedrock::metaserver::CreateStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateStorage() not implemented.");
  done->Run();
}

void MetaService::DeleteStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::DeleteStorageRequest*,
                         ::bedrock::metaserver::DeleteStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteStorage() not implemented.");
  done->Run();
}

void MetaService::UndeleteStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::UndeleteStorageRequest*,
                         ::bedrock::metaserver::UndeleteStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UndeleteStorage() not implemented.");
  done->Run();
}

void MetaService::RenameStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::RenameStorageRequest*,
                         ::bedrock::metaserver::RenameStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenameStorage() not implemented.");
  done->Run();
}

void MetaService::ResizeStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::ResizeStorageRequest*,
                         ::bedrock::metaserver::ResizeStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ResizeStorage() not implemented.");
  done->Run();
}

void MetaService::GetStorages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::GetStoragesRequest*,
                         ::bedrock::metaserver::GetStoragesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetStorages() not implemented.");
  done->Run();
}

void MetaService::AddDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::AddDataServerRequest*,
                         ::bedrock::metaserver::AddDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddDataServer() not implemented.");
  done->Run();
}

void MetaService::RemoveDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::RemoveDataServerRequest*,
                         ::bedrock::metaserver::RemoveDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveDataServer() not implemented.");
  done->Run();
}

void MetaService::ListDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::ListDataServerRequest*,
                         ::bedrock::metaserver::ListDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ListDataServer() not implemented.");
  done->Run();
}

void MetaService::UpdateDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::UpdateDataServerRequest*,
                         ::bedrock::metaserver::UpdateDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateDataServer() not implemented.");
  done->Run();
}

void MetaService::SyncShardInDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::SyncShardInDataServerRequest*,
                         ::bedrock::metaserver::SyncShardInDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SyncShardInDataServer() not implemented.");
  done->Run();
}

void MetaService::AllocateTxIDs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::AllocateTxIDsRequest*,
                         ::bedrock::metaserver::AllocateTxIDsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AllocateTxIDs() not implemented.");
  done->Run();
}

void MetaService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_metaserver_2eproto[0]);
  switch(method->index()) {
    case 0:
      HeartBeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::HeartBeatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<PROTOBUF_NAMESPACE_ID::Empty*>(
                 response),
             done);
      break;
    case 1:
      GetShardRoutes(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::GetShardRoutesRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::GetShardRoutesResponse*>(
                 response),
             done);
      break;
    case 2:
      ShardInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::ShardInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::ShardInfoResponse*>(
                 response),
             done);
      break;
    case 3:
      CreateShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::CreateShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::CreateShardResponse*>(
                 response),
             done);
      break;
    case 4:
      RemoveShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::RemoveShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::RemoveShardResponse*>(
                 response),
             done);
      break;
    case 5:
      GetShardIDByKey(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::GetShardIDByKeyRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::GetShardIDByKeyResponse*>(
                 response),
             done);
      break;
    case 6:
      CreateStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::CreateStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::CreateStorageResponse*>(
                 response),
             done);
      break;
    case 7:
      DeleteStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::DeleteStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::DeleteStorageResponse*>(
                 response),
             done);
      break;
    case 8:
      UndeleteStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::UndeleteStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::UndeleteStorageResponse*>(
                 response),
             done);
      break;
    case 9:
      RenameStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::RenameStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::RenameStorageResponse*>(
                 response),
             done);
      break;
    case 10:
      ResizeStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::ResizeStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::ResizeStorageResponse*>(
                 response),
             done);
      break;
    case 11:
      GetStorages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::GetStoragesRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::GetStoragesResponse*>(
                 response),
             done);
      break;
    case 12:
      AddDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::AddDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::AddDataServerResponse*>(
                 response),
             done);
      break;
    case 13:
      RemoveDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::RemoveDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::RemoveDataServerResponse*>(
                 response),
             done);
      break;
    case 14:
      ListDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::ListDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::ListDataServerResponse*>(
                 response),
             done);
      break;
    case 15:
      UpdateDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::UpdateDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::UpdateDataServerResponse*>(
                 response),
             done);
      break;
    case 16:
      SyncShardInDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::SyncShardInDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::SyncShardInDataServerResponse*>(
                 response),
             done);
      break;
    case 17:
      AllocateTxIDs(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::AllocateTxIDsRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::AllocateTxIDsResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MetaService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bedrock::metaserver::HeartBeatRequest::default_instance();
    case 1:
      return ::bedrock::metaserver::GetShardRoutesRequest::default_instance();
    case 2:
      return ::bedrock::metaserver::ShardInfoRequest::default_instance();
    case 3:
      return ::bedrock::metaserver::CreateShardRequest::default_instance();
    case 4:
      return ::bedrock::metaserver::RemoveShardRequest::default_instance();
    case 5:
      return ::bedrock::metaserver::GetShardIDByKeyRequest::default_instance();
    case 6:
      return ::bedrock::metaserver::CreateStorageRequest::default_instance();
    case 7:
      return ::bedrock::metaserver::DeleteStorageRequest::default_instance();
    case 8:
      return ::bedrock::metaserver::UndeleteStorageRequest::default_instance();
    case 9:
      return ::bedrock::metaserver::RenameStorageRequest::default_instance();
    case 10:
      return ::bedrock::metaserver::ResizeStorageRequest::default_instance();
    case 11:
      return ::bedrock::metaserver::GetStoragesRequest::default_instance();
    case 12:
      return ::bedrock::metaserver::AddDataServerRequest::default_instance();
    case 13:
      return ::bedrock::metaserver::RemoveDataServerRequest::default_instance();
    case 14:
      return ::bedrock::metaserver::ListDataServerRequest::default_instance();
    case 15:
      return ::bedrock::metaserver::UpdateDataServerRequest::default_instance();
    case 16:
      return ::bedrock::metaserver::SyncShardInDataServerRequest::default_instance();
    case 17:
      return ::bedrock::metaserver::AllocateTxIDsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MetaService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    case 1:
      return ::bedrock::metaserver::GetShardRoutesResponse::default_instance();
    case 2:
      return ::bedrock::metaserver::ShardInfoResponse::default_instance();
    case 3:
      return ::bedrock::metaserver::CreateShardResponse::default_instance();
    case 4:
      return ::bedrock::metaserver::RemoveShardResponse::default_instance();
    case 5:
      return ::bedrock::metaserver::GetShardIDByKeyResponse::default_instance();
    case 6:
      return ::bedrock::metaserver::CreateStorageResponse::default_instance();
    case 7:
      return ::bedrock::metaserver::DeleteStorageResponse::default_instance();
    case 8:
      return ::bedrock::metaserver::UndeleteStorageResponse::default_instance();
    case 9:
      return ::bedrock::metaserver::RenameStorageResponse::default_instance();
    case 10:
      return ::bedrock::metaserver::ResizeStorageResponse::default_instance();
    case 11:
      return ::bedrock::metaserver::GetStoragesResponse::default_instance();
    case 12:
      return ::bedrock::metaserver::AddDataServerResponse::default_instance();
    case 13:
      return ::bedrock::metaserver::RemoveDataServerResponse::default_instance();
    case 14:
      return ::bedrock::metaserver::ListDataServerResponse::default_instance();
    case 15:
      return ::bedrock::metaserver::UpdateDataServerResponse::default_instance();
    case 16:
      return ::bedrock::metaserver::SyncShardInDataServerResponse::default_instance();
    case 17:
      return ::bedrock::metaserver::AllocateTxIDsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MetaService_Stub::MetaService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MetaService_Stub::MetaService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MetaService_Stub::~MetaService_Stub() {
  if (owns_channel_) delete channel_;
}

void MetaService_Stub::HeartBeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::HeartBeatRequest* request,
                              PROTOBUF_NAMESPACE_ID::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MetaService_Stub::GetShardRoutes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::GetShardRoutesRequest* request,
                              ::bedrock::metaserver::GetShardRoutesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MetaService_Stub::ShardInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::ShardInfoRequest* request,
                              ::bedrock::metaserver::ShardInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void MetaService_Stub::CreateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::CreateShardRequest* request,
                              ::bedrock::metaserver::CreateShardResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void MetaService_Stub::RemoveShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::RemoveShardRequest* request,
                              ::bedrock::metaserver::RemoveShardResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void MetaService_Stub::GetShardIDByKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::GetShardIDByKeyRequest* request,
                              ::bedrock::metaserver::GetShardIDByKeyResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void MetaService_Stub::CreateStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::CreateStorageRequest* request,
                              ::bedrock::metaserver::CreateStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void MetaService_Stub::DeleteStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::DeleteStorageRequest* request,
                              ::bedrock::metaserver::DeleteStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void MetaService_Stub::UndeleteStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::UndeleteStorageRequest* request,
                              ::bedrock::metaserver::UndeleteStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void MetaService_Stub::RenameStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::RenameStorageRequest* request,
                              ::bedrock::metaserver::RenameStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void MetaService_Stub::ResizeStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::ResizeStorageRequest* request,
                              ::bedrock::metaserver::ResizeStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void MetaService_Stub::GetStorages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::GetStoragesRequest* request,
                              ::bedrock::metaserver::GetStoragesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void MetaService_Stub::AddDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::AddDataServerRequest* request,
                              ::bedrock::metaserver::AddDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void MetaService_Stub::RemoveDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::RemoveDataServerRequest* request,
                              ::bedrock::metaserver::RemoveDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void MetaService_Stub::ListDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::ListDataServerRequest* request,
                              ::bedrock::metaserver::ListDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void MetaService_Stub::UpdateDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::UpdateDataServerRequest* request,
                              ::bedrock::metaserver::UpdateDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void MetaService_Stub::SyncShardInDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::SyncShardInDataServerRequest* request,
                              ::bedrock::metaserver::SyncShardInDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void MetaService_Stub::AllocateTxIDs(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::AllocateTxIDsRequest* request,
                              ::bedrock::metaserver::AllocateTxIDsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace metaserver
}  // namespace bedrock
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::Storage* Arena::CreateMaybeMessage< ::bedrock::metaserver::Storage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::Storage >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::Shard* Arena::CreateMaybeMessage< ::bedrock::metaserver::Shard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::Shard >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::DataServer* Arena::CreateMaybeMessage< ::bedrock::metaserver::DataServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::DataServer >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::Replicate* Arena::CreateMaybeMessage< ::bedrock::metaserver::Replicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::Replicate >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::HeartBeatRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::HeartBeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::HeartBeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::HeartBeatResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::HeartBeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::HeartBeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::CreateStorageRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::CreateStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::CreateStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::CreateStorageResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::CreateStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::CreateStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::CreateShardRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::CreateShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::CreateShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::CreateShardResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::CreateShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::CreateShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RemoveShardRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::RemoveShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RemoveShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RemoveShardResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::RemoveShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RemoveShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::DeleteStorageRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::DeleteStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::DeleteStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::DeleteStorageResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::DeleteStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::DeleteStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::UndeleteStorageRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::UndeleteStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::UndeleteStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::UndeleteStorageResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::UndeleteStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::UndeleteStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RenameStorageRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::RenameStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RenameStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RenameStorageResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::RenameStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RenameStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ResizeStorageRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::ResizeStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ResizeStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ResizeStorageResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::ResizeStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ResizeStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetStoragesRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::GetStoragesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetStoragesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetStoragesResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::GetStoragesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetStoragesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ShardRange* Arena::CreateMaybeMessage< ::bedrock::metaserver::ShardRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ShardRange >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RouteRecord* Arena::CreateMaybeMessage< ::bedrock::metaserver::RouteRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RouteRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ShardList* Arena::CreateMaybeMessage< ::bedrock::metaserver::ShardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ShardList >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardRoutesRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardRoutesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardRoutesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardRoutesResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardRoutesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardRoutesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardRoutesByStorageRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardRoutesByStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardRoutesByStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardRoutesByStorageResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardRoutesByStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardRoutesByStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::AddDataServerRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::AddDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::AddDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::AddDataServerResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::AddDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::AddDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RemoveDataServerRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::RemoveDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RemoveDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RemoveDataServerResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::RemoveDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RemoveDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ListDataServerRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::ListDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ListDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ListDataServerResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::ListDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ListDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::UpdateDataServerRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::UpdateDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::UpdateDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::UpdateDataServerResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::UpdateDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::UpdateDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ShardInfoRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::ShardInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ShardInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ShardInfoResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::ShardInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ShardInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardIDByKeyRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardIDByKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardIDByKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardIDByKeyResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardIDByKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardIDByKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo* Arena::CreateMaybeMessage< ::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::SyncShardInDataServerRequest_SyncShardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::SyncShardInDataServerRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::SyncShardInDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::SyncShardInDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::SyncShardInDataServerResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::SyncShardInDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::SyncShardInDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::AllocateTxIDsRequest* Arena::CreateMaybeMessage< ::bedrock::metaserver::AllocateTxIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::AllocateTxIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::AllocateTxIDsResponse* Arena::CreateMaybeMessage< ::bedrock::metaserver::AllocateTxIDsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::AllocateTxIDsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
