// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metaserver.proto

#include "metaserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bedrock {
namespace metaserver {
PROTOBUF_CONSTEXPR Storage::Storage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deleted_ts_)*/nullptr
  , /*decltype(_impl_.create_ts_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.last_shard_isn_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StorageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageDefaultTypeInternal() {}
  union {
    Storage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageDefaultTypeInternal _Storage_default_instance_;
PROTOBUF_CONSTEXPR Shard::Shard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replicates_)*/{}
  , /*decltype(_impl_.leader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replica_update_ts_)*/nullptr
  , /*decltype(_impl_.deleted_ts_)*/nullptr
  , /*decltype(_impl_.create_ts_)*/nullptr
  , /*decltype(_impl_.leader_change_ts_)*/nullptr
  , /*decltype(_impl_.isn_)*/0u
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_.is_deleted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardDefaultTypeInternal() {}
  union {
    Shard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardDefaultTypeInternal _Shard_default_instance_;
PROTOBUF_CONSTEXPR DataServer::DataServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_heartbeat_ts_)*/nullptr
  , /*decltype(_impl_.capacity_)*/uint64_t{0u}
  , /*decltype(_impl_.free_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataServerDefaultTypeInternal() {}
  union {
    DataServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataServerDefaultTypeInternal _DataServer_default_instance_;
PROTOBUF_CONSTEXPR Replicate::Replicate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addrs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplicateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplicateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplicateDefaultTypeInternal() {}
  union {
    Replicate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplicateDefaultTypeInternal _Replicate_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatRequest::HeartBeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.restarting_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartBeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatRequestDefaultTypeInternal() {}
  union {
    HeartBeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatResponse::HeartBeatResponse(
    ::_pbi::ConstantInitialized) {}
struct HeartBeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatResponseDefaultTypeInternal() {}
  union {
    HeartBeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateStorageRequest::CreateStorageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initial_range_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateStorageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateStorageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateStorageRequestDefaultTypeInternal() {}
  union {
    CreateStorageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateStorageRequestDefaultTypeInternal _CreateStorageRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateStorageResponse::CreateStorageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateStorageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateStorageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateStorageResponseDefaultTypeInternal() {}
  union {
    CreateStorageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateStorageResponseDefaultTypeInternal _CreateStorageResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateShardRequest::CreateShardRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_.shard_isn_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateShardRequestDefaultTypeInternal() {}
  union {
    CreateShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateShardRequestDefaultTypeInternal _CreateShardRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateShardResponse::CreateShardResponse(
    ::_pbi::ConstantInitialized) {}
struct CreateShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateShardResponseDefaultTypeInternal() {}
  union {
    CreateShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateShardResponseDefaultTypeInternal _CreateShardResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveShardRequest::RemoveShardRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_.shard_isn_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveShardRequestDefaultTypeInternal() {}
  union {
    RemoveShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveShardRequestDefaultTypeInternal _RemoveShardRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveShardResponse::RemoveShardResponse(
    ::_pbi::ConstantInitialized) {}
struct RemoveShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveShardResponseDefaultTypeInternal() {}
  union {
    RemoveShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveShardResponseDefaultTypeInternal _RemoveShardResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteStorageRequest::DeleteStorageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.real_delete_)*/false
  , /*decltype(_impl_.recycle_after_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteStorageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteStorageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteStorageRequestDefaultTypeInternal() {}
  union {
    DeleteStorageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteStorageRequestDefaultTypeInternal _DeleteStorageRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteStorageResponse::DeleteStorageResponse(
    ::_pbi::ConstantInitialized) {}
struct DeleteStorageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteStorageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteStorageResponseDefaultTypeInternal() {}
  union {
    DeleteStorageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteStorageResponseDefaultTypeInternal _DeleteStorageResponse_default_instance_;
PROTOBUF_CONSTEXPR UndeleteStorageRequest::UndeleteStorageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UndeleteStorageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndeleteStorageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndeleteStorageRequestDefaultTypeInternal() {}
  union {
    UndeleteStorageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndeleteStorageRequestDefaultTypeInternal _UndeleteStorageRequest_default_instance_;
PROTOBUF_CONSTEXPR UndeleteStorageResponse::UndeleteStorageResponse(
    ::_pbi::ConstantInitialized) {}
struct UndeleteStorageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndeleteStorageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndeleteStorageResponseDefaultTypeInternal() {}
  union {
    UndeleteStorageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndeleteStorageResponseDefaultTypeInternal _UndeleteStorageResponse_default_instance_;
PROTOBUF_CONSTEXPR RenameStorageRequest::RenameStorageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenameStorageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameStorageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameStorageRequestDefaultTypeInternal() {}
  union {
    RenameStorageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameStorageRequestDefaultTypeInternal _RenameStorageRequest_default_instance_;
PROTOBUF_CONSTEXPR RenameStorageResponse::RenameStorageResponse(
    ::_pbi::ConstantInitialized) {}
struct RenameStorageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenameStorageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenameStorageResponseDefaultTypeInternal() {}
  union {
    RenameStorageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenameStorageResponseDefaultTypeInternal _RenameStorageResponse_default_instance_;
PROTOBUF_CONSTEXPR ResizeStorageRequest::ResizeStorageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_size_)*/uint64_t{0u}
  , /*decltype(_impl_.new_shard_count_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResizeStorageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResizeStorageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResizeStorageRequestDefaultTypeInternal() {}
  union {
    ResizeStorageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResizeStorageRequestDefaultTypeInternal _ResizeStorageRequest_default_instance_;
PROTOBUF_CONSTEXPR ResizeStorageResponse::ResizeStorageResponse(
    ::_pbi::ConstantInitialized) {}
struct ResizeStorageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResizeStorageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResizeStorageResponseDefaultTypeInternal() {}
  union {
    ResizeStorageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResizeStorageResponseDefaultTypeInternal _ResizeStorageResponse_default_instance_;
PROTOBUF_CONSTEXPR GetStoragesRequest::GetStoragesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStoragesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStoragesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStoragesRequestDefaultTypeInternal() {}
  union {
    GetStoragesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStoragesRequestDefaultTypeInternal _GetStoragesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStoragesResponse::GetStoragesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.storages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStoragesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStoragesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStoragesResponseDefaultTypeInternal() {}
  union {
    GetStoragesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStoragesResponseDefaultTypeInternal _GetStoragesResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardRange::ShardRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardRangeDefaultTypeInternal() {}
  union {
    ShardRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardRangeDefaultTypeInternal _ShardRange_default_instance_;
PROTOBUF_CONSTEXPR RouteRecord::RouteRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addrs_)*/{}
  , /*decltype(_impl_.leader_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteRecordDefaultTypeInternal() {}
  union {
    RouteRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteRecordDefaultTypeInternal _RouteRecord_default_instance_;
PROTOBUF_CONSTEXPR ShardList::ShardList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_ids_)*/{}
  , /*decltype(_impl_._shard_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardListDefaultTypeInternal() {}
  union {
    ShardList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardListDefaultTypeInternal _ShardList_default_instance_;
PROTOBUF_CONSTEXPR GetShardRoutesRequest::GetShardRoutesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.shards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetShardRoutesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardRoutesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardRoutesRequestDefaultTypeInternal() {}
  union {
    GetShardRoutesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardRoutesRequestDefaultTypeInternal _GetShardRoutesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetShardRoutesResponse::GetShardRoutesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetShardRoutesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardRoutesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardRoutesResponseDefaultTypeInternal() {}
  union {
    GetShardRoutesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardRoutesResponseDefaultTypeInternal _GetShardRoutesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetShardRoutesByStorageRequest::GetShardRoutesByStorageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetShardRoutesByStorageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardRoutesByStorageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardRoutesByStorageRequestDefaultTypeInternal() {}
  union {
    GetShardRoutesByStorageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardRoutesByStorageRequestDefaultTypeInternal _GetShardRoutesByStorageRequest_default_instance_;
PROTOBUF_CONSTEXPR GetShardRoutesByStorageResponse::GetShardRoutesByStorageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routes_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.is_full_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetShardRoutesByStorageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardRoutesByStorageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardRoutesByStorageResponseDefaultTypeInternal() {}
  union {
    GetShardRoutesByStorageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardRoutesByStorageResponseDefaultTypeInternal _GetShardRoutesByStorageResponse_default_instance_;
PROTOBUF_CONSTEXPR AddDataServerRequest::AddDataServerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddDataServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddDataServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddDataServerRequestDefaultTypeInternal() {}
  union {
    AddDataServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddDataServerRequestDefaultTypeInternal _AddDataServerRequest_default_instance_;
PROTOBUF_CONSTEXPR AddDataServerResponse::AddDataServerResponse(
    ::_pbi::ConstantInitialized) {}
struct AddDataServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddDataServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddDataServerResponseDefaultTypeInternal() {}
  union {
    AddDataServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddDataServerResponseDefaultTypeInternal _AddDataServerResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveDataServerRequest::RemoveDataServerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveDataServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveDataServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveDataServerRequestDefaultTypeInternal() {}
  union {
    RemoveDataServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveDataServerRequestDefaultTypeInternal _RemoveDataServerRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveDataServerResponse::RemoveDataServerResponse(
    ::_pbi::ConstantInitialized) {}
struct RemoveDataServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveDataServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveDataServerResponseDefaultTypeInternal() {}
  union {
    RemoveDataServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveDataServerResponseDefaultTypeInternal _RemoveDataServerResponse_default_instance_;
PROTOBUF_CONSTEXPR ListDataServerRequest::ListDataServerRequest(
    ::_pbi::ConstantInitialized) {}
struct ListDataServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDataServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDataServerRequestDefaultTypeInternal() {}
  union {
    ListDataServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDataServerRequestDefaultTypeInternal _ListDataServerRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDataServerResponse::ListDataServerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_servers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDataServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDataServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDataServerResponseDefaultTypeInternal() {}
  union {
    ListDataServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDataServerResponseDefaultTypeInternal _ListDataServerResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateDataServerRequest::UpdateDataServerRequest(
    ::_pbi::ConstantInitialized) {}
struct UpdateDataServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDataServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDataServerRequestDefaultTypeInternal() {}
  union {
    UpdateDataServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDataServerRequestDefaultTypeInternal _UpdateDataServerRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateDataServerResponse::UpdateDataServerResponse(
    ::_pbi::ConstantInitialized) {}
struct UpdateDataServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDataServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDataServerResponseDefaultTypeInternal() {}
  union {
    UpdateDataServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDataServerResponseDefaultTypeInternal _UpdateDataServerResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardInfoRequest::ShardInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardInfoRequestDefaultTypeInternal() {}
  union {
    ShardInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardInfoRequestDefaultTypeInternal _ShardInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardInfoResponse::ShardInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardInfoResponseDefaultTypeInternal() {}
  union {
    ShardInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardInfoResponseDefaultTypeInternal _ShardInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR GetShardIDByKeyRequest::GetShardIDByKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetShardIDByKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardIDByKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardIDByKeyRequestDefaultTypeInternal() {}
  union {
    GetShardIDByKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardIDByKeyRequestDefaultTypeInternal _GetShardIDByKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR GetShardIDByKeyResponse::GetShardIDByKeyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetShardIDByKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetShardIDByKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetShardIDByKeyResponseDefaultTypeInternal() {}
  union {
    GetShardIDByKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetShardIDByKeyResponseDefaultTypeInternal _GetShardIDByKeyResponse_default_instance_;
}  // namespace metaserver
}  // namespace bedrock
static ::_pb::Metadata file_level_metadata_metaserver_2eproto[41];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_metaserver_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_metaserver_2eproto[1];

const uint32_t TableStruct_metaserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, _impl_.deleted_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, _impl_.last_shard_isn_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Storage, _impl_.owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.isn_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.replica_update_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.replicates_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.is_deleted_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.deleted_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Shard, _impl_.leader_change_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _impl_.free_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _impl_.last_heartbeat_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DataServer, _impl_.idc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Replicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::Replicate, _impl_.addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::HeartBeatRequest, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::HeartBeatRequest, _impl_.restarting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageRequest, _impl_.initial_range_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateStorageResponse, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateShardRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateShardRequest, _impl_.shard_isn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::CreateShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveShardRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveShardRequest, _impl_.shard_isn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageRequest, _impl_.real_delete_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageRequest, _impl_.recycle_after_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::DeleteStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UndeleteStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UndeleteStorageRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UndeleteStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RenameStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RenameStorageRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RenameStorageRequest, _impl_.new_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RenameStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageRequest, _impl_.new_size_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageRequest, _impl_.new_shard_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ResizeStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesRequest, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesRequest, _impl_.names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetStoragesResponse, _impl_.storages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardRange, _impl_.start_shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardRange, _impl_.offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RouteRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RouteRecord, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RouteRecord, _impl_.leader_addr_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RouteRecord, _impl_.addrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardList, _impl_.shard_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesRequest, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesRequest, _impl_.shards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesResponse, _impl_.routes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageRequest, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageResponse, _impl_.routes_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageResponse, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardRoutesByStorageResponse, _impl_.is_full_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AddDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AddDataServerRequest, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::AddDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveDataServerRequest, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::RemoveDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ListDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ListDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ListDataServerResponse, _impl_.data_servers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UpdateDataServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::UpdateDataServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardInfoRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::ShardInfoResponse, _impl_.shard_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::metaserver::GetShardIDByKeyResponse, _impl_.shard_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bedrock::metaserver::Storage)},
  { 12, -1, -1, sizeof(::bedrock::metaserver::Shard)},
  { 27, -1, -1, sizeof(::bedrock::metaserver::DataServer)},
  { 40, -1, -1, sizeof(::bedrock::metaserver::Replicate)},
  { 47, -1, -1, sizeof(::bedrock::metaserver::HeartBeatRequest)},
  { 55, -1, -1, sizeof(::bedrock::metaserver::HeartBeatResponse)},
  { 61, -1, -1, sizeof(::bedrock::metaserver::CreateStorageRequest)},
  { 69, -1, -1, sizeof(::bedrock::metaserver::CreateStorageResponse)},
  { 76, -1, -1, sizeof(::bedrock::metaserver::CreateShardRequest)},
  { 84, -1, -1, sizeof(::bedrock::metaserver::CreateShardResponse)},
  { 90, -1, -1, sizeof(::bedrock::metaserver::RemoveShardRequest)},
  { 98, -1, -1, sizeof(::bedrock::metaserver::RemoveShardResponse)},
  { 104, -1, -1, sizeof(::bedrock::metaserver::DeleteStorageRequest)},
  { 113, -1, -1, sizeof(::bedrock::metaserver::DeleteStorageResponse)},
  { 119, -1, -1, sizeof(::bedrock::metaserver::UndeleteStorageRequest)},
  { 126, -1, -1, sizeof(::bedrock::metaserver::UndeleteStorageResponse)},
  { 132, -1, -1, sizeof(::bedrock::metaserver::RenameStorageRequest)},
  { 140, -1, -1, sizeof(::bedrock::metaserver::RenameStorageResponse)},
  { 146, -1, -1, sizeof(::bedrock::metaserver::ResizeStorageRequest)},
  { 155, -1, -1, sizeof(::bedrock::metaserver::ResizeStorageResponse)},
  { 161, -1, -1, sizeof(::bedrock::metaserver::GetStoragesRequest)},
  { 169, -1, -1, sizeof(::bedrock::metaserver::GetStoragesResponse)},
  { 176, -1, -1, sizeof(::bedrock::metaserver::ShardRange)},
  { 184, -1, -1, sizeof(::bedrock::metaserver::RouteRecord)},
  { 193, -1, -1, sizeof(::bedrock::metaserver::ShardList)},
  { 200, -1, -1, sizeof(::bedrock::metaserver::GetShardRoutesRequest)},
  { 210, -1, -1, sizeof(::bedrock::metaserver::GetShardRoutesResponse)},
  { 217, -1, -1, sizeof(::bedrock::metaserver::GetShardRoutesByStorageRequest)},
  { 225, -1, -1, sizeof(::bedrock::metaserver::GetShardRoutesByStorageResponse)},
  { 234, -1, -1, sizeof(::bedrock::metaserver::AddDataServerRequest)},
  { 241, -1, -1, sizeof(::bedrock::metaserver::AddDataServerResponse)},
  { 247, -1, -1, sizeof(::bedrock::metaserver::RemoveDataServerRequest)},
  { 254, -1, -1, sizeof(::bedrock::metaserver::RemoveDataServerResponse)},
  { 260, -1, -1, sizeof(::bedrock::metaserver::ListDataServerRequest)},
  { 266, -1, -1, sizeof(::bedrock::metaserver::ListDataServerResponse)},
  { 273, -1, -1, sizeof(::bedrock::metaserver::UpdateDataServerRequest)},
  { 279, -1, -1, sizeof(::bedrock::metaserver::UpdateDataServerResponse)},
  { 285, -1, -1, sizeof(::bedrock::metaserver::ShardInfoRequest)},
  { 292, -1, -1, sizeof(::bedrock::metaserver::ShardInfoResponse)},
  { 299, -1, -1, sizeof(::bedrock::metaserver::GetShardIDByKeyRequest)},
  { 307, -1, -1, sizeof(::bedrock::metaserver::GetShardIDByKeyResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bedrock::metaserver::_Storage_default_instance_._instance,
  &::bedrock::metaserver::_Shard_default_instance_._instance,
  &::bedrock::metaserver::_DataServer_default_instance_._instance,
  &::bedrock::metaserver::_Replicate_default_instance_._instance,
  &::bedrock::metaserver::_HeartBeatRequest_default_instance_._instance,
  &::bedrock::metaserver::_HeartBeatResponse_default_instance_._instance,
  &::bedrock::metaserver::_CreateStorageRequest_default_instance_._instance,
  &::bedrock::metaserver::_CreateStorageResponse_default_instance_._instance,
  &::bedrock::metaserver::_CreateShardRequest_default_instance_._instance,
  &::bedrock::metaserver::_CreateShardResponse_default_instance_._instance,
  &::bedrock::metaserver::_RemoveShardRequest_default_instance_._instance,
  &::bedrock::metaserver::_RemoveShardResponse_default_instance_._instance,
  &::bedrock::metaserver::_DeleteStorageRequest_default_instance_._instance,
  &::bedrock::metaserver::_DeleteStorageResponse_default_instance_._instance,
  &::bedrock::metaserver::_UndeleteStorageRequest_default_instance_._instance,
  &::bedrock::metaserver::_UndeleteStorageResponse_default_instance_._instance,
  &::bedrock::metaserver::_RenameStorageRequest_default_instance_._instance,
  &::bedrock::metaserver::_RenameStorageResponse_default_instance_._instance,
  &::bedrock::metaserver::_ResizeStorageRequest_default_instance_._instance,
  &::bedrock::metaserver::_ResizeStorageResponse_default_instance_._instance,
  &::bedrock::metaserver::_GetStoragesRequest_default_instance_._instance,
  &::bedrock::metaserver::_GetStoragesResponse_default_instance_._instance,
  &::bedrock::metaserver::_ShardRange_default_instance_._instance,
  &::bedrock::metaserver::_RouteRecord_default_instance_._instance,
  &::bedrock::metaserver::_ShardList_default_instance_._instance,
  &::bedrock::metaserver::_GetShardRoutesRequest_default_instance_._instance,
  &::bedrock::metaserver::_GetShardRoutesResponse_default_instance_._instance,
  &::bedrock::metaserver::_GetShardRoutesByStorageRequest_default_instance_._instance,
  &::bedrock::metaserver::_GetShardRoutesByStorageResponse_default_instance_._instance,
  &::bedrock::metaserver::_AddDataServerRequest_default_instance_._instance,
  &::bedrock::metaserver::_AddDataServerResponse_default_instance_._instance,
  &::bedrock::metaserver::_RemoveDataServerRequest_default_instance_._instance,
  &::bedrock::metaserver::_RemoveDataServerResponse_default_instance_._instance,
  &::bedrock::metaserver::_ListDataServerRequest_default_instance_._instance,
  &::bedrock::metaserver::_ListDataServerResponse_default_instance_._instance,
  &::bedrock::metaserver::_UpdateDataServerRequest_default_instance_._instance,
  &::bedrock::metaserver::_UpdateDataServerResponse_default_instance_._instance,
  &::bedrock::metaserver::_ShardInfoRequest_default_instance_._instance,
  &::bedrock::metaserver::_ShardInfoResponse_default_instance_._instance,
  &::bedrock::metaserver::_GetShardIDByKeyRequest_default_instance_._instance,
  &::bedrock::metaserver::_GetShardIDByKeyResponse_default_instance_._instance,
};

const char descriptor_table_protodef_metaserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020metaserver.proto\022\022bedrock.metaserver\032\033"
  "google/protobuf/empty.proto\032\037google/prot"
  "obuf/timestamp.proto\"\251\001\n\007Storage\022\n\n\002id\030\001"
  " \001(\r\022\014\n\004name\030\002 \001(\t\022.\n\ndeleted_ts\030\003 \001(\0132\032"
  ".google.protobuf.Timestamp\022-\n\tcreate_ts\030"
  "\004 \001(\0132\032.google.protobuf.Timestamp\022\026\n\016las"
  "t_shard_isn\030\005 \001(\r\022\r\n\005owner\030\006 \001(\t\"\254\002\n\005Sha"
  "rd\022\013\n\003isn\030\001 \001(\r\022\022\n\nstorage_id\030\002 \001(\r\0225\n\021r"
  "eplica_update_ts\030\003 \001(\0132\032.google.protobuf"
  ".Timestamp\022\022\n\nreplicates\030\004 \003(\t\022\022\n\nis_del"
  "eted\030\005 \001(\010\022.\n\ndeleted_ts\030\006 \001(\0132\032.google."
  "protobuf.Timestamp\022-\n\tcreate_ts\030\007 \001(\0132\032."
  "google.protobuf.Timestamp\022\016\n\006leader\030\010 \001("
  "\t\0224\n\020leader_change_ts\030\t \001(\0132\032.google.pro"
  "tobuf.Timestamp\"\232\001\n\nDataServer\022\n\n\002ip\030\001 \001"
  "(\t\022\014\n\004port\030\002 \001(\t\022\020\n\010capacity\030\003 \001(\004\022\014\n\004fr"
  "ee\030\004 \001(\004\0225\n\021last_heartbeat_ts\030\005 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\016\n\006status\030\006 \001(\t\022"
  "\013\n\003idc\030\007 \001(\t\"\032\n\tReplicate\022\r\n\005addrs\030\001 \003(\t"
  "\"4\n\020HeartBeatRequest\022\014\n\004addr\030\001 \001(\t\022\022\n\nre"
  "starting\030\002 \001(\010\"\023\n\021HeartBeatResponse\"A\n\024C"
  "reateStorageRequest\022\014\n\004name\030\001 \001(\t\022\033\n\023ini"
  "tial_range_count\030\002 \001(\r\"#\n\025CreateStorageR"
  "esponse\022\n\n\002id\030\001 \001(\004\";\n\022CreateShardReques"
  "t\022\022\n\nstorage_id\030\001 \001(\r\022\021\n\tshard_isn\030\002 \001(\r"
  "\"\025\n\023CreateShardResponse\";\n\022RemoveShardRe"
  "quest\022\022\n\nstorage_id\030\001 \001(\r\022\021\n\tshard_isn\030\002"
  " \001(\r\"\025\n\023RemoveShardResponse\"N\n\024DeleteSto"
  "rageRequest\022\n\n\002id\030\001 \001(\r\022\023\n\013real_delete\030\002"
  " \001(\010\022\025\n\rrecycle_after\030\003 \001(\004\"\027\n\025DeleteSto"
  "rageResponse\"$\n\026UndeleteStorageRequest\022\n"
  "\n\002id\030\001 \001(\r\"\031\n\027UndeleteStorageResponse\"4\n"
  "\024RenameStorageRequest\022\n\n\002id\030\001 \001(\r\022\020\n\010new"
  "_name\030\002 \001(\t\"\027\n\025RenameStorageResponse\"M\n\024"
  "ResizeStorageRequest\022\n\n\002id\030\001 \001(\r\022\020\n\010new_"
  "size\030\002 \001(\004\022\027\n\017new_shard_count\030\003 \001(\004\"\027\n\025R"
  "esizeStorageResponse\"0\n\022GetStoragesReque"
  "st\022\013\n\003ids\030\001 \003(\r\022\r\n\005names\030\002 \003(\t\"D\n\023GetSto"
  "ragesResponse\022-\n\010storages\030\001 \003(\0132\033.bedroc"
  "k.metaserver.Storage\"4\n\nShardRange\022\026\n\016st"
  "art_shard_id\030\001 \001(\004\022\016\n\006offset\030\002 \001(\004\"C\n\013Ro"
  "uteRecord\022\020\n\010shard_id\030\001 \001(\004\022\023\n\013leader_ad"
  "dr\030\002 \001(\t\022\r\n\005addrs\030\003 \003(\t\"\036\n\tShardList\022\021\n\t"
  "shard_ids\030\001 \003(\004\"\275\001\n\025GetShardRoutesReques"
  "t\0224\n\013shards_list\030\001 \001(\0132\035.bedrock.metaser"
  "ver.ShardListH\000\0225\n\013shard_range\030\002 \001(\0132\036.b"
  "edrock.metaserver.ShardRangeH\000\022-\n\ttimest"
  "amp\030\003 \001(\0132\032.google.protobuf.TimestampB\010\n"
  "\006shards\"I\n\026GetShardRoutesResponse\022/\n\006rou"
  "tes\030\001 \003(\0132\037.bedrock.metaserver.RouteReco"
  "rd\"c\n\036GetShardRoutesByStorageRequest\022\022\n\n"
  "storage_id\030\001 \001(\r\022-\n\ttimestamp\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\"\222\001\n\037GetShardRout"
  "esByStorageResponse\022/\n\006routes\030\001 \003(\0132\037.be"
  "drock.metaserver.RouteRecord\022-\n\ttimestam"
  "p\030\002 \001(\0132\032.google.protobuf.Timestamp\022\017\n\007i"
  "s_full\030\003 \001(\010\"$\n\024AddDataServerRequest\022\014\n\004"
  "addr\030\001 \001(\t\"\027\n\025AddDataServerResponse\"\'\n\027R"
  "emoveDataServerRequest\022\014\n\004addr\030\001 \001(\t\"\032\n\030"
  "RemoveDataServerResponse\"\027\n\025ListDataServ"
  "erRequest\"N\n\026ListDataServerResponse\0224\n\014d"
  "ata_servers\030\001 \003(\0132\036.bedrock.metaserver.D"
  "ataServer\"\031\n\027UpdateDataServerRequest\"\032\n\030"
  "UpdateDataServerResponse\"\036\n\020ShardInfoReq"
  "uest\022\n\n\002id\030\001 \001(\004\"=\n\021ShardInfoResponse\022(\n"
  "\005shard\030\001 \001(\0132\031.bedrock.metaserver.Shard\""
  "9\n\026GetShardIDByKeyRequest\022\022\n\nstorage_id\030"
  "\001 \001(\r\022\013\n\003key\030\002 \001(\014\"+\n\027GetShardIDByKeyRes"
  "ponse\022\020\n\010shard_id\030\001 \001(\0042\330\014\n\013MetaService\022"
  "I\n\tHeartBeat\022$.bedrock.metaserver.HeartB"
  "eatRequest\032\026.google.protobuf.Empty\022g\n\016Ge"
  "tShardRoutes\022).bedrock.metaserver.GetSha"
  "rdRoutesRequest\032*.bedrock.metaserver.Get"
  "ShardRoutesResponse\022X\n\tShardInfo\022$.bedro"
  "ck.metaserver.ShardInfoRequest\032%.bedrock"
  ".metaserver.ShardInfoResponse\022^\n\013CreateS"
  "hard\022&.bedrock.metaserver.CreateShardReq"
  "uest\032\'.bedrock.metaserver.CreateShardRes"
  "ponse\022^\n\013RemoveShard\022&.bedrock.metaserve"
  "r.RemoveShardRequest\032\'.bedrock.metaserve"
  "r.RemoveShardResponse\022j\n\017GetShardIDByKey"
  "\022*.bedrock.metaserver.GetShardIDByKeyReq"
  "uest\032+.bedrock.metaserver.GetShardIDByKe"
  "yResponse\022d\n\rCreateStorage\022(.bedrock.met"
  "aserver.CreateStorageRequest\032).bedrock.m"
  "etaserver.CreateStorageResponse\022d\n\rDelet"
  "eStorage\022(.bedrock.metaserver.DeleteStor"
  "ageRequest\032).bedrock.metaserver.DeleteSt"
  "orageResponse\022j\n\017UndeleteStorage\022*.bedro"
  "ck.metaserver.UndeleteStorageRequest\032+.b"
  "edrock.metaserver.UndeleteStorageRespons"
  "e\022d\n\rRenameStorage\022(.bedrock.metaserver."
  "RenameStorageRequest\032).bedrock.metaserve"
  "r.RenameStorageResponse\022d\n\rResizeStorage"
  "\022(.bedrock.metaserver.ResizeStorageReque"
  "st\032).bedrock.metaserver.ResizeStorageRes"
  "ponse\022^\n\013GetStorages\022&.bedrock.metaserve"
  "r.GetStoragesRequest\032\'.bedrock.metaserve"
  "r.GetStoragesResponse\022d\n\rAddDataServer\022("
  ".bedrock.metaserver.AddDataServerRequest"
  "\032).bedrock.metaserver.AddDataServerRespo"
  "nse\022m\n\020RemoveDataServer\022+.bedrock.metase"
  "rver.RemoveDataServerRequest\032,.bedrock.m"
  "etaserver.RemoveDataServerResponse\022g\n\016Li"
  "stDataServer\022).bedrock.metaserver.ListDa"
  "taServerRequest\032*.bedrock.metaserver.Lis"
  "tDataServerResponse\022m\n\020UpdateDataServer\022"
  "+.bedrock.metaserver.UpdateDataServerReq"
  "uest\032,.bedrock.metaserver.UpdateDataServ"
  "erResponseB.Z)sr.ht/moyanhao/bedrock-met"
  "aserver/service\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_metaserver_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_metaserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_metaserver_2eproto = {
    false, false, 4426, descriptor_table_protodef_metaserver_2eproto,
    "metaserver.proto",
    &descriptor_table_metaserver_2eproto_once, descriptor_table_metaserver_2eproto_deps, 2, 41,
    schemas, file_default_instances, TableStruct_metaserver_2eproto::offsets,
    file_level_metadata_metaserver_2eproto, file_level_enum_descriptors_metaserver_2eproto,
    file_level_service_descriptors_metaserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_metaserver_2eproto_getter() {
  return &descriptor_table_metaserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_metaserver_2eproto(&descriptor_table_metaserver_2eproto);
namespace bedrock {
namespace metaserver {

// ===================================================================

class Storage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_ts(const Storage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_ts(const Storage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Storage::_Internal::deleted_ts(const Storage* msg) {
  return *msg->_impl_.deleted_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Storage::_Internal::create_ts(const Storage* msg) {
  return *msg->_impl_.create_ts_;
}
void Storage::clear_deleted_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_ts_ != nullptr) {
    delete _impl_.deleted_ts_;
  }
  _impl_.deleted_ts_ = nullptr;
}
void Storage::clear_create_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
}
Storage::Storage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.Storage)
}
Storage::Storage(const Storage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Storage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.deleted_ts_){nullptr}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.last_shard_isn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_deleted_ts()) {
    _this->_impl_.deleted_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_ts_);
  }
  if (from._internal_has_create_ts()) {
    _this->_impl_.create_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.create_ts_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_shard_isn_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.last_shard_isn_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.Storage)
}

inline void Storage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.deleted_ts_){nullptr}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.last_shard_isn_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Storage::~Storage() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.Storage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Storage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.owner_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deleted_ts_;
  if (this != internal_default_instance()) delete _impl_.create_ts_;
}

void Storage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Storage::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.Storage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_ts_ != nullptr) {
    delete _impl_.deleted_ts_;
  }
  _impl_.deleted_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_shard_isn_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.last_shard_isn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Storage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.Storage.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_shard_isn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.last_shard_isn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string owner = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.Storage.owner"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Storage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.Storage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Storage.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp deleted_ts = 3;
  if (this->_internal_has_deleted_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::deleted_ts(this),
        _Internal::deleted_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp create_ts = 4;
  if (this->_internal_has_create_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::create_ts(this),
        _Internal::create_ts(this).GetCachedSize(), target, stream);
  }

  // uint32 last_shard_isn = 5;
  if (this->_internal_last_shard_isn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_last_shard_isn(), target);
  }

  // string owner = 6;
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Storage.owner");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.Storage)
  return target;
}

size_t Storage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.Storage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string owner = 6;
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // .google.protobuf.Timestamp deleted_ts = 3;
  if (this->_internal_has_deleted_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deleted_ts_);
  }

  // .google.protobuf.Timestamp create_ts = 4;
  if (this->_internal_has_create_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_ts_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 last_shard_isn = 5;
  if (this->_internal_last_shard_isn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_shard_isn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Storage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Storage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Storage::GetClassData() const { return &_class_data_; }


void Storage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Storage*>(&to_msg);
  auto& from = static_cast<const Storage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.Storage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (from._internal_has_deleted_ts()) {
    _this->_internal_mutable_deleted_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_deleted_ts());
  }
  if (from._internal_has_create_ts()) {
    _this->_internal_mutable_create_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_create_ts());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_last_shard_isn() != 0) {
    _this->_internal_set_last_shard_isn(from._internal_last_shard_isn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Storage::CopyFrom(const Storage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.Storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Storage::IsInitialized() const {
  return true;
}

void Storage::InternalSwap(Storage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_, lhs_arena,
      &other->_impl_.owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Storage, _impl_.last_shard_isn_)
      + sizeof(Storage::_impl_.last_shard_isn_)
      - PROTOBUF_FIELD_OFFSET(Storage, _impl_.deleted_ts_)>(
          reinterpret_cast<char*>(&_impl_.deleted_ts_),
          reinterpret_cast<char*>(&other->_impl_.deleted_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Storage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[0]);
}

// ===================================================================

class Shard::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& replica_update_ts(const Shard* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_ts(const Shard* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_ts(const Shard* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts(const Shard* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Shard::_Internal::replica_update_ts(const Shard* msg) {
  return *msg->_impl_.replica_update_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Shard::_Internal::deleted_ts(const Shard* msg) {
  return *msg->_impl_.deleted_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Shard::_Internal::create_ts(const Shard* msg) {
  return *msg->_impl_.create_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Shard::_Internal::leader_change_ts(const Shard* msg) {
  return *msg->_impl_.leader_change_ts_;
}
void Shard::clear_replica_update_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.replica_update_ts_ != nullptr) {
    delete _impl_.replica_update_ts_;
  }
  _impl_.replica_update_ts_ = nullptr;
}
void Shard::clear_deleted_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_ts_ != nullptr) {
    delete _impl_.deleted_ts_;
  }
  _impl_.deleted_ts_ = nullptr;
}
void Shard::clear_create_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
}
void Shard::clear_leader_change_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
}
Shard::Shard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.Shard)
}
Shard::Shard(const Shard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Shard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){from._impl_.replicates_}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.replica_update_ts_){nullptr}
    , decltype(_impl_.deleted_ts_){nullptr}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.isn_){}
    , decltype(_impl_.storage_id_){}
    , decltype(_impl_.is_deleted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader().empty()) {
    _this->_impl_.leader_.Set(from._internal_leader(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_replica_update_ts()) {
    _this->_impl_.replica_update_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.replica_update_ts_);
  }
  if (from._internal_has_deleted_ts()) {
    _this->_impl_.deleted_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_ts_);
  }
  if (from._internal_has_create_ts()) {
    _this->_impl_.create_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.create_ts_);
  }
  if (from._internal_has_leader_change_ts()) {
    _this->_impl_.leader_change_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.leader_change_ts_);
  }
  ::memcpy(&_impl_.isn_, &from._impl_.isn_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_deleted_) -
    reinterpret_cast<char*>(&_impl_.isn_)) + sizeof(_impl_.is_deleted_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.Shard)
}

inline void Shard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){arena}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.replica_update_ts_){nullptr}
    , decltype(_impl_.deleted_ts_){nullptr}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.isn_){0u}
    , decltype(_impl_.storage_id_){0u}
    , decltype(_impl_.is_deleted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Shard::~Shard() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.Shard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Shard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replicates_.~RepeatedPtrField();
  _impl_.leader_.Destroy();
  if (this != internal_default_instance()) delete _impl_.replica_update_ts_;
  if (this != internal_default_instance()) delete _impl_.deleted_ts_;
  if (this != internal_default_instance()) delete _impl_.create_ts_;
  if (this != internal_default_instance()) delete _impl_.leader_change_ts_;
}

void Shard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Shard::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.Shard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replicates_.Clear();
  _impl_.leader_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.replica_update_ts_ != nullptr) {
    delete _impl_.replica_update_ts_;
  }
  _impl_.replica_update_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.deleted_ts_ != nullptr) {
    delete _impl_.deleted_ts_;
  }
  _impl_.deleted_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
  ::memset(&_impl_.isn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_deleted_) -
      reinterpret_cast<char*>(&_impl_.isn_)) + sizeof(_impl_.is_deleted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Shard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 isn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 storage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp replica_update_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replica_update_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string replicates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_replicates();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.Shard.replicates"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_deleted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deleted_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_leader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.Shard.leader"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp leader_change_ts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_change_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Shard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.Shard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 isn = 1;
  if (this->_internal_isn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_isn(), target);
  }

  // uint32 storage_id = 2;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_storage_id(), target);
  }

  // .google.protobuf.Timestamp replica_update_ts = 3;
  if (this->_internal_has_replica_update_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::replica_update_ts(this),
        _Internal::replica_update_ts(this).GetCachedSize(), target, stream);
  }

  // repeated string replicates = 4;
  for (int i = 0, n = this->_internal_replicates_size(); i < n; i++) {
    const auto& s = this->_internal_replicates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Shard.replicates");
    target = stream->WriteString(4, s, target);
  }

  // bool is_deleted = 5;
  if (this->_internal_is_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_deleted(), target);
  }

  // .google.protobuf.Timestamp deleted_ts = 6;
  if (this->_internal_has_deleted_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::deleted_ts(this),
        _Internal::deleted_ts(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp create_ts = 7;
  if (this->_internal_has_create_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::create_ts(this),
        _Internal::create_ts(this).GetCachedSize(), target, stream);
  }

  // string leader = 8;
  if (!this->_internal_leader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Shard.leader");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_leader(), target);
  }

  // .google.protobuf.Timestamp leader_change_ts = 9;
  if (this->_internal_has_leader_change_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::leader_change_ts(this),
        _Internal::leader_change_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.Shard)
  return target;
}

size_t Shard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.Shard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string replicates = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.replicates_.size());
  for (int i = 0, n = _impl_.replicates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.replicates_.Get(i));
  }

  // string leader = 8;
  if (!this->_internal_leader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader());
  }

  // .google.protobuf.Timestamp replica_update_ts = 3;
  if (this->_internal_has_replica_update_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replica_update_ts_);
  }

  // .google.protobuf.Timestamp deleted_ts = 6;
  if (this->_internal_has_deleted_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deleted_ts_);
  }

  // .google.protobuf.Timestamp create_ts = 7;
  if (this->_internal_has_create_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_ts_);
  }

  // .google.protobuf.Timestamp leader_change_ts = 9;
  if (this->_internal_has_leader_change_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leader_change_ts_);
  }

  // uint32 isn = 1;
  if (this->_internal_isn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_isn());
  }

  // uint32 storage_id = 2;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  // bool is_deleted = 5;
  if (this->_internal_is_deleted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Shard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Shard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Shard::GetClassData() const { return &_class_data_; }


void Shard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Shard*>(&to_msg);
  auto& from = static_cast<const Shard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.Shard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replicates_.MergeFrom(from._impl_.replicates_);
  if (!from._internal_leader().empty()) {
    _this->_internal_set_leader(from._internal_leader());
  }
  if (from._internal_has_replica_update_ts()) {
    _this->_internal_mutable_replica_update_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_replica_update_ts());
  }
  if (from._internal_has_deleted_ts()) {
    _this->_internal_mutable_deleted_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_deleted_ts());
  }
  if (from._internal_has_create_ts()) {
    _this->_internal_mutable_create_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_create_ts());
  }
  if (from._internal_has_leader_change_ts()) {
    _this->_internal_mutable_leader_change_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_leader_change_ts());
  }
  if (from._internal_isn() != 0) {
    _this->_internal_set_isn(from._internal_isn());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  if (from._internal_is_deleted() != 0) {
    _this->_internal_set_is_deleted(from._internal_is_deleted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Shard::CopyFrom(const Shard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.Shard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shard::IsInitialized() const {
  return true;
}

void Shard::InternalSwap(Shard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replicates_.InternalSwap(&other->_impl_.replicates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_, lhs_arena,
      &other->_impl_.leader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Shard, _impl_.is_deleted_)
      + sizeof(Shard::_impl_.is_deleted_)
      - PROTOBUF_FIELD_OFFSET(Shard, _impl_.replica_update_ts_)>(
          reinterpret_cast<char*>(&_impl_.replica_update_ts_),
          reinterpret_cast<char*>(&other->_impl_.replica_update_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Shard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[1]);
}

// ===================================================================

class DataServer::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_heartbeat_ts(const DataServer* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DataServer::_Internal::last_heartbeat_ts(const DataServer* msg) {
  return *msg->_impl_.last_heartbeat_ts_;
}
void DataServer::clear_last_heartbeat_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_heartbeat_ts_ != nullptr) {
    delete _impl_.last_heartbeat_ts_;
  }
  _impl_.last_heartbeat_ts_ = nullptr;
}
DataServer::DataServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.DataServer)
}
DataServer::DataServer(const DataServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.idc_){}
    , decltype(_impl_.last_heartbeat_ts_){nullptr}
    , decltype(_impl_.capacity_){}
    , decltype(_impl_.free_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), 
      _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idc().empty()) {
    _this->_impl_.idc_.Set(from._internal_idc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_heartbeat_ts()) {
    _this->_impl_.last_heartbeat_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_heartbeat_ts_);
  }
  ::memcpy(&_impl_.capacity_, &from._impl_.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.free_) -
    reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.free_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.DataServer)
}

inline void DataServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.idc_){}
    , decltype(_impl_.last_heartbeat_ts_){nullptr}
    , decltype(_impl_.capacity_){uint64_t{0u}}
    , decltype(_impl_.free_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataServer::~DataServer() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.DataServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.port_.Destroy();
  _impl_.status_.Destroy();
  _impl_.idc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_heartbeat_ts_;
}

void DataServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataServer::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.DataServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.port_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _impl_.idc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_heartbeat_ts_ != nullptr) {
    delete _impl_.last_heartbeat_ts_;
  }
  _impl_.last_heartbeat_ts_ = nullptr;
  ::memset(&_impl_.capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.free_) -
      reinterpret_cast<char*>(&_impl_.capacity_)) + sizeof(_impl_.free_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.DataServer.ip"));
        } else
          goto handle_unusual;
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.DataServer.port"));
        } else
          goto handle_unusual;
        continue;
      // uint64 capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 free = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_heartbeat_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_heartbeat_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.DataServer.status"));
        } else
          goto handle_unusual;
        continue;
      // string idc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_idc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.DataServer.idc"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.DataServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.DataServer.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.DataServer.port");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  // uint64 capacity = 3;
  if (this->_internal_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_capacity(), target);
  }

  // uint64 free = 4;
  if (this->_internal_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_free(), target);
  }

  // .google.protobuf.Timestamp last_heartbeat_ts = 5;
  if (this->_internal_has_last_heartbeat_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_heartbeat_ts(this),
        _Internal::last_heartbeat_ts(this).GetCachedSize(), target, stream);
  }

  // string status = 6;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.DataServer.status");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_status(), target);
  }

  // string idc = 7;
  if (!this->_internal_idc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idc().data(), static_cast<int>(this->_internal_idc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.DataServer.idc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_idc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.DataServer)
  return target;
}

size_t DataServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.DataServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // string status = 6;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string idc = 7;
  if (!this->_internal_idc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idc());
  }

  // .google.protobuf.Timestamp last_heartbeat_ts = 5;
  if (this->_internal_has_last_heartbeat_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_heartbeat_ts_);
  }

  // uint64 capacity = 3;
  if (this->_internal_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_capacity());
  }

  // uint64 free = 4;
  if (this->_internal_free() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_free());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataServer::GetClassData() const { return &_class_data_; }


void DataServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataServer*>(&to_msg);
  auto& from = static_cast<const DataServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.DataServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_idc().empty()) {
    _this->_internal_set_idc(from._internal_idc());
  }
  if (from._internal_has_last_heartbeat_ts()) {
    _this->_internal_mutable_last_heartbeat_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_heartbeat_ts());
  }
  if (from._internal_capacity() != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  if (from._internal_free() != 0) {
    _this->_internal_set_free(from._internal_free());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataServer::CopyFrom(const DataServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.DataServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataServer::IsInitialized() const {
  return true;
}

void DataServer::InternalSwap(DataServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.port_, lhs_arena,
      &other->_impl_.port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idc_, lhs_arena,
      &other->_impl_.idc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataServer, _impl_.free_)
      + sizeof(DataServer::_impl_.free_)
      - PROTOBUF_FIELD_OFFSET(DataServer, _impl_.last_heartbeat_ts_)>(
          reinterpret_cast<char*>(&_impl_.last_heartbeat_ts_),
          reinterpret_cast<char*>(&other->_impl_.last_heartbeat_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[2]);
}

// ===================================================================

class Replicate::_Internal {
 public:
};

Replicate::Replicate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.Replicate)
}
Replicate::Replicate(const Replicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Replicate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addrs_){from._impl_.addrs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.Replicate)
}

inline void Replicate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addrs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Replicate::~Replicate() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.Replicate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Replicate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addrs_.~RepeatedPtrField();
}

void Replicate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Replicate::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.Replicate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addrs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Replicate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string addrs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addrs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.Replicate.addrs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Replicate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.Replicate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addrs = 1;
  for (int i = 0, n = this->_internal_addrs_size(); i < n; i++) {
    const auto& s = this->_internal_addrs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.Replicate.addrs");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.Replicate)
  return target;
}

size_t Replicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.Replicate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addrs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.addrs_.size());
  for (int i = 0, n = _impl_.addrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.addrs_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Replicate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Replicate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Replicate::GetClassData() const { return &_class_data_; }


void Replicate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Replicate*>(&to_msg);
  auto& from = static_cast<const Replicate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.Replicate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.addrs_.MergeFrom(from._impl_.addrs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Replicate::CopyFrom(const Replicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.Replicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replicate::IsInitialized() const {
  return true;
}

void Replicate::InternalSwap(Replicate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.addrs_.InternalSwap(&other->_impl_.addrs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Replicate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[3]);
}

// ===================================================================

class HeartBeatRequest::_Internal {
 public:
};

HeartBeatRequest::HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.restarting_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.restarting_ = from._impl_.restarting_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.HeartBeatRequest)
}

inline void HeartBeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.restarting_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.HeartBeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void HeartBeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.HeartBeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _impl_.restarting_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.HeartBeatRequest.addr"));
        } else
          goto handle_unusual;
        continue;
      // bool restarting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.restarting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.HeartBeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.HeartBeatRequest.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // bool restarting = 2;
  if (this->_internal_restarting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_restarting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.HeartBeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // bool restarting = 2;
  if (this->_internal_restarting() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatRequest::GetClassData() const { return &_class_data_; }


void HeartBeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatRequest*>(&to_msg);
  auto& from = static_cast<const HeartBeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_restarting() != 0) {
    _this->_internal_set_restarting(from._internal_restarting());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  return true;
}

void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  swap(_impl_.restarting_, other->_impl_.restarting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[4]);
}

// ===================================================================

class HeartBeatResponse::_Internal {
 public:
};

HeartBeatResponse::HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  HeartBeatResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.HeartBeatResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[5]);
}

// ===================================================================

class CreateStorageRequest::_Internal {
 public:
};

CreateStorageRequest::CreateStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.CreateStorageRequest)
}
CreateStorageRequest::CreateStorageRequest(const CreateStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateStorageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.initial_range_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.initial_range_count_ = from._impl_.initial_range_count_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.CreateStorageRequest)
}

inline void CreateStorageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.initial_range_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateStorageRequest::~CreateStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.CreateStorageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CreateStorageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.CreateStorageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.initial_range_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateStorageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.CreateStorageRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 initial_range_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.initial_range_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateStorageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.CreateStorageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.CreateStorageRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 initial_range_count = 2;
  if (this->_internal_initial_range_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_initial_range_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.CreateStorageRequest)
  return target;
}

size_t CreateStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.CreateStorageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 initial_range_count = 2;
  if (this->_internal_initial_range_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_initial_range_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateStorageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateStorageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateStorageRequest::GetClassData() const { return &_class_data_; }


void CreateStorageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateStorageRequest*>(&to_msg);
  auto& from = static_cast<const CreateStorageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.CreateStorageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_initial_range_count() != 0) {
    _this->_internal_set_initial_range_count(from._internal_initial_range_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateStorageRequest::CopyFrom(const CreateStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.CreateStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStorageRequest::IsInitialized() const {
  return true;
}

void CreateStorageRequest::InternalSwap(CreateStorageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.initial_range_count_, other->_impl_.initial_range_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStorageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[6]);
}

// ===================================================================

class CreateStorageResponse::_Internal {
 public:
};

CreateStorageResponse::CreateStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.CreateStorageResponse)
}
CreateStorageResponse::CreateStorageResponse(const CreateStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateStorageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.CreateStorageResponse)
}

inline void CreateStorageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateStorageResponse::~CreateStorageResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.CreateStorageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateStorageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateStorageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateStorageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.CreateStorageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateStorageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateStorageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.CreateStorageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.CreateStorageResponse)
  return target;
}

size_t CreateStorageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.CreateStorageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateStorageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateStorageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateStorageResponse::GetClassData() const { return &_class_data_; }


void CreateStorageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateStorageResponse*>(&to_msg);
  auto& from = static_cast<const CreateStorageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.CreateStorageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateStorageResponse::CopyFrom(const CreateStorageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.CreateStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStorageResponse::IsInitialized() const {
  return true;
}

void CreateStorageResponse::InternalSwap(CreateStorageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateStorageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[7]);
}

// ===================================================================

class CreateShardRequest::_Internal {
 public:
};

CreateShardRequest::CreateShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.CreateShardRequest)
}
CreateShardRequest::CreateShardRequest(const CreateShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateShardRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.storage_id_){}
    , decltype(_impl_.shard_isn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.storage_id_, &from._impl_.storage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shard_isn_) -
    reinterpret_cast<char*>(&_impl_.storage_id_)) + sizeof(_impl_.shard_isn_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.CreateShardRequest)
}

inline void CreateShardRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.storage_id_){0u}
    , decltype(_impl_.shard_isn_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateShardRequest::~CreateShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.CreateShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateShardRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.CreateShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shard_isn_) -
      reinterpret_cast<char*>(&_impl_.storage_id_)) + sizeof(_impl_.shard_isn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 shard_isn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shard_isn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.CreateShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint32 shard_isn = 2;
  if (this->_internal_shard_isn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shard_isn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.CreateShardRequest)
  return target;
}

size_t CreateShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.CreateShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  // uint32 shard_isn = 2;
  if (this->_internal_shard_isn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shard_isn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateShardRequest::GetClassData() const { return &_class_data_; }


void CreateShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateShardRequest*>(&to_msg);
  auto& from = static_cast<const CreateShardRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.CreateShardRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  if (from._internal_shard_isn() != 0) {
    _this->_internal_set_shard_isn(from._internal_shard_isn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateShardRequest::CopyFrom(const CreateShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.CreateShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateShardRequest::IsInitialized() const {
  return true;
}

void CreateShardRequest::InternalSwap(CreateShardRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateShardRequest, _impl_.shard_isn_)
      + sizeof(CreateShardRequest::_impl_.shard_isn_)
      - PROTOBUF_FIELD_OFFSET(CreateShardRequest, _impl_.storage_id_)>(
          reinterpret_cast<char*>(&_impl_.storage_id_),
          reinterpret_cast<char*>(&other->_impl_.storage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[8]);
}

// ===================================================================

class CreateShardResponse::_Internal {
 public:
};

CreateShardResponse::CreateShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.CreateShardResponse)
}
CreateShardResponse::CreateShardResponse(const CreateShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CreateShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.CreateShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CreateShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[9]);
}

// ===================================================================

class RemoveShardRequest::_Internal {
 public:
};

RemoveShardRequest::RemoveShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RemoveShardRequest)
}
RemoveShardRequest::RemoveShardRequest(const RemoveShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveShardRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.storage_id_){}
    , decltype(_impl_.shard_isn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.storage_id_, &from._impl_.storage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shard_isn_) -
    reinterpret_cast<char*>(&_impl_.storage_id_)) + sizeof(_impl_.shard_isn_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RemoveShardRequest)
}

inline void RemoveShardRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.storage_id_){0u}
    , decltype(_impl_.shard_isn_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveShardRequest::~RemoveShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RemoveShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveShardRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RemoveShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shard_isn_) -
      reinterpret_cast<char*>(&_impl_.storage_id_)) + sizeof(_impl_.shard_isn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 shard_isn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shard_isn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RemoveShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint32 shard_isn = 2;
  if (this->_internal_shard_isn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shard_isn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RemoveShardRequest)
  return target;
}

size_t RemoveShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RemoveShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  // uint32 shard_isn = 2;
  if (this->_internal_shard_isn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_shard_isn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveShardRequest::GetClassData() const { return &_class_data_; }


void RemoveShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveShardRequest*>(&to_msg);
  auto& from = static_cast<const RemoveShardRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RemoveShardRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  if (from._internal_shard_isn() != 0) {
    _this->_internal_set_shard_isn(from._internal_shard_isn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveShardRequest::CopyFrom(const RemoveShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RemoveShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveShardRequest::IsInitialized() const {
  return true;
}

void RemoveShardRequest::InternalSwap(RemoveShardRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveShardRequest, _impl_.shard_isn_)
      + sizeof(RemoveShardRequest::_impl_.shard_isn_)
      - PROTOBUF_FIELD_OFFSET(RemoveShardRequest, _impl_.storage_id_)>(
          reinterpret_cast<char*>(&_impl_.storage_id_),
          reinterpret_cast<char*>(&other->_impl_.storage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[10]);
}

// ===================================================================

class RemoveShardResponse::_Internal {
 public:
};

RemoveShardResponse::RemoveShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RemoveShardResponse)
}
RemoveShardResponse::RemoveShardResponse(const RemoveShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RemoveShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RemoveShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[11]);
}

// ===================================================================

class DeleteStorageRequest::_Internal {
 public:
};

DeleteStorageRequest::DeleteStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.DeleteStorageRequest)
}
DeleteStorageRequest::DeleteStorageRequest(const DeleteStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteStorageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.real_delete_){}
    , decltype(_impl_.recycle_after_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.recycle_after_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.recycle_after_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.DeleteStorageRequest)
}

inline void DeleteStorageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.real_delete_){false}
    , decltype(_impl_.recycle_after_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteStorageRequest::~DeleteStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.DeleteStorageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteStorageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.DeleteStorageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.recycle_after_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.recycle_after_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteStorageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool real_delete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.real_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 recycle_after = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.recycle_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteStorageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.DeleteStorageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bool real_delete = 2;
  if (this->_internal_real_delete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_real_delete(), target);
  }

  // uint64 recycle_after = 3;
  if (this->_internal_recycle_after() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_recycle_after(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.DeleteStorageRequest)
  return target;
}

size_t DeleteStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.DeleteStorageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // bool real_delete = 2;
  if (this->_internal_real_delete() != 0) {
    total_size += 1 + 1;
  }

  // uint64 recycle_after = 3;
  if (this->_internal_recycle_after() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_recycle_after());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteStorageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteStorageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteStorageRequest::GetClassData() const { return &_class_data_; }


void DeleteStorageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteStorageRequest*>(&to_msg);
  auto& from = static_cast<const DeleteStorageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.DeleteStorageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_real_delete() != 0) {
    _this->_internal_set_real_delete(from._internal_real_delete());
  }
  if (from._internal_recycle_after() != 0) {
    _this->_internal_set_recycle_after(from._internal_recycle_after());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteStorageRequest::CopyFrom(const DeleteStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.DeleteStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStorageRequest::IsInitialized() const {
  return true;
}

void DeleteStorageRequest::InternalSwap(DeleteStorageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteStorageRequest, _impl_.recycle_after_)
      + sizeof(DeleteStorageRequest::_impl_.recycle_after_)
      - PROTOBUF_FIELD_OFFSET(DeleteStorageRequest, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStorageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[12]);
}

// ===================================================================

class DeleteStorageResponse::_Internal {
 public:
};

DeleteStorageResponse::DeleteStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.DeleteStorageResponse)
}
DeleteStorageResponse::DeleteStorageResponse(const DeleteStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteStorageResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.DeleteStorageResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteStorageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteStorageResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteStorageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[13]);
}

// ===================================================================

class UndeleteStorageRequest::_Internal {
 public:
};

UndeleteStorageRequest::UndeleteStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.UndeleteStorageRequest)
}
UndeleteStorageRequest::UndeleteStorageRequest(const UndeleteStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UndeleteStorageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.UndeleteStorageRequest)
}

inline void UndeleteStorageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UndeleteStorageRequest::~UndeleteStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.UndeleteStorageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UndeleteStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UndeleteStorageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UndeleteStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.UndeleteStorageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UndeleteStorageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UndeleteStorageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.UndeleteStorageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.UndeleteStorageRequest)
  return target;
}

size_t UndeleteStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.UndeleteStorageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndeleteStorageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UndeleteStorageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndeleteStorageRequest::GetClassData() const { return &_class_data_; }


void UndeleteStorageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UndeleteStorageRequest*>(&to_msg);
  auto& from = static_cast<const UndeleteStorageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.UndeleteStorageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UndeleteStorageRequest::CopyFrom(const UndeleteStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.UndeleteStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndeleteStorageRequest::IsInitialized() const {
  return true;
}

void UndeleteStorageRequest::InternalSwap(UndeleteStorageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UndeleteStorageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[14]);
}

// ===================================================================

class UndeleteStorageResponse::_Internal {
 public:
};

UndeleteStorageResponse::UndeleteStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.UndeleteStorageResponse)
}
UndeleteStorageResponse::UndeleteStorageResponse(const UndeleteStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UndeleteStorageResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.UndeleteStorageResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UndeleteStorageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UndeleteStorageResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UndeleteStorageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[15]);
}

// ===================================================================

class RenameStorageRequest::_Internal {
 public:
};

RenameStorageRequest::RenameStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RenameStorageRequest)
}
RenameStorageRequest::RenameStorageRequest(const RenameStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenameStorageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.new_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_name().empty()) {
    _this->_impl_.new_name_.Set(from._internal_new_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RenameStorageRequest)
}

inline void RenameStorageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_name_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.new_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenameStorageRequest::~RenameStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RenameStorageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenameStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_name_.Destroy();
}

void RenameStorageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenameStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RenameStorageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_name_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameStorageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string new_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.RenameStorageRequest.new_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenameStorageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RenameStorageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string new_name = 2;
  if (!this->_internal_new_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_name().data(), static_cast<int>(this->_internal_new_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.RenameStorageRequest.new_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RenameStorageRequest)
  return target;
}

size_t RenameStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RenameStorageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_name = 2;
  if (!this->_internal_new_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_name());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameStorageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenameStorageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameStorageRequest::GetClassData() const { return &_class_data_; }


void RenameStorageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenameStorageRequest*>(&to_msg);
  auto& from = static_cast<const RenameStorageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RenameStorageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_new_name().empty()) {
    _this->_internal_set_new_name(from._internal_new_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameStorageRequest::CopyFrom(const RenameStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RenameStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameStorageRequest::IsInitialized() const {
  return true;
}

void RenameStorageRequest::InternalSwap(RenameStorageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_name_, lhs_arena,
      &other->_impl_.new_name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameStorageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[16]);
}

// ===================================================================

class RenameStorageResponse::_Internal {
 public:
};

RenameStorageResponse::RenameStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RenameStorageResponse)
}
RenameStorageResponse::RenameStorageResponse(const RenameStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RenameStorageResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RenameStorageResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameStorageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameStorageResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RenameStorageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[17]);
}

// ===================================================================

class ResizeStorageRequest::_Internal {
 public:
};

ResizeStorageRequest::ResizeStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ResizeStorageRequest)
}
ResizeStorageRequest::ResizeStorageRequest(const ResizeStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResizeStorageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_size_){}
    , decltype(_impl_.new_shard_count_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.new_size_, &from._impl_.new_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.new_size_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ResizeStorageRequest)
}

inline void ResizeStorageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_size_){uint64_t{0u}}
    , decltype(_impl_.new_shard_count_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResizeStorageRequest::~ResizeStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ResizeStorageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResizeStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResizeStorageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResizeStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ResizeStorageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.new_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.new_size_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResizeStorageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 new_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.new_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 new_shard_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.new_shard_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResizeStorageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ResizeStorageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint64 new_size = 2;
  if (this->_internal_new_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_new_size(), target);
  }

  // uint64 new_shard_count = 3;
  if (this->_internal_new_shard_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_new_shard_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ResizeStorageRequest)
  return target;
}

size_t ResizeStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ResizeStorageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 new_size = 2;
  if (this->_internal_new_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_size());
  }

  // uint64 new_shard_count = 3;
  if (this->_internal_new_shard_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_shard_count());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResizeStorageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResizeStorageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResizeStorageRequest::GetClassData() const { return &_class_data_; }


void ResizeStorageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResizeStorageRequest*>(&to_msg);
  auto& from = static_cast<const ResizeStorageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ResizeStorageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_new_size() != 0) {
    _this->_internal_set_new_size(from._internal_new_size());
  }
  if (from._internal_new_shard_count() != 0) {
    _this->_internal_set_new_shard_count(from._internal_new_shard_count());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResizeStorageRequest::CopyFrom(const ResizeStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ResizeStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeStorageRequest::IsInitialized() const {
  return true;
}

void ResizeStorageRequest::InternalSwap(ResizeStorageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResizeStorageRequest, _impl_.id_)
      + sizeof(ResizeStorageRequest::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(ResizeStorageRequest, _impl_.new_size_)>(
          reinterpret_cast<char*>(&_impl_.new_size_),
          reinterpret_cast<char*>(&other->_impl_.new_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResizeStorageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[18]);
}

// ===================================================================

class ResizeStorageResponse::_Internal {
 public:
};

ResizeStorageResponse::ResizeStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ResizeStorageResponse)
}
ResizeStorageResponse::ResizeStorageResponse(const ResizeStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResizeStorageResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ResizeStorageResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResizeStorageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResizeStorageResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResizeStorageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[19]);
}

// ===================================================================

class GetStoragesRequest::_Internal {
 public:
};

GetStoragesRequest::GetStoragesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetStoragesRequest)
}
GetStoragesRequest::GetStoragesRequest(const GetStoragesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStoragesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.names_){from._impl_.names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetStoragesRequest)
}

inline void GetStoragesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , decltype(_impl_.names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStoragesRequest::~GetStoragesRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetStoragesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStoragesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  _impl_.names_.~RepeatedPtrField();
}

void GetStoragesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStoragesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetStoragesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStoragesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.GetStoragesRequest.names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStoragesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetStoragesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.GetStoragesRequest.names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetStoragesRequest)
  return target;
}

size_t GetStoragesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetStoragesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStoragesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStoragesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStoragesRequest::GetClassData() const { return &_class_data_; }


void GetStoragesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStoragesRequest*>(&to_msg);
  auto& from = static_cast<const GetStoragesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetStoragesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStoragesRequest::CopyFrom(const GetStoragesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetStoragesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoragesRequest::IsInitialized() const {
  return true;
}

void GetStoragesRequest::InternalSwap(GetStoragesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoragesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[20]);
}

// ===================================================================

class GetStoragesResponse::_Internal {
 public:
};

GetStoragesResponse::GetStoragesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetStoragesResponse)
}
GetStoragesResponse::GetStoragesResponse(const GetStoragesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStoragesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.storages_){from._impl_.storages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetStoragesResponse)
}

inline void GetStoragesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.storages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStoragesResponse::~GetStoragesResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetStoragesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStoragesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.storages_.~RepeatedPtrField();
}

void GetStoragesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStoragesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetStoragesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.storages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStoragesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bedrock.metaserver.Storage storages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_storages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStoragesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetStoragesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.Storage storages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_storages_size()); i < n; i++) {
    const auto& repfield = this->_internal_storages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetStoragesResponse)
  return target;
}

size_t GetStoragesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetStoragesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.Storage storages = 1;
  total_size += 1UL * this->_internal_storages_size();
  for (const auto& msg : this->_impl_.storages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStoragesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStoragesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStoragesResponse::GetClassData() const { return &_class_data_; }


void GetStoragesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStoragesResponse*>(&to_msg);
  auto& from = static_cast<const GetStoragesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetStoragesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.storages_.MergeFrom(from._impl_.storages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStoragesResponse::CopyFrom(const GetStoragesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetStoragesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoragesResponse::IsInitialized() const {
  return true;
}

void GetStoragesResponse::InternalSwap(GetStoragesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.storages_.InternalSwap(&other->_impl_.storages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStoragesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[21]);
}

// ===================================================================

class ShardRange::_Internal {
 public:
};

ShardRange::ShardRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ShardRange)
}
ShardRange::ShardRange(const ShardRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_shard_id_){}
    , decltype(_impl_.offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_shard_id_, &from._impl_.start_shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.start_shard_id_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ShardRange)
}

inline void ShardRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_shard_id_){uint64_t{0u}}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardRange::~ShardRange() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ShardRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardRange::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ShardRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.start_shard_id_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 start_shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ShardRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_shard_id = 1;
  if (this->_internal_start_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start_shard_id(), target);
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ShardRange)
  return target;
}

size_t ShardRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ShardRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_shard_id = 1;
  if (this->_internal_start_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_shard_id());
  }

  // uint64 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardRange::GetClassData() const { return &_class_data_; }


void ShardRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardRange*>(&to_msg);
  auto& from = static_cast<const ShardRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ShardRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_shard_id() != 0) {
    _this->_internal_set_start_shard_id(from._internal_start_shard_id());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardRange::CopyFrom(const ShardRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ShardRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardRange::IsInitialized() const {
  return true;
}

void ShardRange::InternalSwap(ShardRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardRange, _impl_.offset_)
      + sizeof(ShardRange::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(ShardRange, _impl_.start_shard_id_)>(
          reinterpret_cast<char*>(&_impl_.start_shard_id_),
          reinterpret_cast<char*>(&other->_impl_.start_shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[22]);
}

// ===================================================================

class RouteRecord::_Internal {
 public:
};

RouteRecord::RouteRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RouteRecord)
}
RouteRecord::RouteRecord(const RouteRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addrs_){from._impl_.addrs_}
    , decltype(_impl_.leader_addr_){}
    , decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader_addr().empty()) {
    _this->_impl_.leader_addr_.Set(from._internal_leader_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RouteRecord)
}

inline void RouteRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addrs_){arena}
    , decltype(_impl_.leader_addr_){}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leader_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteRecord::~RouteRecord() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RouteRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addrs_.~RepeatedPtrField();
  _impl_.leader_addr_.Destroy();
}

void RouteRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RouteRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addrs_.Clear();
  _impl_.leader_addr_.ClearToEmpty();
  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_leader_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.RouteRecord.leader_addr"));
        } else
          goto handle_unusual;
        continue;
      // repeated string addrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addrs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.RouteRecord.addrs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RouteRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // string leader_addr = 2;
  if (!this->_internal_leader_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_addr().data(), static_cast<int>(this->_internal_leader_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.RouteRecord.leader_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader_addr(), target);
  }

  // repeated string addrs = 3;
  for (int i = 0, n = this->_internal_addrs_size(); i < n; i++) {
    const auto& s = this->_internal_addrs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.RouteRecord.addrs");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RouteRecord)
  return target;
}

size_t RouteRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RouteRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addrs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.addrs_.size());
  for (int i = 0, n = _impl_.addrs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.addrs_.Get(i));
  }

  // string leader_addr = 2;
  if (!this->_internal_leader_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_addr());
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteRecord::GetClassData() const { return &_class_data_; }


void RouteRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteRecord*>(&to_msg);
  auto& from = static_cast<const RouteRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RouteRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.addrs_.MergeFrom(from._impl_.addrs_);
  if (!from._internal_leader_addr().empty()) {
    _this->_internal_set_leader_addr(from._internal_leader_addr());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteRecord::CopyFrom(const RouteRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RouteRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteRecord::IsInitialized() const {
  return true;
}

void RouteRecord::InternalSwap(RouteRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.addrs_.InternalSwap(&other->_impl_.addrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_addr_, lhs_arena,
      &other->_impl_.leader_addr_, rhs_arena
  );
  swap(_impl_.shard_id_, other->_impl_.shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[23]);
}

// ===================================================================

class ShardList::_Internal {
 public:
};

ShardList::ShardList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ShardList)
}
ShardList::ShardList(const ShardList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_ids_){from._impl_.shard_ids_}
    , /*decltype(_impl_._shard_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ShardList)
}

inline void ShardList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_ids_){arena}
    , /*decltype(_impl_._shard_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardList::~ShardList() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ShardList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shard_ids_.~RepeatedField();
}

void ShardList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardList::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ShardList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shard_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 shard_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_shard_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_shard_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ShardList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 shard_ids = 1;
  {
    int byte_size = _impl_._shard_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_shard_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ShardList)
  return target;
}

size_t ShardList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ShardList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 shard_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.shard_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shard_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardList::GetClassData() const { return &_class_data_; }


void ShardList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardList*>(&to_msg);
  auto& from = static_cast<const ShardList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ShardList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shard_ids_.MergeFrom(from._impl_.shard_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardList::CopyFrom(const ShardList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ShardList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardList::IsInitialized() const {
  return true;
}

void ShardList::InternalSwap(ShardList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shard_ids_.InternalSwap(&other->_impl_.shard_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[24]);
}

// ===================================================================

class GetShardRoutesRequest::_Internal {
 public:
  static const ::bedrock::metaserver::ShardList& shards_list(const GetShardRoutesRequest* msg);
  static const ::bedrock::metaserver::ShardRange& shard_range(const GetShardRoutesRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetShardRoutesRequest* msg);
};

const ::bedrock::metaserver::ShardList&
GetShardRoutesRequest::_Internal::shards_list(const GetShardRoutesRequest* msg) {
  return *msg->_impl_.shards_.shards_list_;
}
const ::bedrock::metaserver::ShardRange&
GetShardRoutesRequest::_Internal::shard_range(const GetShardRoutesRequest* msg) {
  return *msg->_impl_.shards_.shard_range_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetShardRoutesRequest::_Internal::timestamp(const GetShardRoutesRequest* msg) {
  return *msg->_impl_.timestamp_;
}
void GetShardRoutesRequest::set_allocated_shards_list(::bedrock::metaserver::ShardList* shards_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_shards();
  if (shards_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shards_list);
    if (message_arena != submessage_arena) {
      shards_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shards_list, submessage_arena);
    }
    set_has_shards_list();
    _impl_.shards_.shards_list_ = shards_list;
  }
  // @@protoc_insertion_point(field_set_allocated:bedrock.metaserver.GetShardRoutesRequest.shards_list)
}
void GetShardRoutesRequest::set_allocated_shard_range(::bedrock::metaserver::ShardRange* shard_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_shards();
  if (shard_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shard_range);
    if (message_arena != submessage_arena) {
      shard_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shard_range, submessage_arena);
    }
    set_has_shard_range();
    _impl_.shards_.shard_range_ = shard_range;
  }
  // @@protoc_insertion_point(field_set_allocated:bedrock.metaserver.GetShardRoutesRequest.shard_range)
}
void GetShardRoutesRequest::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
GetShardRoutesRequest::GetShardRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardRoutesRequest)
}
GetShardRoutesRequest::GetShardRoutesRequest(const GetShardRoutesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetShardRoutesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.shards_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  clear_has_shards();
  switch (from.shards_case()) {
    case kShardsList: {
      _this->_internal_mutable_shards_list()->::bedrock::metaserver::ShardList::MergeFrom(
          from._internal_shards_list());
      break;
    }
    case kShardRange: {
      _this->_internal_mutable_shard_range()->::bedrock::metaserver::ShardRange::MergeFrom(
          from._internal_shard_range());
      break;
    }
    case SHARDS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardRoutesRequest)
}

inline void GetShardRoutesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.shards_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_shards();
}

GetShardRoutesRequest::~GetShardRoutesRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardRoutesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetShardRoutesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (has_shards()) {
    clear_shards();
  }
}

void GetShardRoutesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetShardRoutesRequest::clear_shards() {
// @@protoc_insertion_point(one_of_clear_start:bedrock.metaserver.GetShardRoutesRequest)
  switch (shards_case()) {
    case kShardsList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.shards_.shards_list_;
      }
      break;
    }
    case kShardRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.shards_.shard_range_;
      }
      break;
    }
    case SHARDS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SHARDS_NOT_SET;
}


void GetShardRoutesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardRoutesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  clear_shards();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardRoutesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.metaserver.ShardList shards_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shards_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bedrock.metaserver.ShardRange shard_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardRoutesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardRoutesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.metaserver.ShardList shards_list = 1;
  if (_internal_has_shards_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shards_list(this),
        _Internal::shards_list(this).GetCachedSize(), target, stream);
  }

  // .bedrock.metaserver.ShardRange shard_range = 2;
  if (_internal_has_shard_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shard_range(this),
        _Internal::shard_range(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardRoutesRequest)
  return target;
}

size_t GetShardRoutesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardRoutesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  switch (shards_case()) {
    // .bedrock.metaserver.ShardList shards_list = 1;
    case kShardsList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shards_.shards_list_);
      break;
    }
    // .bedrock.metaserver.ShardRange shard_range = 2;
    case kShardRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shards_.shard_range_);
      break;
    }
    case SHARDS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardRoutesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetShardRoutesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardRoutesRequest::GetClassData() const { return &_class_data_; }


void GetShardRoutesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetShardRoutesRequest*>(&to_msg);
  auto& from = static_cast<const GetShardRoutesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardRoutesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  switch (from.shards_case()) {
    case kShardsList: {
      _this->_internal_mutable_shards_list()->::bedrock::metaserver::ShardList::MergeFrom(
          from._internal_shards_list());
      break;
    }
    case kShardRange: {
      _this->_internal_mutable_shard_range()->::bedrock::metaserver::ShardRange::MergeFrom(
          from._internal_shard_range());
      break;
    }
    case SHARDS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardRoutesRequest::CopyFrom(const GetShardRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardRoutesRequest::IsInitialized() const {
  return true;
}

void GetShardRoutesRequest::InternalSwap(GetShardRoutesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
  swap(_impl_.shards_, other->_impl_.shards_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardRoutesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[25]);
}

// ===================================================================

class GetShardRoutesResponse::_Internal {
 public:
};

GetShardRoutesResponse::GetShardRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardRoutesResponse)
}
GetShardRoutesResponse::GetShardRoutesResponse(const GetShardRoutesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetShardRoutesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_){from._impl_.routes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardRoutesResponse)
}

inline void GetShardRoutesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetShardRoutesResponse::~GetShardRoutesResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardRoutesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetShardRoutesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_.~RepeatedPtrField();
}

void GetShardRoutesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetShardRoutesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardRoutesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardRoutesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bedrock.metaserver.RouteRecord routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardRoutesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardRoutesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.RouteRecord routes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardRoutesResponse)
  return target;
}

size_t GetShardRoutesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardRoutesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.RouteRecord routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->_impl_.routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardRoutesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetShardRoutesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardRoutesResponse::GetClassData() const { return &_class_data_; }


void GetShardRoutesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetShardRoutesResponse*>(&to_msg);
  auto& from = static_cast<const GetShardRoutesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardRoutesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routes_.MergeFrom(from._impl_.routes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardRoutesResponse::CopyFrom(const GetShardRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardRoutesResponse::IsInitialized() const {
  return true;
}

void GetShardRoutesResponse::InternalSwap(GetShardRoutesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardRoutesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[26]);
}

// ===================================================================

class GetShardRoutesByStorageRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetShardRoutesByStorageRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetShardRoutesByStorageRequest::_Internal::timestamp(const GetShardRoutesByStorageRequest* msg) {
  return *msg->_impl_.timestamp_;
}
void GetShardRoutesByStorageRequest::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
GetShardRoutesByStorageRequest::GetShardRoutesByStorageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardRoutesByStorageRequest)
}
GetShardRoutesByStorageRequest::GetShardRoutesByStorageRequest(const GetShardRoutesByStorageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetShardRoutesByStorageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardRoutesByStorageRequest)
}

inline void GetShardRoutesByStorageRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetShardRoutesByStorageRequest::~GetShardRoutesByStorageRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardRoutesByStorageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetShardRoutesByStorageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void GetShardRoutesByStorageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetShardRoutesByStorageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardRoutesByStorageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardRoutesByStorageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardRoutesByStorageRequest)
  return target;
}

size_t GetShardRoutesByStorageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardRoutesByStorageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetShardRoutesByStorageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardRoutesByStorageRequest::GetClassData() const { return &_class_data_; }


void GetShardRoutesByStorageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetShardRoutesByStorageRequest*>(&to_msg);
  auto& from = static_cast<const GetShardRoutesByStorageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardRoutesByStorageRequest::CopyFrom(const GetShardRoutesByStorageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardRoutesByStorageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardRoutesByStorageRequest::IsInitialized() const {
  return true;
}

void GetShardRoutesByStorageRequest::InternalSwap(GetShardRoutesByStorageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetShardRoutesByStorageRequest, _impl_.storage_id_)
      + sizeof(GetShardRoutesByStorageRequest::_impl_.storage_id_)
      - PROTOBUF_FIELD_OFFSET(GetShardRoutesByStorageRequest, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardRoutesByStorageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[27]);
}

// ===================================================================

class GetShardRoutesByStorageResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetShardRoutesByStorageResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetShardRoutesByStorageResponse::_Internal::timestamp(const GetShardRoutesByStorageResponse* msg) {
  return *msg->_impl_.timestamp_;
}
void GetShardRoutesByStorageResponse::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
GetShardRoutesByStorageResponse::GetShardRoutesByStorageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardRoutesByStorageResponse)
}
GetShardRoutesByStorageResponse::GetShardRoutesByStorageResponse(const GetShardRoutesByStorageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetShardRoutesByStorageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_){from._impl_.routes_}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.is_full_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.is_full_ = from._impl_.is_full_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardRoutesByStorageResponse)
}

inline void GetShardRoutesByStorageResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_){arena}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.is_full_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetShardRoutesByStorageResponse::~GetShardRoutesByStorageResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardRoutesByStorageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetShardRoutesByStorageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void GetShardRoutesByStorageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetShardRoutesByStorageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.is_full_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardRoutesByStorageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bedrock.metaserver.RouteRecord routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_full = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_full_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardRoutesByStorageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.RouteRecord routes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // bool is_full = 3;
  if (this->_internal_is_full() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_full(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardRoutesByStorageResponse)
  return target;
}

size_t GetShardRoutesByStorageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.RouteRecord routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->_impl_.routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // bool is_full = 3;
  if (this->_internal_is_full() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardRoutesByStorageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetShardRoutesByStorageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardRoutesByStorageResponse::GetClassData() const { return &_class_data_; }


void GetShardRoutesByStorageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetShardRoutesByStorageResponse*>(&to_msg);
  auto& from = static_cast<const GetShardRoutesByStorageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routes_.MergeFrom(from._impl_.routes_);
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_is_full() != 0) {
    _this->_internal_set_is_full(from._internal_is_full());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardRoutesByStorageResponse::CopyFrom(const GetShardRoutesByStorageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardRoutesByStorageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardRoutesByStorageResponse::IsInitialized() const {
  return true;
}

void GetShardRoutesByStorageResponse::InternalSwap(GetShardRoutesByStorageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetShardRoutesByStorageResponse, _impl_.is_full_)
      + sizeof(GetShardRoutesByStorageResponse::_impl_.is_full_)
      - PROTOBUF_FIELD_OFFSET(GetShardRoutesByStorageResponse, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardRoutesByStorageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[28]);
}

// ===================================================================

class AddDataServerRequest::_Internal {
 public:
};

AddDataServerRequest::AddDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.AddDataServerRequest)
}
AddDataServerRequest::AddDataServerRequest(const AddDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddDataServerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.AddDataServerRequest)
}

inline void AddDataServerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddDataServerRequest::~AddDataServerRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.AddDataServerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddDataServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void AddDataServerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddDataServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.AddDataServerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDataServerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.AddDataServerRequest.addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddDataServerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.AddDataServerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.AddDataServerRequest.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.AddDataServerRequest)
  return target;
}

size_t AddDataServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.AddDataServerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddDataServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddDataServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddDataServerRequest::GetClassData() const { return &_class_data_; }


void AddDataServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddDataServerRequest*>(&to_msg);
  auto& from = static_cast<const AddDataServerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.AddDataServerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddDataServerRequest::CopyFrom(const AddDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.AddDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDataServerRequest::IsInitialized() const {
  return true;
}

void AddDataServerRequest::InternalSwap(AddDataServerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDataServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[29]);
}

// ===================================================================

class AddDataServerResponse::_Internal {
 public:
};

AddDataServerResponse::AddDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.AddDataServerResponse)
}
AddDataServerResponse::AddDataServerResponse(const AddDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AddDataServerResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.AddDataServerResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddDataServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddDataServerResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddDataServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[30]);
}

// ===================================================================

class RemoveDataServerRequest::_Internal {
 public:
};

RemoveDataServerRequest::RemoveDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RemoveDataServerRequest)
}
RemoveDataServerRequest::RemoveDataServerRequest(const RemoveDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveDataServerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RemoveDataServerRequest)
}

inline void RemoveDataServerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveDataServerRequest::~RemoveDataServerRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.RemoveDataServerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveDataServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void RemoveDataServerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveDataServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.RemoveDataServerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDataServerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.metaserver.RemoveDataServerRequest.addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveDataServerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.RemoveDataServerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.metaserver.RemoveDataServerRequest.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.RemoveDataServerRequest)
  return target;
}

size_t RemoveDataServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.RemoveDataServerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveDataServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveDataServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveDataServerRequest::GetClassData() const { return &_class_data_; }


void RemoveDataServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveDataServerRequest*>(&to_msg);
  auto& from = static_cast<const RemoveDataServerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.RemoveDataServerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveDataServerRequest::CopyFrom(const RemoveDataServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.RemoveDataServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDataServerRequest::IsInitialized() const {
  return true;
}

void RemoveDataServerRequest::InternalSwap(RemoveDataServerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDataServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[31]);
}

// ===================================================================

class RemoveDataServerResponse::_Internal {
 public:
};

RemoveDataServerResponse::RemoveDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.RemoveDataServerResponse)
}
RemoveDataServerResponse::RemoveDataServerResponse(const RemoveDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RemoveDataServerResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.RemoveDataServerResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveDataServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveDataServerResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveDataServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[32]);
}

// ===================================================================

class ListDataServerRequest::_Internal {
 public:
};

ListDataServerRequest::ListDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ListDataServerRequest)
}
ListDataServerRequest::ListDataServerRequest(const ListDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ListDataServerRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ListDataServerRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDataServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDataServerRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListDataServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[33]);
}

// ===================================================================

class ListDataServerResponse::_Internal {
 public:
};

ListDataServerResponse::ListDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ListDataServerResponse)
}
ListDataServerResponse::ListDataServerResponse(const ListDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDataServerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_servers_){from._impl_.data_servers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ListDataServerResponse)
}

inline void ListDataServerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_servers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDataServerResponse::~ListDataServerResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ListDataServerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDataServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_servers_.~RepeatedPtrField();
}

void ListDataServerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDataServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ListDataServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_servers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDataServerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bedrock.metaserver.DataServer data_servers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDataServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ListDataServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.DataServer data_servers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ListDataServerResponse)
  return target;
}

size_t ListDataServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ListDataServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.metaserver.DataServer data_servers = 1;
  total_size += 1UL * this->_internal_data_servers_size();
  for (const auto& msg : this->_impl_.data_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDataServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDataServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDataServerResponse::GetClassData() const { return &_class_data_; }


void ListDataServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDataServerResponse*>(&to_msg);
  auto& from = static_cast<const ListDataServerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ListDataServerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_servers_.MergeFrom(from._impl_.data_servers_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDataServerResponse::CopyFrom(const ListDataServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ListDataServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDataServerResponse::IsInitialized() const {
  return true;
}

void ListDataServerResponse::InternalSwap(ListDataServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_servers_.InternalSwap(&other->_impl_.data_servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDataServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[34]);
}

// ===================================================================

class UpdateDataServerRequest::_Internal {
 public:
};

UpdateDataServerRequest::UpdateDataServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.UpdateDataServerRequest)
}
UpdateDataServerRequest::UpdateDataServerRequest(const UpdateDataServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateDataServerRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.UpdateDataServerRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDataServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDataServerRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateDataServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[35]);
}

// ===================================================================

class UpdateDataServerResponse::_Internal {
 public:
};

UpdateDataServerResponse::UpdateDataServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.UpdateDataServerResponse)
}
UpdateDataServerResponse::UpdateDataServerResponse(const UpdateDataServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateDataServerResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.UpdateDataServerResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDataServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDataServerResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateDataServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[36]);
}

// ===================================================================

class ShardInfoRequest::_Internal {
 public:
};

ShardInfoRequest::ShardInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ShardInfoRequest)
}
ShardInfoRequest::ShardInfoRequest(const ShardInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ShardInfoRequest)
}

inline void ShardInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardInfoRequest::~ShardInfoRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ShardInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ShardInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ShardInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ShardInfoRequest)
  return target;
}

size_t ShardInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ShardInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardInfoRequest::GetClassData() const { return &_class_data_; }


void ShardInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardInfoRequest*>(&to_msg);
  auto& from = static_cast<const ShardInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ShardInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardInfoRequest::CopyFrom(const ShardInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ShardInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfoRequest::IsInitialized() const {
  return true;
}

void ShardInfoRequest::InternalSwap(ShardInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[37]);
}

// ===================================================================

class ShardInfoResponse::_Internal {
 public:
  static const ::bedrock::metaserver::Shard& shard(const ShardInfoResponse* msg);
};

const ::bedrock::metaserver::Shard&
ShardInfoResponse::_Internal::shard(const ShardInfoResponse* msg) {
  return *msg->_impl_.shard_;
}
ShardInfoResponse::ShardInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.ShardInfoResponse)
}
ShardInfoResponse::ShardInfoResponse(const ShardInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shard()) {
    _this->_impl_.shard_ = new ::bedrock::metaserver::Shard(*from._impl_.shard_);
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.ShardInfoResponse)
}

inline void ShardInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardInfoResponse::~ShardInfoResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.ShardInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shard_;
}

void ShardInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.ShardInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.shard_ != nullptr) {
    delete _impl_.shard_;
  }
  _impl_.shard_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.metaserver.Shard shard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.ShardInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.metaserver.Shard shard = 1;
  if (this->_internal_has_shard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shard(this),
        _Internal::shard(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.ShardInfoResponse)
  return target;
}

size_t ShardInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.ShardInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.metaserver.Shard shard = 1;
  if (this->_internal_has_shard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shard_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardInfoResponse::GetClassData() const { return &_class_data_; }


void ShardInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardInfoResponse*>(&to_msg);
  auto& from = static_cast<const ShardInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.ShardInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shard()) {
    _this->_internal_mutable_shard()->::bedrock::metaserver::Shard::MergeFrom(
        from._internal_shard());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardInfoResponse::CopyFrom(const ShardInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.ShardInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfoResponse::IsInitialized() const {
  return true;
}

void ShardInfoResponse::InternalSwap(ShardInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.shard_, other->_impl_.shard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[38]);
}

// ===================================================================

class GetShardIDByKeyRequest::_Internal {
 public:
};

GetShardIDByKeyRequest::GetShardIDByKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardIDByKeyRequest)
}
GetShardIDByKeyRequest::GetShardIDByKeyRequest(const GetShardIDByKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetShardIDByKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardIDByKeyRequest)
}

inline void GetShardIDByKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetShardIDByKeyRequest::~GetShardIDByKeyRequest() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardIDByKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetShardIDByKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void GetShardIDByKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetShardIDByKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardIDByKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardIDByKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardIDByKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardIDByKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardIDByKeyRequest)
  return target;
}

size_t GetShardIDByKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardIDByKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardIDByKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetShardIDByKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardIDByKeyRequest::GetClassData() const { return &_class_data_; }


void GetShardIDByKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetShardIDByKeyRequest*>(&to_msg);
  auto& from = static_cast<const GetShardIDByKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardIDByKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardIDByKeyRequest::CopyFrom(const GetShardIDByKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardIDByKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardIDByKeyRequest::IsInitialized() const {
  return true;
}

void GetShardIDByKeyRequest::InternalSwap(GetShardIDByKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.storage_id_, other->_impl_.storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardIDByKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[39]);
}

// ===================================================================

class GetShardIDByKeyResponse::_Internal {
 public:
};

GetShardIDByKeyResponse::GetShardIDByKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.metaserver.GetShardIDByKeyResponse)
}
GetShardIDByKeyResponse::GetShardIDByKeyResponse(const GetShardIDByKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetShardIDByKeyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.metaserver.GetShardIDByKeyResponse)
}

inline void GetShardIDByKeyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetShardIDByKeyResponse::~GetShardIDByKeyResponse() {
  // @@protoc_insertion_point(destructor:bedrock.metaserver.GetShardIDByKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetShardIDByKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetShardIDByKeyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetShardIDByKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.metaserver.GetShardIDByKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetShardIDByKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetShardIDByKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.metaserver.GetShardIDByKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.metaserver.GetShardIDByKeyResponse)
  return target;
}

size_t GetShardIDByKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.metaserver.GetShardIDByKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetShardIDByKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetShardIDByKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetShardIDByKeyResponse::GetClassData() const { return &_class_data_; }


void GetShardIDByKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetShardIDByKeyResponse*>(&to_msg);
  auto& from = static_cast<const GetShardIDByKeyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.metaserver.GetShardIDByKeyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetShardIDByKeyResponse::CopyFrom(const GetShardIDByKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.metaserver.GetShardIDByKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShardIDByKeyResponse::IsInitialized() const {
  return true;
}

void GetShardIDByKeyResponse::InternalSwap(GetShardIDByKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.shard_id_, other->_impl_.shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetShardIDByKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metaserver_2eproto_getter, &descriptor_table_metaserver_2eproto_once,
      file_level_metadata_metaserver_2eproto[40]);
}

// ===================================================================

MetaService::~MetaService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MetaService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metaserver_2eproto);
  return file_level_service_descriptors_metaserver_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* MetaService::GetDescriptor() {
  return descriptor();
}

void MetaService::HeartBeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::HeartBeatRequest*,
                         ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method HeartBeat() not implemented.");
  done->Run();
}

void MetaService::GetShardRoutes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::GetShardRoutesRequest*,
                         ::bedrock::metaserver::GetShardRoutesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetShardRoutes() not implemented.");
  done->Run();
}

void MetaService::ShardInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::ShardInfoRequest*,
                         ::bedrock::metaserver::ShardInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShardInfo() not implemented.");
  done->Run();
}

void MetaService::CreateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::CreateShardRequest*,
                         ::bedrock::metaserver::CreateShardResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateShard() not implemented.");
  done->Run();
}

void MetaService::RemoveShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::RemoveShardRequest*,
                         ::bedrock::metaserver::RemoveShardResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveShard() not implemented.");
  done->Run();
}

void MetaService::GetShardIDByKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::GetShardIDByKeyRequest*,
                         ::bedrock::metaserver::GetShardIDByKeyResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetShardIDByKey() not implemented.");
  done->Run();
}

void MetaService::CreateStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::CreateStorageRequest*,
                         ::bedrock::metaserver::CreateStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateStorage() not implemented.");
  done->Run();
}

void MetaService::DeleteStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::DeleteStorageRequest*,
                         ::bedrock::metaserver::DeleteStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteStorage() not implemented.");
  done->Run();
}

void MetaService::UndeleteStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::UndeleteStorageRequest*,
                         ::bedrock::metaserver::UndeleteStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UndeleteStorage() not implemented.");
  done->Run();
}

void MetaService::RenameStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::RenameStorageRequest*,
                         ::bedrock::metaserver::RenameStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenameStorage() not implemented.");
  done->Run();
}

void MetaService::ResizeStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::ResizeStorageRequest*,
                         ::bedrock::metaserver::ResizeStorageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ResizeStorage() not implemented.");
  done->Run();
}

void MetaService::GetStorages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::GetStoragesRequest*,
                         ::bedrock::metaserver::GetStoragesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetStorages() not implemented.");
  done->Run();
}

void MetaService::AddDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::AddDataServerRequest*,
                         ::bedrock::metaserver::AddDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddDataServer() not implemented.");
  done->Run();
}

void MetaService::RemoveDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::RemoveDataServerRequest*,
                         ::bedrock::metaserver::RemoveDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveDataServer() not implemented.");
  done->Run();
}

void MetaService::ListDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::ListDataServerRequest*,
                         ::bedrock::metaserver::ListDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ListDataServer() not implemented.");
  done->Run();
}

void MetaService::UpdateDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::metaserver::UpdateDataServerRequest*,
                         ::bedrock::metaserver::UpdateDataServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateDataServer() not implemented.");
  done->Run();
}

void MetaService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_metaserver_2eproto[0]);
  switch(method->index()) {
    case 0:
      HeartBeat(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::HeartBeatRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::PROTOBUF_NAMESPACE_ID::Empty*>(
                 response),
             done);
      break;
    case 1:
      GetShardRoutes(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::GetShardRoutesRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::GetShardRoutesResponse*>(
                 response),
             done);
      break;
    case 2:
      ShardInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::ShardInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::ShardInfoResponse*>(
                 response),
             done);
      break;
    case 3:
      CreateShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::CreateShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::CreateShardResponse*>(
                 response),
             done);
      break;
    case 4:
      RemoveShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::RemoveShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::RemoveShardResponse*>(
                 response),
             done);
      break;
    case 5:
      GetShardIDByKey(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::GetShardIDByKeyRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::GetShardIDByKeyResponse*>(
                 response),
             done);
      break;
    case 6:
      CreateStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::CreateStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::CreateStorageResponse*>(
                 response),
             done);
      break;
    case 7:
      DeleteStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::DeleteStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::DeleteStorageResponse*>(
                 response),
             done);
      break;
    case 8:
      UndeleteStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::UndeleteStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::UndeleteStorageResponse*>(
                 response),
             done);
      break;
    case 9:
      RenameStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::RenameStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::RenameStorageResponse*>(
                 response),
             done);
      break;
    case 10:
      ResizeStorage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::ResizeStorageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::ResizeStorageResponse*>(
                 response),
             done);
      break;
    case 11:
      GetStorages(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::GetStoragesRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::GetStoragesResponse*>(
                 response),
             done);
      break;
    case 12:
      AddDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::AddDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::AddDataServerResponse*>(
                 response),
             done);
      break;
    case 13:
      RemoveDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::RemoveDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::RemoveDataServerResponse*>(
                 response),
             done);
      break;
    case 14:
      ListDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::ListDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::ListDataServerResponse*>(
                 response),
             done);
      break;
    case 15:
      UpdateDataServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::metaserver::UpdateDataServerRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::metaserver::UpdateDataServerResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MetaService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bedrock::metaserver::HeartBeatRequest::default_instance();
    case 1:
      return ::bedrock::metaserver::GetShardRoutesRequest::default_instance();
    case 2:
      return ::bedrock::metaserver::ShardInfoRequest::default_instance();
    case 3:
      return ::bedrock::metaserver::CreateShardRequest::default_instance();
    case 4:
      return ::bedrock::metaserver::RemoveShardRequest::default_instance();
    case 5:
      return ::bedrock::metaserver::GetShardIDByKeyRequest::default_instance();
    case 6:
      return ::bedrock::metaserver::CreateStorageRequest::default_instance();
    case 7:
      return ::bedrock::metaserver::DeleteStorageRequest::default_instance();
    case 8:
      return ::bedrock::metaserver::UndeleteStorageRequest::default_instance();
    case 9:
      return ::bedrock::metaserver::RenameStorageRequest::default_instance();
    case 10:
      return ::bedrock::metaserver::ResizeStorageRequest::default_instance();
    case 11:
      return ::bedrock::metaserver::GetStoragesRequest::default_instance();
    case 12:
      return ::bedrock::metaserver::AddDataServerRequest::default_instance();
    case 13:
      return ::bedrock::metaserver::RemoveDataServerRequest::default_instance();
    case 14:
      return ::bedrock::metaserver::ListDataServerRequest::default_instance();
    case 15:
      return ::bedrock::metaserver::UpdateDataServerRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& MetaService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    case 1:
      return ::bedrock::metaserver::GetShardRoutesResponse::default_instance();
    case 2:
      return ::bedrock::metaserver::ShardInfoResponse::default_instance();
    case 3:
      return ::bedrock::metaserver::CreateShardResponse::default_instance();
    case 4:
      return ::bedrock::metaserver::RemoveShardResponse::default_instance();
    case 5:
      return ::bedrock::metaserver::GetShardIDByKeyResponse::default_instance();
    case 6:
      return ::bedrock::metaserver::CreateStorageResponse::default_instance();
    case 7:
      return ::bedrock::metaserver::DeleteStorageResponse::default_instance();
    case 8:
      return ::bedrock::metaserver::UndeleteStorageResponse::default_instance();
    case 9:
      return ::bedrock::metaserver::RenameStorageResponse::default_instance();
    case 10:
      return ::bedrock::metaserver::ResizeStorageResponse::default_instance();
    case 11:
      return ::bedrock::metaserver::GetStoragesResponse::default_instance();
    case 12:
      return ::bedrock::metaserver::AddDataServerResponse::default_instance();
    case 13:
      return ::bedrock::metaserver::RemoveDataServerResponse::default_instance();
    case 14:
      return ::bedrock::metaserver::ListDataServerResponse::default_instance();
    case 15:
      return ::bedrock::metaserver::UpdateDataServerResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MetaService_Stub::MetaService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MetaService_Stub::MetaService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
MetaService_Stub::~MetaService_Stub() {
  if (owns_channel_) delete channel_;
}

void MetaService_Stub::HeartBeat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::HeartBeatRequest* request,
                              ::PROTOBUF_NAMESPACE_ID::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MetaService_Stub::GetShardRoutes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::GetShardRoutesRequest* request,
                              ::bedrock::metaserver::GetShardRoutesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MetaService_Stub::ShardInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::ShardInfoRequest* request,
                              ::bedrock::metaserver::ShardInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void MetaService_Stub::CreateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::CreateShardRequest* request,
                              ::bedrock::metaserver::CreateShardResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void MetaService_Stub::RemoveShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::RemoveShardRequest* request,
                              ::bedrock::metaserver::RemoveShardResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void MetaService_Stub::GetShardIDByKey(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::GetShardIDByKeyRequest* request,
                              ::bedrock::metaserver::GetShardIDByKeyResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void MetaService_Stub::CreateStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::CreateStorageRequest* request,
                              ::bedrock::metaserver::CreateStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void MetaService_Stub::DeleteStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::DeleteStorageRequest* request,
                              ::bedrock::metaserver::DeleteStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void MetaService_Stub::UndeleteStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::UndeleteStorageRequest* request,
                              ::bedrock::metaserver::UndeleteStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void MetaService_Stub::RenameStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::RenameStorageRequest* request,
                              ::bedrock::metaserver::RenameStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void MetaService_Stub::ResizeStorage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::ResizeStorageRequest* request,
                              ::bedrock::metaserver::ResizeStorageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void MetaService_Stub::GetStorages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::GetStoragesRequest* request,
                              ::bedrock::metaserver::GetStoragesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void MetaService_Stub::AddDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::AddDataServerRequest* request,
                              ::bedrock::metaserver::AddDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void MetaService_Stub::RemoveDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::RemoveDataServerRequest* request,
                              ::bedrock::metaserver::RemoveDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void MetaService_Stub::ListDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::ListDataServerRequest* request,
                              ::bedrock::metaserver::ListDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void MetaService_Stub::UpdateDataServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::metaserver::UpdateDataServerRequest* request,
                              ::bedrock::metaserver::UpdateDataServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace metaserver
}  // namespace bedrock
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::Storage*
Arena::CreateMaybeMessage< ::bedrock::metaserver::Storage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::Storage >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::Shard*
Arena::CreateMaybeMessage< ::bedrock::metaserver::Shard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::Shard >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::DataServer*
Arena::CreateMaybeMessage< ::bedrock::metaserver::DataServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::DataServer >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::Replicate*
Arena::CreateMaybeMessage< ::bedrock::metaserver::Replicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::Replicate >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::HeartBeatRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::HeartBeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::HeartBeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::HeartBeatResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::HeartBeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::HeartBeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::CreateStorageRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::CreateStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::CreateStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::CreateStorageResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::CreateStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::CreateStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::CreateShardRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::CreateShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::CreateShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::CreateShardResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::CreateShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::CreateShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RemoveShardRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::RemoveShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RemoveShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RemoveShardResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::RemoveShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RemoveShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::DeleteStorageRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::DeleteStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::DeleteStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::DeleteStorageResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::DeleteStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::DeleteStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::UndeleteStorageRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::UndeleteStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::UndeleteStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::UndeleteStorageResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::UndeleteStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::UndeleteStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RenameStorageRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::RenameStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RenameStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RenameStorageResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::RenameStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RenameStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ResizeStorageRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::ResizeStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ResizeStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ResizeStorageResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::ResizeStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ResizeStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetStoragesRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::GetStoragesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetStoragesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetStoragesResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::GetStoragesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetStoragesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ShardRange*
Arena::CreateMaybeMessage< ::bedrock::metaserver::ShardRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ShardRange >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RouteRecord*
Arena::CreateMaybeMessage< ::bedrock::metaserver::RouteRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RouteRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ShardList*
Arena::CreateMaybeMessage< ::bedrock::metaserver::ShardList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ShardList >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardRoutesRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardRoutesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardRoutesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardRoutesResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardRoutesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardRoutesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardRoutesByStorageRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardRoutesByStorageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardRoutesByStorageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardRoutesByStorageResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardRoutesByStorageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardRoutesByStorageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::AddDataServerRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::AddDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::AddDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::AddDataServerResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::AddDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::AddDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RemoveDataServerRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::RemoveDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RemoveDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::RemoveDataServerResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::RemoveDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::RemoveDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ListDataServerRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::ListDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ListDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ListDataServerResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::ListDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ListDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::UpdateDataServerRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::UpdateDataServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::UpdateDataServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::UpdateDataServerResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::UpdateDataServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::UpdateDataServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ShardInfoRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::ShardInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ShardInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::ShardInfoResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::ShardInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::ShardInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardIDByKeyRequest*
Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardIDByKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardIDByKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::metaserver::GetShardIDByKeyResponse*
Arena::CreateMaybeMessage< ::bedrock::metaserver::GetShardIDByKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::metaserver::GetShardIDByKeyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
