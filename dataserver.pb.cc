// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataserver.proto

#include "dataserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bedrock {
namespace dataserver {
PROTOBUF_CONSTEXPR ShardMeta::ShardMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replicates_)*/{}
  , /*decltype(_impl_.leader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_ts_)*/nullptr
  , /*decltype(_impl_.replicates_update_ts_)*/nullptr
  , /*decltype(_impl_.leader_change_ts_)*/nullptr
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.last_wal_index_)*/uint64_t{0u}
  , /*decltype(_impl_.is_leader_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardMetaDefaultTypeInternal() {}
  union {
    ShardMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardMetaDefaultTypeInternal _ShardMeta_default_instance_;
PROTOBUF_CONSTEXPR SplitShardRequest::SplitShardRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.new_shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SplitShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitShardRequestDefaultTypeInternal() {}
  union {
    SplitShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitShardRequestDefaultTypeInternal _SplitShardRequest_default_instance_;
PROTOBUF_CONSTEXPR SplitShardResponse::SplitShardResponse(
    ::_pbi::ConstantInitialized) {}
struct SplitShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SplitShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SplitShardResponseDefaultTypeInternal() {}
  union {
    SplitShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SplitShardResponseDefaultTypeInternal _SplitShardResponse_default_instance_;
PROTOBUF_CONSTEXPR MergeShardRequest::MergeShardRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_a_)*/uint64_t{0u}
  , /*decltype(_impl_.shard_id_b_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MergeShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeShardRequestDefaultTypeInternal() {}
  union {
    MergeShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeShardRequestDefaultTypeInternal _MergeShardRequest_default_instance_;
PROTOBUF_CONSTEXPR MergeShardResponse::MergeShardResponse(
    ::_pbi::ConstantInitialized) {}
struct MergeShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeShardResponseDefaultTypeInternal() {}
  union {
    MergeShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeShardResponseDefaultTypeInternal _MergeShardResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateShardRequest::CreateShardRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replicates_)*/{}
  , /*decltype(_impl_.leader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_ts_)*/nullptr
  , /*decltype(_impl_.replica_update_ts_)*/nullptr
  , /*decltype(_impl_.leader_change_ts_)*/nullptr
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateShardRequestDefaultTypeInternal() {}
  union {
    CreateShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateShardRequestDefaultTypeInternal _CreateShardRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateShardResponse::CreateShardResponse(
    ::_pbi::ConstantInitialized) {}
struct CreateShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateShardResponseDefaultTypeInternal() {}
  union {
    CreateShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateShardResponseDefaultTypeInternal _CreateShardResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteShardRequest::DeleteShardRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteShardRequestDefaultTypeInternal() {}
  union {
    DeleteShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteShardRequestDefaultTypeInternal _DeleteShardRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteShardResponse::DeleteShardResponse(
    ::_pbi::ConstantInitialized) {}
struct DeleteShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteShardResponseDefaultTypeInternal() {}
  union {
    DeleteShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteShardResponseDefaultTypeInternal _DeleteShardResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardInfoRequest::ShardInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardInfoRequestDefaultTypeInternal() {}
  union {
    ShardInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardInfoRequestDefaultTypeInternal _ShardInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardInfoResponse::ShardInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replicates_)*/{}
  , /*decltype(_impl_.leader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_ts_)*/nullptr
  , /*decltype(_impl_.replicates_update_ts_)*/nullptr
  , /*decltype(_impl_.leader_change_ts_)*/nullptr
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.last_wal_index_)*/uint64_t{0u}
  , /*decltype(_impl_.is_leader_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardInfoResponseDefaultTypeInternal() {}
  union {
    ShardInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardInfoResponseDefaultTypeInternal _ShardInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR PullShardDataRequest::PullShardDataRequest(
    ::_pbi::ConstantInitialized) {}
struct PullShardDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullShardDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullShardDataRequestDefaultTypeInternal() {}
  union {
    PullShardDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullShardDataRequestDefaultTypeInternal _PullShardDataRequest_default_instance_;
PROTOBUF_CONSTEXPR PullShardDataResponse::PullShardDataResponse(
    ::_pbi::ConstantInitialized) {}
struct PullShardDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullShardDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullShardDataResponseDefaultTypeInternal() {}
  union {
    PullShardDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullShardDataResponseDefaultTypeInternal _PullShardDataResponse_default_instance_;
PROTOBUF_CONSTEXPR MigrateShardRequest_Entry::MigrateShardRequest_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MigrateShardRequest_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MigrateShardRequest_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MigrateShardRequest_EntryDefaultTypeInternal() {}
  union {
    MigrateShardRequest_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MigrateShardRequest_EntryDefaultTypeInternal _MigrateShardRequest_Entry_default_instance_;
PROTOBUF_CONSTEXPR MigrateShardRequest::MigrateShardRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.target_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shard_id_from_)*/uint64_t{0u}
  , /*decltype(_impl_.shard_id_to_)*/uint64_t{0u}
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MigrateShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MigrateShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MigrateShardRequestDefaultTypeInternal() {}
  union {
    MigrateShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MigrateShardRequestDefaultTypeInternal _MigrateShardRequest_default_instance_;
PROTOBUF_CONSTEXPR MigrateShardResponse::MigrateShardResponse(
    ::_pbi::ConstantInitialized) {}
struct MigrateShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MigrateShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MigrateShardResponseDefaultTypeInternal() {}
  union {
    MigrateShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MigrateShardResponseDefaultTypeInternal _MigrateShardResponse_default_instance_;
PROTOBUF_CONSTEXPR AddShardReplicaRequest::AddShardReplicaRequest(
    ::_pbi::ConstantInitialized) {}
struct AddShardReplicaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddShardReplicaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddShardReplicaRequestDefaultTypeInternal() {}
  union {
    AddShardReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddShardReplicaRequestDefaultTypeInternal _AddShardReplicaRequest_default_instance_;
PROTOBUF_CONSTEXPR AddShardReplicaResponse::AddShardReplicaResponse(
    ::_pbi::ConstantInitialized) {}
struct AddShardReplicaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddShardReplicaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddShardReplicaResponseDefaultTypeInternal() {}
  union {
    AddShardReplicaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddShardReplicaResponseDefaultTypeInternal _AddShardReplicaResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteShardReplicaRequest::DeleteShardReplicaRequest(
    ::_pbi::ConstantInitialized) {}
struct DeleteShardReplicaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteShardReplicaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteShardReplicaRequestDefaultTypeInternal() {}
  union {
    DeleteShardReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteShardReplicaRequestDefaultTypeInternal _DeleteShardReplicaRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteShardReplicaResponse::DeleteShardReplicaResponse(
    ::_pbi::ConstantInitialized) {}
struct DeleteShardReplicaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteShardReplicaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteShardReplicaResponseDefaultTypeInternal() {}
  union {
    DeleteShardReplicaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteShardReplicaResponseDefaultTypeInternal _DeleteShardReplicaResponse_default_instance_;
PROTOBUF_CONSTEXPR TransferShardLeaderRequest::TransferShardLeaderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replicates_)*/{}
  , /*decltype(_impl_.leader_change_ts_)*/nullptr
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferShardLeaderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferShardLeaderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferShardLeaderRequestDefaultTypeInternal() {}
  union {
    TransferShardLeaderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferShardLeaderRequestDefaultTypeInternal _TransferShardLeaderRequest_default_instance_;
PROTOBUF_CONSTEXPR TransferShardLeaderResponse::TransferShardLeaderResponse(
    ::_pbi::ConstantInitialized) {}
struct TransferShardLeaderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferShardLeaderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferShardLeaderResponseDefaultTypeInternal() {}
  union {
    TransferShardLeaderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferShardLeaderResponseDefaultTypeInternal _TransferShardLeaderResponse_default_instance_;
PROTOBUF_CONSTEXPR LockShardRequest::LockShardRequest(
    ::_pbi::ConstantInitialized) {}
struct LockShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LockShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LockShardRequestDefaultTypeInternal() {}
  union {
    LockShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LockShardRequestDefaultTypeInternal _LockShardRequest_default_instance_;
PROTOBUF_CONSTEXPR LockShardResponse::LockShardResponse(
    ::_pbi::ConstantInitialized) {}
struct LockShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LockShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LockShardResponseDefaultTypeInternal() {}
  union {
    LockShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LockShardResponseDefaultTypeInternal _LockShardResponse_default_instance_;
PROTOBUF_CONSTEXPR UnlockShardRequest::UnlockShardRequest(
    ::_pbi::ConstantInitialized) {}
struct UnlockShardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnlockShardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnlockShardRequestDefaultTypeInternal() {}
  union {
    UnlockShardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnlockShardRequestDefaultTypeInternal _UnlockShardRequest_default_instance_;
PROTOBUF_CONSTEXPR UnlockShardResponse::UnlockShardResponse(
    ::_pbi::ConstantInitialized) {}
struct UnlockShardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnlockShardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnlockShardResponseDefaultTypeInternal() {}
  union {
    UnlockShardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnlockShardResponseDefaultTypeInternal _UnlockShardResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardReadRequest::ShardReadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardReadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardReadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardReadRequestDefaultTypeInternal() {}
  union {
    ShardReadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardReadRequestDefaultTypeInternal _ShardReadRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardReadResponse::ShardReadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardReadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardReadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardReadResponseDefaultTypeInternal() {}
  union {
    ShardReadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardReadResponseDefaultTypeInternal _ShardReadResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardWriteRequest::ShardWriteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardWriteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardWriteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardWriteRequestDefaultTypeInternal() {}
  union {
    ShardWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardWriteRequestDefaultTypeInternal _ShardWriteRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardWriteResponse::ShardWriteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.not_leader_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardWriteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardWriteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardWriteResponseDefaultTypeInternal() {}
  union {
    ShardWriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardWriteResponseDefaultTypeInternal _ShardWriteResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardAppendLogRequest_Entry::ShardAppendLogRequest_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.op_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardAppendLogRequest_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardAppendLogRequest_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardAppendLogRequest_EntryDefaultTypeInternal() {}
  union {
    ShardAppendLogRequest_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardAppendLogRequest_EntryDefaultTypeInternal _ShardAppendLogRequest_Entry_default_instance_;
PROTOBUF_CONSTEXPR ShardAppendLogRequest::ShardAppendLogRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.leader_change_ts_)*/nullptr
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardAppendLogRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardAppendLogRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardAppendLogRequestDefaultTypeInternal() {}
  union {
    ShardAppendLogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardAppendLogRequestDefaultTypeInternal _ShardAppendLogRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardAppendLogResponse::ShardAppendLogResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_applied_index_)*/uint64_t{0u}
  , /*decltype(_impl_.is_old_leader_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardAppendLogResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardAppendLogResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardAppendLogResponseDefaultTypeInternal() {}
  union {
    ShardAppendLogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardAppendLogResponseDefaultTypeInternal _ShardAppendLogResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardInstallSnapshotRequest::ShardInstallSnapshotRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_piece_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shard_id_)*/uint64_t{0u}
  , /*decltype(_impl_.last_wal_index_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShardInstallSnapshotRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardInstallSnapshotRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardInstallSnapshotRequestDefaultTypeInternal() {}
  union {
    ShardInstallSnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardInstallSnapshotRequestDefaultTypeInternal _ShardInstallSnapshotRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardInstallSnapshotResponse::ShardInstallSnapshotResponse(
    ::_pbi::ConstantInitialized) {}
struct ShardInstallSnapshotResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardInstallSnapshotResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardInstallSnapshotResponseDefaultTypeInternal() {}
  union {
    ShardInstallSnapshotResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardInstallSnapshotResponseDefaultTypeInternal _ShardInstallSnapshotResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardWriteReplicaRequest::ShardWriteReplicaRequest(
    ::_pbi::ConstantInitialized) {}
struct ShardWriteReplicaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardWriteReplicaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardWriteReplicaRequestDefaultTypeInternal() {}
  union {
    ShardWriteReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardWriteReplicaRequestDefaultTypeInternal _ShardWriteReplicaRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardWriteReplicaResponse::ShardWriteReplicaResponse(
    ::_pbi::ConstantInitialized) {}
struct ShardWriteReplicaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardWriteReplicaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardWriteReplicaResponseDefaultTypeInternal() {}
  union {
    ShardWriteReplicaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardWriteReplicaResponseDefaultTypeInternal _ShardWriteReplicaResponse_default_instance_;
PROTOBUF_CONSTEXPR ShardRepairRequest::ShardRepairRequest(
    ::_pbi::ConstantInitialized) {}
struct ShardRepairRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardRepairRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardRepairRequestDefaultTypeInternal() {}
  union {
    ShardRepairRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardRepairRequestDefaultTypeInternal _ShardRepairRequest_default_instance_;
PROTOBUF_CONSTEXPR ShardRepairResponse::ShardRepairResponse(
    ::_pbi::ConstantInitialized) {}
struct ShardRepairResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShardRepairResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShardRepairResponseDefaultTypeInternal() {}
  union {
    ShardRepairResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShardRepairResponseDefaultTypeInternal _ShardRepairResponse_default_instance_;
PROTOBUF_CONSTEXPR DataServerJoinRequest::DataServerJoinRequest(
    ::_pbi::ConstantInitialized) {}
struct DataServerJoinRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataServerJoinRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataServerJoinRequestDefaultTypeInternal() {}
  union {
    DataServerJoinRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataServerJoinRequestDefaultTypeInternal _DataServerJoinRequest_default_instance_;
PROTOBUF_CONSTEXPR DataServerJoinResponse::DataServerJoinResponse(
    ::_pbi::ConstantInitialized) {}
struct DataServerJoinResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataServerJoinResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataServerJoinResponseDefaultTypeInternal() {}
  union {
    DataServerJoinResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataServerJoinResponseDefaultTypeInternal _DataServerJoinResponse_default_instance_;
PROTOBUF_CONSTEXPR DataServerLeaveRequest::DataServerLeaveRequest(
    ::_pbi::ConstantInitialized) {}
struct DataServerLeaveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataServerLeaveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataServerLeaveRequestDefaultTypeInternal() {}
  union {
    DataServerLeaveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataServerLeaveRequestDefaultTypeInternal _DataServerLeaveRequest_default_instance_;
PROTOBUF_CONSTEXPR DataServerLeaveResponse::DataServerLeaveResponse(
    ::_pbi::ConstantInitialized) {}
struct DataServerLeaveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataServerLeaveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataServerLeaveResponseDefaultTypeInternal() {}
  union {
    DataServerLeaveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataServerLeaveResponseDefaultTypeInternal _DataServerLeaveResponse_default_instance_;
}  // namespace dataserver
}  // namespace bedrock
static ::_pb::Metadata file_level_metadata_dataserver_2eproto[43];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dataserver_2eproto[1];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_dataserver_2eproto[1];

const uint32_t TableStruct_dataserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.replicates_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.replicates_update_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.is_leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.leader_change_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.last_wal_index_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.min_key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardMeta, _impl_.max_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::SplitShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::SplitShardRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::SplitShardRequest, _impl_.new_shard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::SplitShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MergeShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MergeShardRequest, _impl_.shard_id_a_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MergeShardRequest, _impl_.shard_id_b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MergeShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _impl_.replicates_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _impl_.replica_update_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _impl_.leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _impl_.leader_change_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _impl_.min_key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardRequest, _impl_.max_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::CreateShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DeleteShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DeleteShardRequest, _impl_.shard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DeleteShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoRequest, _impl_.shard_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _impl_.create_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _impl_.replicates_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _impl_.replicates_update_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _impl_.is_leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _impl_.leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _impl_.leader_change_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInfoResponse, _impl_.last_wal_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::PullShardDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::PullShardDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest_Entry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest_Entry, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest, _impl_.shard_id_from_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest, _impl_.shard_id_to_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest, _impl_.target_address_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardRequest, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::MigrateShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::AddShardReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::AddShardReplicaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DeleteShardReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DeleteShardReplicaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::TransferShardLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::TransferShardLeaderRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::TransferShardLeaderRequest, _impl_.replicates_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::TransferShardLeaderRequest, _impl_.leader_change_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::TransferShardLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::LockShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::LockShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::UnlockShardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::UnlockShardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardReadRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardReadRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardReadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardReadResponse, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardWriteRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardWriteRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardWriteRequest, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardWriteResponse, _impl_.not_leader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest_Entry, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest_Entry, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest_Entry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest_Entry, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest, _impl_.leader_change_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogRequest, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogResponse, _impl_.is_old_leader_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardAppendLogResponse, _impl_.last_applied_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInstallSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInstallSnapshotRequest, _impl_.shard_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInstallSnapshotRequest, _impl_.data_piece_),
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInstallSnapshotRequest, _impl_.last_wal_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardInstallSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardWriteReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardWriteReplicaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardRepairRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::ShardRepairResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DataServerJoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DataServerJoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DataServerLeaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::dataserver::DataServerLeaveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bedrock::dataserver::ShardMeta)},
  { 16, -1, -1, sizeof(::bedrock::dataserver::SplitShardRequest)},
  { 24, -1, -1, sizeof(::bedrock::dataserver::SplitShardResponse)},
  { 30, -1, -1, sizeof(::bedrock::dataserver::MergeShardRequest)},
  { 38, -1, -1, sizeof(::bedrock::dataserver::MergeShardResponse)},
  { 44, -1, -1, sizeof(::bedrock::dataserver::CreateShardRequest)},
  { 58, -1, -1, sizeof(::bedrock::dataserver::CreateShardResponse)},
  { 64, -1, -1, sizeof(::bedrock::dataserver::DeleteShardRequest)},
  { 71, -1, -1, sizeof(::bedrock::dataserver::DeleteShardResponse)},
  { 77, -1, -1, sizeof(::bedrock::dataserver::ShardInfoRequest)},
  { 84, -1, -1, sizeof(::bedrock::dataserver::ShardInfoResponse)},
  { 98, -1, -1, sizeof(::bedrock::dataserver::PullShardDataRequest)},
  { 104, -1, -1, sizeof(::bedrock::dataserver::PullShardDataResponse)},
  { 110, -1, -1, sizeof(::bedrock::dataserver::MigrateShardRequest_Entry)},
  { 118, -1, -1, sizeof(::bedrock::dataserver::MigrateShardRequest)},
  { 129, -1, -1, sizeof(::bedrock::dataserver::MigrateShardResponse)},
  { 135, -1, -1, sizeof(::bedrock::dataserver::AddShardReplicaRequest)},
  { 141, -1, -1, sizeof(::bedrock::dataserver::AddShardReplicaResponse)},
  { 147, -1, -1, sizeof(::bedrock::dataserver::DeleteShardReplicaRequest)},
  { 153, -1, -1, sizeof(::bedrock::dataserver::DeleteShardReplicaResponse)},
  { 159, -1, -1, sizeof(::bedrock::dataserver::TransferShardLeaderRequest)},
  { 168, -1, -1, sizeof(::bedrock::dataserver::TransferShardLeaderResponse)},
  { 174, -1, -1, sizeof(::bedrock::dataserver::LockShardRequest)},
  { 180, -1, -1, sizeof(::bedrock::dataserver::LockShardResponse)},
  { 186, -1, -1, sizeof(::bedrock::dataserver::UnlockShardRequest)},
  { 192, -1, -1, sizeof(::bedrock::dataserver::UnlockShardResponse)},
  { 198, -1, -1, sizeof(::bedrock::dataserver::ShardReadRequest)},
  { 206, -1, -1, sizeof(::bedrock::dataserver::ShardReadResponse)},
  { 213, -1, -1, sizeof(::bedrock::dataserver::ShardWriteRequest)},
  { 222, -1, -1, sizeof(::bedrock::dataserver::ShardWriteResponse)},
  { 229, -1, -1, sizeof(::bedrock::dataserver::ShardAppendLogRequest_Entry)},
  { 239, -1, -1, sizeof(::bedrock::dataserver::ShardAppendLogRequest)},
  { 248, -1, -1, sizeof(::bedrock::dataserver::ShardAppendLogResponse)},
  { 256, -1, -1, sizeof(::bedrock::dataserver::ShardInstallSnapshotRequest)},
  { 265, -1, -1, sizeof(::bedrock::dataserver::ShardInstallSnapshotResponse)},
  { 271, -1, -1, sizeof(::bedrock::dataserver::ShardWriteReplicaRequest)},
  { 277, -1, -1, sizeof(::bedrock::dataserver::ShardWriteReplicaResponse)},
  { 283, -1, -1, sizeof(::bedrock::dataserver::ShardRepairRequest)},
  { 289, -1, -1, sizeof(::bedrock::dataserver::ShardRepairResponse)},
  { 295, -1, -1, sizeof(::bedrock::dataserver::DataServerJoinRequest)},
  { 301, -1, -1, sizeof(::bedrock::dataserver::DataServerJoinResponse)},
  { 307, -1, -1, sizeof(::bedrock::dataserver::DataServerLeaveRequest)},
  { 313, -1, -1, sizeof(::bedrock::dataserver::DataServerLeaveResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bedrock::dataserver::_ShardMeta_default_instance_._instance,
  &::bedrock::dataserver::_SplitShardRequest_default_instance_._instance,
  &::bedrock::dataserver::_SplitShardResponse_default_instance_._instance,
  &::bedrock::dataserver::_MergeShardRequest_default_instance_._instance,
  &::bedrock::dataserver::_MergeShardResponse_default_instance_._instance,
  &::bedrock::dataserver::_CreateShardRequest_default_instance_._instance,
  &::bedrock::dataserver::_CreateShardResponse_default_instance_._instance,
  &::bedrock::dataserver::_DeleteShardRequest_default_instance_._instance,
  &::bedrock::dataserver::_DeleteShardResponse_default_instance_._instance,
  &::bedrock::dataserver::_ShardInfoRequest_default_instance_._instance,
  &::bedrock::dataserver::_ShardInfoResponse_default_instance_._instance,
  &::bedrock::dataserver::_PullShardDataRequest_default_instance_._instance,
  &::bedrock::dataserver::_PullShardDataResponse_default_instance_._instance,
  &::bedrock::dataserver::_MigrateShardRequest_Entry_default_instance_._instance,
  &::bedrock::dataserver::_MigrateShardRequest_default_instance_._instance,
  &::bedrock::dataserver::_MigrateShardResponse_default_instance_._instance,
  &::bedrock::dataserver::_AddShardReplicaRequest_default_instance_._instance,
  &::bedrock::dataserver::_AddShardReplicaResponse_default_instance_._instance,
  &::bedrock::dataserver::_DeleteShardReplicaRequest_default_instance_._instance,
  &::bedrock::dataserver::_DeleteShardReplicaResponse_default_instance_._instance,
  &::bedrock::dataserver::_TransferShardLeaderRequest_default_instance_._instance,
  &::bedrock::dataserver::_TransferShardLeaderResponse_default_instance_._instance,
  &::bedrock::dataserver::_LockShardRequest_default_instance_._instance,
  &::bedrock::dataserver::_LockShardResponse_default_instance_._instance,
  &::bedrock::dataserver::_UnlockShardRequest_default_instance_._instance,
  &::bedrock::dataserver::_UnlockShardResponse_default_instance_._instance,
  &::bedrock::dataserver::_ShardReadRequest_default_instance_._instance,
  &::bedrock::dataserver::_ShardReadResponse_default_instance_._instance,
  &::bedrock::dataserver::_ShardWriteRequest_default_instance_._instance,
  &::bedrock::dataserver::_ShardWriteResponse_default_instance_._instance,
  &::bedrock::dataserver::_ShardAppendLogRequest_Entry_default_instance_._instance,
  &::bedrock::dataserver::_ShardAppendLogRequest_default_instance_._instance,
  &::bedrock::dataserver::_ShardAppendLogResponse_default_instance_._instance,
  &::bedrock::dataserver::_ShardInstallSnapshotRequest_default_instance_._instance,
  &::bedrock::dataserver::_ShardInstallSnapshotResponse_default_instance_._instance,
  &::bedrock::dataserver::_ShardWriteReplicaRequest_default_instance_._instance,
  &::bedrock::dataserver::_ShardWriteReplicaResponse_default_instance_._instance,
  &::bedrock::dataserver::_ShardRepairRequest_default_instance_._instance,
  &::bedrock::dataserver::_ShardRepairResponse_default_instance_._instance,
  &::bedrock::dataserver::_DataServerJoinRequest_default_instance_._instance,
  &::bedrock::dataserver::_DataServerJoinResponse_default_instance_._instance,
  &::bedrock::dataserver::_DataServerLeaveRequest_default_instance_._instance,
  &::bedrock::dataserver::_DataServerLeaveResponse_default_instance_._instance,
};

const char descriptor_table_protodef_dataserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020dataserver.proto\022\022bedrock.dataserver\032\033"
  "google/protobuf/empty.proto\032\037google/prot"
  "obuf/timestamp.proto\"\255\002\n\tShardMeta\022\020\n\010sh"
  "ard_id\030\001 \001(\004\022-\n\tcreate_ts\030\002 \001(\0132\032.google"
  ".protobuf.Timestamp\022\022\n\nreplicates\030\003 \003(\t\022"
  "8\n\024replicates_update_ts\030\004 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\021\n\tis_leader\030\005 \001(\010\022\016\n\006"
  "leader\030\006 \001(\t\0224\n\020leader_change_ts\030\007 \001(\0132\032"
  ".google.protobuf.Timestamp\022\026\n\016last_wal_i"
  "ndex\030\010 \001(\004\022\017\n\007min_key\030\t \001(\014\022\017\n\007max_key\030\n"
  " \001(\014\";\n\021SplitShardRequest\022\020\n\010shard_id\030\001 "
  "\001(\004\022\024\n\014new_shard_id\030\002 \001(\004\"\024\n\022SplitShardR"
  "esponse\";\n\021MergeShardRequest\022\022\n\nshard_id"
  "_a\030\001 \001(\004\022\022\n\nshard_id_b\030\002 \001(\004\"\024\n\022MergeSha"
  "rdResponse\"\210\002\n\022CreateShardRequest\022\020\n\010sha"
  "rd_id\030\001 \001(\004\022-\n\tcreate_ts\030\002 \001(\0132\032.google."
  "protobuf.Timestamp\022\022\n\nreplicates\030\003 \003(\t\0225"
  "\n\021replica_update_ts\030\004 \001(\0132\032.google.proto"
  "buf.Timestamp\022\016\n\006leader\030\005 \001(\t\0224\n\020leader_"
  "change_ts\030\006 \001(\0132\032.google.protobuf.Timest"
  "amp\022\017\n\007min_key\030\007 \001(\014\022\017\n\007max_key\030\010 \001(\014\"\025\n"
  "\023CreateShardResponse\"&\n\022DeleteShardReque"
  "st\022\020\n\010shard_id\030\001 \001(\004\"\025\n\023DeleteShardRespo"
  "nse\"$\n\020ShardInfoRequest\022\020\n\010shard_id\030\001 \001("
  "\004\"\223\002\n\021ShardInfoResponse\022\020\n\010shard_id\030\001 \001("
  "\004\022-\n\tcreate_ts\030\002 \001(\0132\032.google.protobuf.T"
  "imestamp\022\022\n\nreplicates\030\003 \003(\t\0228\n\024replicat"
  "es_update_ts\030\004 \001(\0132\032.google.protobuf.Tim"
  "estamp\022\021\n\tis_leader\030\005 \001(\010\022\016\n\006leader\030\006 \001("
  "\t\0224\n\020leader_change_ts\030\007 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\026\n\016last_wal_index\030\010 \001(\004\""
  "\026\n\024PullShardDataRequest\"\027\n\025PullShardData"
  "Response\"\243\002\n\023MigrateShardRequest\022\025\n\rshar"
  "d_id_from\030\001 \001(\004\022\023\n\013shard_id_to\030\002 \001(\004\022\026\n\016"
  "target_address\030\003 \001(\t\022D\n\tdirection\030\004 \001(\0162"
  "1.bedrock.dataserver.MigrateShardRequest"
  ".Direction\022>\n\007entries\030\005 \003(\0132-.bedrock.da"
  "taserver.MigrateShardRequest.Entry\032#\n\005En"
  "try\022\013\n\003key\030\003 \001(\014\022\r\n\005value\030\004 \001(\014\"\035\n\tDirec"
  "tion\022\010\n\004FROM\020\000\022\006\n\002TO\020\001\"\026\n\024MigrateShardRe"
  "sponse\"\030\n\026AddShardReplicaRequest\"\031\n\027AddS"
  "hardReplicaResponse\"\033\n\031DeleteShardReplic"
  "aRequest\"\034\n\032DeleteShardReplicaResponse\"x"
  "\n\032TransferShardLeaderRequest\022\020\n\010shard_id"
  "\030\001 \001(\004\022\022\n\nreplicates\030\002 \003(\t\0224\n\020leader_cha"
  "nge_ts\030\003 \001(\0132\032.google.protobuf.Timestamp"
  "\"\035\n\033TransferShardLeaderResponse\"\022\n\020LockS"
  "hardRequest\"\023\n\021LockShardResponse\"\024\n\022Unlo"
  "ckShardRequest\"\025\n\023UnlockShardResponse\"1\n"
  "\020ShardReadRequest\022\020\n\010shard_id\030\001 \001(\004\022\013\n\003k"
  "ey\030\002 \001(\014\"\"\n\021ShardReadResponse\022\r\n\005value\030\001"
  " \001(\014\"A\n\021ShardWriteRequest\022\020\n\010shard_id\030\001 "
  "\001(\004\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"(\n\022Shard"
  "WriteResponse\022\022\n\nnot_leader\030\001 \001(\010\"\341\001\n\025Sh"
  "ardAppendLogRequest\022\020\n\010shard_id\030\001 \001(\004\0224\n"
  "\020leader_change_ts\030\002 \001(\0132\032.google.protobu"
  "f.Timestamp\022@\n\007entries\030\003 \003(\0132/.bedrock.d"
  "ataserver.ShardAppendLogRequest.Entry\032>\n"
  "\005Entry\022\n\n\002op\030\001 \001(\t\022\r\n\005index\030\002 \001(\004\022\013\n\003key"
  "\030\003 \001(\014\022\r\n\005value\030\004 \001(\014\"K\n\026ShardAppendLogR"
  "esponse\022\025\n\ris_old_leader\030\001 \001(\010\022\032\n\022last_a"
  "pplied_index\030\002 \001(\004\"[\n\033ShardInstallSnapsh"
  "otRequest\022\020\n\010shard_id\030\001 \001(\004\022\022\n\ndata_piec"
  "e\030\002 \001(\014\022\026\n\016last_wal_index\030\003 \001(\004\"\036\n\034Shard"
  "InstallSnapshotResponse\"\032\n\030ShardWriteRep"
  "licaRequest\"\033\n\031ShardWriteReplicaResponse"
  "\"\024\n\022ShardRepairRequest\"\025\n\023ShardRepairRes"
  "ponse\"\027\n\025DataServerJoinRequest\"\030\n\026DataSe"
  "rverJoinResponse\"\030\n\026DataServerLeaveReque"
  "st\"\031\n\027DataServerLeaveResponse2\312\010\n\013DataSe"
  "rvice\022^\n\013CreateShard\022&.bedrock.dataserve"
  "r.CreateShardRequest\032\'.bedrock.dataserve"
  "r.CreateShardResponse\022M\n\013DeleteShard\022&.b"
  "edrock.dataserver.DeleteShardRequest\032\026.g"
  "oogle.protobuf.Empty\022X\n\tShardInfo\022$.bedr"
  "ock.dataserver.ShardInfoRequest\032%.bedroc"
  "k.dataserver.ShardInfoResponse\022[\n\nSplitS"
  "hard\022%.bedrock.dataserver.SplitShardRequ"
  "est\032&.bedrock.dataserver.SplitShardRespo"
  "nse\022[\n\nMergeShard\022%.bedrock.dataserver.M"
  "ergeShardRequest\032&.bedrock.dataserver.Me"
  "rgeShardResponse\022v\n\023TransferShardLeader\022"
  "..bedrock.dataserver.TransferShardLeader"
  "Request\032/.bedrock.dataserver.TransferSha"
  "rdLeaderResponse\022X\n\tShardRead\022$.bedrock."
  "dataserver.ShardReadRequest\032%.bedrock.da"
  "taserver.ShardReadResponse\022[\n\nShardWrite"
  "\022%.bedrock.dataserver.ShardWriteRequest\032"
  "&.bedrock.dataserver.ShardWriteResponse\022"
  "g\n\016ShardAppendLog\022).bedrock.dataserver.S"
  "hardAppendLogRequest\032*.bedrock.dataserve"
  "r.ShardAppendLogResponse\022{\n\024ShardInstall"
  "Snapshot\022/.bedrock.dataserver.ShardInsta"
  "llSnapshotRequest\0320.bedrock.dataserver.S"
  "hardInstallSnapshotResponse(\001\022c\n\014Migrate"
  "Shard\022\'.bedrock.dataserver.MigrateShardR"
  "equest\032(.bedrock.dataserver.MigrateShard"
  "Response(\001B1Z,sr.ht/moyanhao/bedrock-met"
  "aserver/dataserver\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dataserver_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_dataserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dataserver_2eproto = {
    false, false, 3949, descriptor_table_protodef_dataserver_2eproto,
    "dataserver.proto",
    &descriptor_table_dataserver_2eproto_once, descriptor_table_dataserver_2eproto_deps, 2, 43,
    schemas, file_default_instances, TableStruct_dataserver_2eproto::offsets,
    file_level_metadata_dataserver_2eproto, file_level_enum_descriptors_dataserver_2eproto,
    file_level_service_descriptors_dataserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dataserver_2eproto_getter() {
  return &descriptor_table_dataserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dataserver_2eproto(&descriptor_table_dataserver_2eproto);
namespace bedrock {
namespace dataserver {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MigrateShardRequest_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dataserver_2eproto);
  return file_level_enum_descriptors_dataserver_2eproto[0];
}
bool MigrateShardRequest_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MigrateShardRequest_Direction MigrateShardRequest::FROM;
constexpr MigrateShardRequest_Direction MigrateShardRequest::TO;
constexpr MigrateShardRequest_Direction MigrateShardRequest::Direction_MIN;
constexpr MigrateShardRequest_Direction MigrateShardRequest::Direction_MAX;
constexpr int MigrateShardRequest::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ShardMeta::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_ts(const ShardMeta* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& replicates_update_ts(const ShardMeta* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts(const ShardMeta* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShardMeta::_Internal::create_ts(const ShardMeta* msg) {
  return *msg->_impl_.create_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShardMeta::_Internal::replicates_update_ts(const ShardMeta* msg) {
  return *msg->_impl_.replicates_update_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShardMeta::_Internal::leader_change_ts(const ShardMeta* msg) {
  return *msg->_impl_.leader_change_ts_;
}
void ShardMeta::clear_create_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
}
void ShardMeta::clear_replicates_update_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.replicates_update_ts_ != nullptr) {
    delete _impl_.replicates_update_ts_;
  }
  _impl_.replicates_update_ts_ = nullptr;
}
void ShardMeta::clear_leader_change_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
}
ShardMeta::ShardMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardMeta)
}
ShardMeta::ShardMeta(const ShardMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){from._impl_.replicates_}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.min_key_){}
    , decltype(_impl_.max_key_){}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.replicates_update_ts_){nullptr}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){}
    , decltype(_impl_.last_wal_index_){}
    , decltype(_impl_.is_leader_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader().empty()) {
    _this->_impl_.leader_.Set(from._internal_leader(), 
      _this->GetArenaForAllocation());
  }
  _impl_.min_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.min_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_key().empty()) {
    _this->_impl_.min_key_.Set(from._internal_min_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.max_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.max_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_max_key().empty()) {
    _this->_impl_.max_key_.Set(from._internal_max_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_create_ts()) {
    _this->_impl_.create_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.create_ts_);
  }
  if (from._internal_has_replicates_update_ts()) {
    _this->_impl_.replicates_update_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.replicates_update_ts_);
  }
  if (from._internal_has_leader_change_ts()) {
    _this->_impl_.leader_change_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.leader_change_ts_);
  }
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_leader_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.is_leader_));
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardMeta)
}

inline void ShardMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){arena}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.min_key_){}
    , decltype(_impl_.max_key_){}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.replicates_update_ts_){nullptr}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.last_wal_index_){uint64_t{0u}}
    , decltype(_impl_.is_leader_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.min_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.max_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.max_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardMeta::~ShardMeta() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replicates_.~RepeatedPtrField();
  _impl_.leader_.Destroy();
  _impl_.min_key_.Destroy();
  _impl_.max_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.create_ts_;
  if (this != internal_default_instance()) delete _impl_.replicates_update_ts_;
  if (this != internal_default_instance()) delete _impl_.leader_change_ts_;
}

void ShardMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replicates_.Clear();
  _impl_.leader_.ClearToEmpty();
  _impl_.min_key_.ClearToEmpty();
  _impl_.max_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.replicates_update_ts_ != nullptr) {
    delete _impl_.replicates_update_ts_;
  }
  _impl_.replicates_update_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_leader_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.is_leader_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string replicates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_replicates();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.ShardMeta.replicates"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp replicates_update_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_replicates_update_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_leader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_leader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.ShardMeta.leader"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp leader_change_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_change_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_wal_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.last_wal_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes min_key = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_min_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes max_key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_max_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // .google.protobuf.Timestamp create_ts = 2;
  if (this->_internal_has_create_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::create_ts(this),
        _Internal::create_ts(this).GetCachedSize(), target, stream);
  }

  // repeated string replicates = 3;
  for (int i = 0, n = this->_internal_replicates_size(); i < n; i++) {
    const auto& s = this->_internal_replicates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.ShardMeta.replicates");
    target = stream->WriteString(3, s, target);
  }

  // .google.protobuf.Timestamp replicates_update_ts = 4;
  if (this->_internal_has_replicates_update_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::replicates_update_ts(this),
        _Internal::replicates_update_ts(this).GetCachedSize(), target, stream);
  }

  // bool is_leader = 5;
  if (this->_internal_is_leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_leader(), target);
  }

  // string leader = 6;
  if (!this->_internal_leader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.ShardMeta.leader");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_leader(), target);
  }

  // .google.protobuf.Timestamp leader_change_ts = 7;
  if (this->_internal_has_leader_change_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::leader_change_ts(this),
        _Internal::leader_change_ts(this).GetCachedSize(), target, stream);
  }

  // uint64 last_wal_index = 8;
  if (this->_internal_last_wal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_last_wal_index(), target);
  }

  // bytes min_key = 9;
  if (!this->_internal_min_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_min_key(), target);
  }

  // bytes max_key = 10;
  if (!this->_internal_max_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_max_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardMeta)
  return target;
}

size_t ShardMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string replicates = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.replicates_.size());
  for (int i = 0, n = _impl_.replicates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.replicates_.Get(i));
  }

  // string leader = 6;
  if (!this->_internal_leader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader());
  }

  // bytes min_key = 9;
  if (!this->_internal_min_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_min_key());
  }

  // bytes max_key = 10;
  if (!this->_internal_max_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_max_key());
  }

  // .google.protobuf.Timestamp create_ts = 2;
  if (this->_internal_has_create_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_ts_);
  }

  // .google.protobuf.Timestamp replicates_update_ts = 4;
  if (this->_internal_has_replicates_update_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicates_update_ts_);
  }

  // .google.protobuf.Timestamp leader_change_ts = 7;
  if (this->_internal_has_leader_change_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leader_change_ts_);
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 last_wal_index = 8;
  if (this->_internal_last_wal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_wal_index());
  }

  // bool is_leader = 5;
  if (this->_internal_is_leader() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardMeta::GetClassData() const { return &_class_data_; }


void ShardMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardMeta*>(&to_msg);
  auto& from = static_cast<const ShardMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replicates_.MergeFrom(from._impl_.replicates_);
  if (!from._internal_leader().empty()) {
    _this->_internal_set_leader(from._internal_leader());
  }
  if (!from._internal_min_key().empty()) {
    _this->_internal_set_min_key(from._internal_min_key());
  }
  if (!from._internal_max_key().empty()) {
    _this->_internal_set_max_key(from._internal_max_key());
  }
  if (from._internal_has_create_ts()) {
    _this->_internal_mutable_create_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_create_ts());
  }
  if (from._internal_has_replicates_update_ts()) {
    _this->_internal_mutable_replicates_update_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_replicates_update_ts());
  }
  if (from._internal_has_leader_change_ts()) {
    _this->_internal_mutable_leader_change_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_leader_change_ts());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_last_wal_index() != 0) {
    _this->_internal_set_last_wal_index(from._internal_last_wal_index());
  }
  if (from._internal_is_leader() != 0) {
    _this->_internal_set_is_leader(from._internal_is_leader());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardMeta::CopyFrom(const ShardMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardMeta::IsInitialized() const {
  return true;
}

void ShardMeta::InternalSwap(ShardMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replicates_.InternalSwap(&other->_impl_.replicates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_, lhs_arena,
      &other->_impl_.leader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.min_key_, lhs_arena,
      &other->_impl_.min_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.max_key_, lhs_arena,
      &other->_impl_.max_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardMeta, _impl_.is_leader_)
      + sizeof(ShardMeta::_impl_.is_leader_)
      - PROTOBUF_FIELD_OFFSET(ShardMeta, _impl_.create_ts_)>(
          reinterpret_cast<char*>(&_impl_.create_ts_),
          reinterpret_cast<char*>(&other->_impl_.create_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[0]);
}

// ===================================================================

class SplitShardRequest::_Internal {
 public:
};

SplitShardRequest::SplitShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.SplitShardRequest)
}
SplitShardRequest::SplitShardRequest(const SplitShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SplitShardRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , decltype(_impl_.new_shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_shard_id_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.new_shard_id_));
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.SplitShardRequest)
}

inline void SplitShardRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.new_shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SplitShardRequest::~SplitShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.SplitShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SplitShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SplitShardRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SplitShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.SplitShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.new_shard_id_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.new_shard_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SplitShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 new_shard_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.new_shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SplitShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.SplitShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // uint64 new_shard_id = 2;
  if (this->_internal_new_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_new_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.SplitShardRequest)
  return target;
}

size_t SplitShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.SplitShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 new_shard_id = 2;
  if (this->_internal_new_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SplitShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitShardRequest::GetClassData() const { return &_class_data_; }


void SplitShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SplitShardRequest*>(&to_msg);
  auto& from = static_cast<const SplitShardRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.SplitShardRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_new_shard_id() != 0) {
    _this->_internal_set_new_shard_id(from._internal_new_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SplitShardRequest::CopyFrom(const SplitShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.SplitShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitShardRequest::IsInitialized() const {
  return true;
}

void SplitShardRequest::InternalSwap(SplitShardRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SplitShardRequest, _impl_.new_shard_id_)
      + sizeof(SplitShardRequest::_impl_.new_shard_id_)
      - PROTOBUF_FIELD_OFFSET(SplitShardRequest, _impl_.shard_id_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SplitShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[1]);
}

// ===================================================================

class SplitShardResponse::_Internal {
 public:
};

SplitShardResponse::SplitShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.SplitShardResponse)
}
SplitShardResponse::SplitShardResponse(const SplitShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SplitShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.SplitShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SplitShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SplitShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SplitShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[2]);
}

// ===================================================================

class MergeShardRequest::_Internal {
 public:
};

MergeShardRequest::MergeShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.MergeShardRequest)
}
MergeShardRequest::MergeShardRequest(const MergeShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MergeShardRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_a_){}
    , decltype(_impl_.shard_id_b_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shard_id_a_, &from._impl_.shard_id_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shard_id_b_) -
    reinterpret_cast<char*>(&_impl_.shard_id_a_)) + sizeof(_impl_.shard_id_b_));
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.MergeShardRequest)
}

inline void MergeShardRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_a_){uint64_t{0u}}
    , decltype(_impl_.shard_id_b_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MergeShardRequest::~MergeShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.MergeShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MergeShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MergeShardRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MergeShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.MergeShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shard_id_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shard_id_b_) -
      reinterpret_cast<char*>(&_impl_.shard_id_a_)) + sizeof(_impl_.shard_id_b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 shard_id_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shard_id_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MergeShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.MergeShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id_a = 1;
  if (this->_internal_shard_id_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id_a(), target);
  }

  // uint64 shard_id_b = 2;
  if (this->_internal_shard_id_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_shard_id_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.MergeShardRequest)
  return target;
}

size_t MergeShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.MergeShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id_a = 1;
  if (this->_internal_shard_id_a() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id_a());
  }

  // uint64 shard_id_b = 2;
  if (this->_internal_shard_id_b() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MergeShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeShardRequest::GetClassData() const { return &_class_data_; }


void MergeShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MergeShardRequest*>(&to_msg);
  auto& from = static_cast<const MergeShardRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.MergeShardRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id_a() != 0) {
    _this->_internal_set_shard_id_a(from._internal_shard_id_a());
  }
  if (from._internal_shard_id_b() != 0) {
    _this->_internal_set_shard_id_b(from._internal_shard_id_b());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeShardRequest::CopyFrom(const MergeShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.MergeShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeShardRequest::IsInitialized() const {
  return true;
}

void MergeShardRequest::InternalSwap(MergeShardRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeShardRequest, _impl_.shard_id_b_)
      + sizeof(MergeShardRequest::_impl_.shard_id_b_)
      - PROTOBUF_FIELD_OFFSET(MergeShardRequest, _impl_.shard_id_a_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_a_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[3]);
}

// ===================================================================

class MergeShardResponse::_Internal {
 public:
};

MergeShardResponse::MergeShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.MergeShardResponse)
}
MergeShardResponse::MergeShardResponse(const MergeShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MergeShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.MergeShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MergeShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[4]);
}

// ===================================================================

class CreateShardRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_ts(const CreateShardRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& replica_update_ts(const CreateShardRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts(const CreateShardRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CreateShardRequest::_Internal::create_ts(const CreateShardRequest* msg) {
  return *msg->_impl_.create_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CreateShardRequest::_Internal::replica_update_ts(const CreateShardRequest* msg) {
  return *msg->_impl_.replica_update_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CreateShardRequest::_Internal::leader_change_ts(const CreateShardRequest* msg) {
  return *msg->_impl_.leader_change_ts_;
}
void CreateShardRequest::clear_create_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
}
void CreateShardRequest::clear_replica_update_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.replica_update_ts_ != nullptr) {
    delete _impl_.replica_update_ts_;
  }
  _impl_.replica_update_ts_ = nullptr;
}
void CreateShardRequest::clear_leader_change_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
}
CreateShardRequest::CreateShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.CreateShardRequest)
}
CreateShardRequest::CreateShardRequest(const CreateShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateShardRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){from._impl_.replicates_}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.min_key_){}
    , decltype(_impl_.max_key_){}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.replica_update_ts_){nullptr}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader().empty()) {
    _this->_impl_.leader_.Set(from._internal_leader(), 
      _this->GetArenaForAllocation());
  }
  _impl_.min_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.min_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_key().empty()) {
    _this->_impl_.min_key_.Set(from._internal_min_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.max_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.max_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_max_key().empty()) {
    _this->_impl_.max_key_.Set(from._internal_max_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_create_ts()) {
    _this->_impl_.create_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.create_ts_);
  }
  if (from._internal_has_replica_update_ts()) {
    _this->_impl_.replica_update_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.replica_update_ts_);
  }
  if (from._internal_has_leader_change_ts()) {
    _this->_impl_.leader_change_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.leader_change_ts_);
  }
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.CreateShardRequest)
}

inline void CreateShardRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){arena}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.min_key_){}
    , decltype(_impl_.max_key_){}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.replica_update_ts_){nullptr}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.min_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.max_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.max_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateShardRequest::~CreateShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.CreateShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replicates_.~RepeatedPtrField();
  _impl_.leader_.Destroy();
  _impl_.min_key_.Destroy();
  _impl_.max_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.create_ts_;
  if (this != internal_default_instance()) delete _impl_.replica_update_ts_;
  if (this != internal_default_instance()) delete _impl_.leader_change_ts_;
}

void CreateShardRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.CreateShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replicates_.Clear();
  _impl_.leader_.ClearToEmpty();
  _impl_.min_key_.ClearToEmpty();
  _impl_.max_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.replica_update_ts_ != nullptr) {
    delete _impl_.replica_update_ts_;
  }
  _impl_.replica_update_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string replicates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_replicates();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.CreateShardRequest.replicates"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp replica_update_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_replica_update_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_leader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.CreateShardRequest.leader"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp leader_change_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_change_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes min_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_min_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes max_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_max_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.CreateShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // .google.protobuf.Timestamp create_ts = 2;
  if (this->_internal_has_create_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::create_ts(this),
        _Internal::create_ts(this).GetCachedSize(), target, stream);
  }

  // repeated string replicates = 3;
  for (int i = 0, n = this->_internal_replicates_size(); i < n; i++) {
    const auto& s = this->_internal_replicates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.CreateShardRequest.replicates");
    target = stream->WriteString(3, s, target);
  }

  // .google.protobuf.Timestamp replica_update_ts = 4;
  if (this->_internal_has_replica_update_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::replica_update_ts(this),
        _Internal::replica_update_ts(this).GetCachedSize(), target, stream);
  }

  // string leader = 5;
  if (!this->_internal_leader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.CreateShardRequest.leader");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_leader(), target);
  }

  // .google.protobuf.Timestamp leader_change_ts = 6;
  if (this->_internal_has_leader_change_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::leader_change_ts(this),
        _Internal::leader_change_ts(this).GetCachedSize(), target, stream);
  }

  // bytes min_key = 7;
  if (!this->_internal_min_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_min_key(), target);
  }

  // bytes max_key = 8;
  if (!this->_internal_max_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_max_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.CreateShardRequest)
  return target;
}

size_t CreateShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.CreateShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string replicates = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.replicates_.size());
  for (int i = 0, n = _impl_.replicates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.replicates_.Get(i));
  }

  // string leader = 5;
  if (!this->_internal_leader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader());
  }

  // bytes min_key = 7;
  if (!this->_internal_min_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_min_key());
  }

  // bytes max_key = 8;
  if (!this->_internal_max_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_max_key());
  }

  // .google.protobuf.Timestamp create_ts = 2;
  if (this->_internal_has_create_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_ts_);
  }

  // .google.protobuf.Timestamp replica_update_ts = 4;
  if (this->_internal_has_replica_update_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replica_update_ts_);
  }

  // .google.protobuf.Timestamp leader_change_ts = 6;
  if (this->_internal_has_leader_change_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leader_change_ts_);
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateShardRequest::GetClassData() const { return &_class_data_; }


void CreateShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateShardRequest*>(&to_msg);
  auto& from = static_cast<const CreateShardRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.CreateShardRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replicates_.MergeFrom(from._impl_.replicates_);
  if (!from._internal_leader().empty()) {
    _this->_internal_set_leader(from._internal_leader());
  }
  if (!from._internal_min_key().empty()) {
    _this->_internal_set_min_key(from._internal_min_key());
  }
  if (!from._internal_max_key().empty()) {
    _this->_internal_set_max_key(from._internal_max_key());
  }
  if (from._internal_has_create_ts()) {
    _this->_internal_mutable_create_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_create_ts());
  }
  if (from._internal_has_replica_update_ts()) {
    _this->_internal_mutable_replica_update_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_replica_update_ts());
  }
  if (from._internal_has_leader_change_ts()) {
    _this->_internal_mutable_leader_change_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_leader_change_ts());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateShardRequest::CopyFrom(const CreateShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.CreateShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateShardRequest::IsInitialized() const {
  return true;
}

void CreateShardRequest::InternalSwap(CreateShardRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replicates_.InternalSwap(&other->_impl_.replicates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_, lhs_arena,
      &other->_impl_.leader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.min_key_, lhs_arena,
      &other->_impl_.min_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.max_key_, lhs_arena,
      &other->_impl_.max_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateShardRequest, _impl_.shard_id_)
      + sizeof(CreateShardRequest::_impl_.shard_id_)
      - PROTOBUF_FIELD_OFFSET(CreateShardRequest, _impl_.create_ts_)>(
          reinterpret_cast<char*>(&_impl_.create_ts_),
          reinterpret_cast<char*>(&other->_impl_.create_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[5]);
}

// ===================================================================

class CreateShardResponse::_Internal {
 public:
};

CreateShardResponse::CreateShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.CreateShardResponse)
}
CreateShardResponse::CreateShardResponse(const CreateShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CreateShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.CreateShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CreateShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[6]);
}

// ===================================================================

class DeleteShardRequest::_Internal {
 public:
};

DeleteShardRequest::DeleteShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.DeleteShardRequest)
}
DeleteShardRequest::DeleteShardRequest(const DeleteShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteShardRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.DeleteShardRequest)
}

inline void DeleteShardRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeleteShardRequest::~DeleteShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.DeleteShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteShardRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.DeleteShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.DeleteShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.DeleteShardRequest)
  return target;
}

size_t DeleteShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.DeleteShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteShardRequest::GetClassData() const { return &_class_data_; }


void DeleteShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteShardRequest*>(&to_msg);
  auto& from = static_cast<const DeleteShardRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.DeleteShardRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteShardRequest::CopyFrom(const DeleteShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.DeleteShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteShardRequest::IsInitialized() const {
  return true;
}

void DeleteShardRequest::InternalSwap(DeleteShardRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.shard_id_, other->_impl_.shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[7]);
}

// ===================================================================

class DeleteShardResponse::_Internal {
 public:
};

DeleteShardResponse::DeleteShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.DeleteShardResponse)
}
DeleteShardResponse::DeleteShardResponse(const DeleteShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.DeleteShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[8]);
}

// ===================================================================

class ShardInfoRequest::_Internal {
 public:
};

ShardInfoRequest::ShardInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardInfoRequest)
}
ShardInfoRequest::ShardInfoRequest(const ShardInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardInfoRequest)
}

inline void ShardInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardInfoRequest::~ShardInfoRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardInfoRequest)
  return target;
}

size_t ShardInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardInfoRequest::GetClassData() const { return &_class_data_; }


void ShardInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardInfoRequest*>(&to_msg);
  auto& from = static_cast<const ShardInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardInfoRequest::CopyFrom(const ShardInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfoRequest::IsInitialized() const {
  return true;
}

void ShardInfoRequest::InternalSwap(ShardInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.shard_id_, other->_impl_.shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[9]);
}

// ===================================================================

class ShardInfoResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_ts(const ShardInfoResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& replicates_update_ts(const ShardInfoResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts(const ShardInfoResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShardInfoResponse::_Internal::create_ts(const ShardInfoResponse* msg) {
  return *msg->_impl_.create_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShardInfoResponse::_Internal::replicates_update_ts(const ShardInfoResponse* msg) {
  return *msg->_impl_.replicates_update_ts_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShardInfoResponse::_Internal::leader_change_ts(const ShardInfoResponse* msg) {
  return *msg->_impl_.leader_change_ts_;
}
void ShardInfoResponse::clear_create_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
}
void ShardInfoResponse::clear_replicates_update_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.replicates_update_ts_ != nullptr) {
    delete _impl_.replicates_update_ts_;
  }
  _impl_.replicates_update_ts_ = nullptr;
}
void ShardInfoResponse::clear_leader_change_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
}
ShardInfoResponse::ShardInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardInfoResponse)
}
ShardInfoResponse::ShardInfoResponse(const ShardInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){from._impl_.replicates_}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.replicates_update_ts_){nullptr}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){}
    , decltype(_impl_.last_wal_index_){}
    , decltype(_impl_.is_leader_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leader().empty()) {
    _this->_impl_.leader_.Set(from._internal_leader(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_create_ts()) {
    _this->_impl_.create_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.create_ts_);
  }
  if (from._internal_has_replicates_update_ts()) {
    _this->_impl_.replicates_update_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.replicates_update_ts_);
  }
  if (from._internal_has_leader_change_ts()) {
    _this->_impl_.leader_change_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.leader_change_ts_);
  }
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_leader_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.is_leader_));
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardInfoResponse)
}

inline void ShardInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){arena}
    , decltype(_impl_.leader_){}
    , decltype(_impl_.create_ts_){nullptr}
    , decltype(_impl_.replicates_update_ts_){nullptr}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.last_wal_index_){uint64_t{0u}}
    , decltype(_impl_.is_leader_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardInfoResponse::~ShardInfoResponse() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replicates_.~RepeatedPtrField();
  _impl_.leader_.Destroy();
  if (this != internal_default_instance()) delete _impl_.create_ts_;
  if (this != internal_default_instance()) delete _impl_.replicates_update_ts_;
  if (this != internal_default_instance()) delete _impl_.leader_change_ts_;
}

void ShardInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replicates_.Clear();
  _impl_.leader_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.create_ts_ != nullptr) {
    delete _impl_.create_ts_;
  }
  _impl_.create_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.replicates_update_ts_ != nullptr) {
    delete _impl_.replicates_update_ts_;
  }
  _impl_.replicates_update_ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_leader_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.is_leader_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string replicates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_replicates();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.ShardInfoResponse.replicates"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp replicates_update_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_replicates_update_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_leader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string leader = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_leader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.ShardInfoResponse.leader"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp leader_change_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_change_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_wal_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.last_wal_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // .google.protobuf.Timestamp create_ts = 2;
  if (this->_internal_has_create_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::create_ts(this),
        _Internal::create_ts(this).GetCachedSize(), target, stream);
  }

  // repeated string replicates = 3;
  for (int i = 0, n = this->_internal_replicates_size(); i < n; i++) {
    const auto& s = this->_internal_replicates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.ShardInfoResponse.replicates");
    target = stream->WriteString(3, s, target);
  }

  // .google.protobuf.Timestamp replicates_update_ts = 4;
  if (this->_internal_has_replicates_update_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::replicates_update_ts(this),
        _Internal::replicates_update_ts(this).GetCachedSize(), target, stream);
  }

  // bool is_leader = 5;
  if (this->_internal_is_leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_leader(), target);
  }

  // string leader = 6;
  if (!this->_internal_leader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader().data(), static_cast<int>(this->_internal_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.ShardInfoResponse.leader");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_leader(), target);
  }

  // .google.protobuf.Timestamp leader_change_ts = 7;
  if (this->_internal_has_leader_change_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::leader_change_ts(this),
        _Internal::leader_change_ts(this).GetCachedSize(), target, stream);
  }

  // uint64 last_wal_index = 8;
  if (this->_internal_last_wal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_last_wal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardInfoResponse)
  return target;
}

size_t ShardInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string replicates = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.replicates_.size());
  for (int i = 0, n = _impl_.replicates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.replicates_.Get(i));
  }

  // string leader = 6;
  if (!this->_internal_leader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader());
  }

  // .google.protobuf.Timestamp create_ts = 2;
  if (this->_internal_has_create_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.create_ts_);
  }

  // .google.protobuf.Timestamp replicates_update_ts = 4;
  if (this->_internal_has_replicates_update_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replicates_update_ts_);
  }

  // .google.protobuf.Timestamp leader_change_ts = 7;
  if (this->_internal_has_leader_change_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leader_change_ts_);
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 last_wal_index = 8;
  if (this->_internal_last_wal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_wal_index());
  }

  // bool is_leader = 5;
  if (this->_internal_is_leader() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardInfoResponse::GetClassData() const { return &_class_data_; }


void ShardInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardInfoResponse*>(&to_msg);
  auto& from = static_cast<const ShardInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replicates_.MergeFrom(from._impl_.replicates_);
  if (!from._internal_leader().empty()) {
    _this->_internal_set_leader(from._internal_leader());
  }
  if (from._internal_has_create_ts()) {
    _this->_internal_mutable_create_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_create_ts());
  }
  if (from._internal_has_replicates_update_ts()) {
    _this->_internal_mutable_replicates_update_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_replicates_update_ts());
  }
  if (from._internal_has_leader_change_ts()) {
    _this->_internal_mutable_leader_change_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_leader_change_ts());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_last_wal_index() != 0) {
    _this->_internal_set_last_wal_index(from._internal_last_wal_index());
  }
  if (from._internal_is_leader() != 0) {
    _this->_internal_set_is_leader(from._internal_is_leader());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardInfoResponse::CopyFrom(const ShardInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfoResponse::IsInitialized() const {
  return true;
}

void ShardInfoResponse::InternalSwap(ShardInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replicates_.InternalSwap(&other->_impl_.replicates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_, lhs_arena,
      &other->_impl_.leader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardInfoResponse, _impl_.is_leader_)
      + sizeof(ShardInfoResponse::_impl_.is_leader_)
      - PROTOBUF_FIELD_OFFSET(ShardInfoResponse, _impl_.create_ts_)>(
          reinterpret_cast<char*>(&_impl_.create_ts_),
          reinterpret_cast<char*>(&other->_impl_.create_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[10]);
}

// ===================================================================

class PullShardDataRequest::_Internal {
 public:
};

PullShardDataRequest::PullShardDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.PullShardDataRequest)
}
PullShardDataRequest::PullShardDataRequest(const PullShardDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PullShardDataRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.PullShardDataRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullShardDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullShardDataRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PullShardDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[11]);
}

// ===================================================================

class PullShardDataResponse::_Internal {
 public:
};

PullShardDataResponse::PullShardDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.PullShardDataResponse)
}
PullShardDataResponse::PullShardDataResponse(const PullShardDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PullShardDataResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.PullShardDataResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullShardDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullShardDataResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PullShardDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[12]);
}

// ===================================================================

class MigrateShardRequest_Entry::_Internal {
 public:
};

MigrateShardRequest_Entry::MigrateShardRequest_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.MigrateShardRequest.Entry)
}
MigrateShardRequest_Entry::MigrateShardRequest_Entry(const MigrateShardRequest_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MigrateShardRequest_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.MigrateShardRequest.Entry)
}

inline void MigrateShardRequest_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MigrateShardRequest_Entry::~MigrateShardRequest_Entry() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.MigrateShardRequest.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MigrateShardRequest_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void MigrateShardRequest_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MigrateShardRequest_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.MigrateShardRequest.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MigrateShardRequest_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MigrateShardRequest_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.MigrateShardRequest.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.MigrateShardRequest.Entry)
  return target;
}

size_t MigrateShardRequest_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.MigrateShardRequest.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MigrateShardRequest_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MigrateShardRequest_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MigrateShardRequest_Entry::GetClassData() const { return &_class_data_; }


void MigrateShardRequest_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MigrateShardRequest_Entry*>(&to_msg);
  auto& from = static_cast<const MigrateShardRequest_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.MigrateShardRequest.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MigrateShardRequest_Entry::CopyFrom(const MigrateShardRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.MigrateShardRequest.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateShardRequest_Entry::IsInitialized() const {
  return true;
}

void MigrateShardRequest_Entry::InternalSwap(MigrateShardRequest_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MigrateShardRequest_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[13]);
}

// ===================================================================

class MigrateShardRequest::_Internal {
 public:
};

MigrateShardRequest::MigrateShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.MigrateShardRequest)
}
MigrateShardRequest::MigrateShardRequest(const MigrateShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MigrateShardRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.target_address_){}
    , decltype(_impl_.shard_id_from_){}
    , decltype(_impl_.shard_id_to_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_address().empty()) {
    _this->_impl_.target_address_.Set(from._internal_target_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.shard_id_from_, &from._impl_.shard_id_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.shard_id_from_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.MigrateShardRequest)
}

inline void MigrateShardRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.target_address_){}
    , decltype(_impl_.shard_id_from_){uint64_t{0u}}
    , decltype(_impl_.shard_id_to_){uint64_t{0u}}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MigrateShardRequest::~MigrateShardRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.MigrateShardRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MigrateShardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.target_address_.Destroy();
}

void MigrateShardRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MigrateShardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.MigrateShardRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.target_address_.ClearToEmpty();
  ::memset(&_impl_.shard_id_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.shard_id_from_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MigrateShardRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 shard_id_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shard_id_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.MigrateShardRequest.target_address"));
        } else
          goto handle_unusual;
        continue;
      // .bedrock.dataserver.MigrateShardRequest.Direction direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::bedrock::dataserver::MigrateShardRequest_Direction>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.dataserver.MigrateShardRequest.Entry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MigrateShardRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.MigrateShardRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id_from = 1;
  if (this->_internal_shard_id_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id_from(), target);
  }

  // uint64 shard_id_to = 2;
  if (this->_internal_shard_id_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_shard_id_to(), target);
  }

  // string target_address = 3;
  if (!this->_internal_target_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_address().data(), static_cast<int>(this->_internal_target_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.MigrateShardRequest.target_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_address(), target);
  }

  // .bedrock.dataserver.MigrateShardRequest.Direction direction = 4;
  if (this->_internal_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_direction(), target);
  }

  // repeated .bedrock.dataserver.MigrateShardRequest.Entry entries = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.MigrateShardRequest)
  return target;
}

size_t MigrateShardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.MigrateShardRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.dataserver.MigrateShardRequest.Entry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string target_address = 3;
  if (!this->_internal_target_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_address());
  }

  // uint64 shard_id_from = 1;
  if (this->_internal_shard_id_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id_from());
  }

  // uint64 shard_id_to = 2;
  if (this->_internal_shard_id_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id_to());
  }

  // .bedrock.dataserver.MigrateShardRequest.Direction direction = 4;
  if (this->_internal_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MigrateShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MigrateShardRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MigrateShardRequest::GetClassData() const { return &_class_data_; }


void MigrateShardRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MigrateShardRequest*>(&to_msg);
  auto& from = static_cast<const MigrateShardRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.MigrateShardRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (!from._internal_target_address().empty()) {
    _this->_internal_set_target_address(from._internal_target_address());
  }
  if (from._internal_shard_id_from() != 0) {
    _this->_internal_set_shard_id_from(from._internal_shard_id_from());
  }
  if (from._internal_shard_id_to() != 0) {
    _this->_internal_set_shard_id_to(from._internal_shard_id_to());
  }
  if (from._internal_direction() != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MigrateShardRequest::CopyFrom(const MigrateShardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.MigrateShardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MigrateShardRequest::IsInitialized() const {
  return true;
}

void MigrateShardRequest::InternalSwap(MigrateShardRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_address_, lhs_arena,
      &other->_impl_.target_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MigrateShardRequest, _impl_.direction_)
      + sizeof(MigrateShardRequest::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(MigrateShardRequest, _impl_.shard_id_from_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_from_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MigrateShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[14]);
}

// ===================================================================

class MigrateShardResponse::_Internal {
 public:
};

MigrateShardResponse::MigrateShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.MigrateShardResponse)
}
MigrateShardResponse::MigrateShardResponse(const MigrateShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MigrateShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.MigrateShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MigrateShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MigrateShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MigrateShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[15]);
}

// ===================================================================

class AddShardReplicaRequest::_Internal {
 public:
};

AddShardReplicaRequest::AddShardReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.AddShardReplicaRequest)
}
AddShardReplicaRequest::AddShardReplicaRequest(const AddShardReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AddShardReplicaRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.AddShardReplicaRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddShardReplicaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddShardReplicaRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddShardReplicaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[16]);
}

// ===================================================================

class AddShardReplicaResponse::_Internal {
 public:
};

AddShardReplicaResponse::AddShardReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.AddShardReplicaResponse)
}
AddShardReplicaResponse::AddShardReplicaResponse(const AddShardReplicaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AddShardReplicaResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.AddShardReplicaResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddShardReplicaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddShardReplicaResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddShardReplicaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[17]);
}

// ===================================================================

class DeleteShardReplicaRequest::_Internal {
 public:
};

DeleteShardReplicaRequest::DeleteShardReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.DeleteShardReplicaRequest)
}
DeleteShardReplicaRequest::DeleteShardReplicaRequest(const DeleteShardReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteShardReplicaRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.DeleteShardReplicaRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteShardReplicaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteShardReplicaRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteShardReplicaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[18]);
}

// ===================================================================

class DeleteShardReplicaResponse::_Internal {
 public:
};

DeleteShardReplicaResponse::DeleteShardReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.DeleteShardReplicaResponse)
}
DeleteShardReplicaResponse::DeleteShardReplicaResponse(const DeleteShardReplicaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteShardReplicaResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.DeleteShardReplicaResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteShardReplicaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteShardReplicaResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteShardReplicaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[19]);
}

// ===================================================================

class TransferShardLeaderRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts(const TransferShardLeaderRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TransferShardLeaderRequest::_Internal::leader_change_ts(const TransferShardLeaderRequest* msg) {
  return *msg->_impl_.leader_change_ts_;
}
void TransferShardLeaderRequest::clear_leader_change_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
}
TransferShardLeaderRequest::TransferShardLeaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.TransferShardLeaderRequest)
}
TransferShardLeaderRequest::TransferShardLeaderRequest(const TransferShardLeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferShardLeaderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){from._impl_.replicates_}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leader_change_ts()) {
    _this->_impl_.leader_change_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.leader_change_ts_);
  }
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.TransferShardLeaderRequest)
}

inline void TransferShardLeaderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replicates_){arena}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransferShardLeaderRequest::~TransferShardLeaderRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.TransferShardLeaderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferShardLeaderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replicates_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.leader_change_ts_;
}

void TransferShardLeaderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferShardLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.TransferShardLeaderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replicates_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferShardLeaderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string replicates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_replicates();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.TransferShardLeaderRequest.replicates"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp leader_change_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_change_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferShardLeaderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.TransferShardLeaderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // repeated string replicates = 2;
  for (int i = 0, n = this->_internal_replicates_size(); i < n; i++) {
    const auto& s = this->_internal_replicates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.TransferShardLeaderRequest.replicates");
    target = stream->WriteString(2, s, target);
  }

  // .google.protobuf.Timestamp leader_change_ts = 3;
  if (this->_internal_has_leader_change_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::leader_change_ts(this),
        _Internal::leader_change_ts(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.TransferShardLeaderRequest)
  return target;
}

size_t TransferShardLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.TransferShardLeaderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string replicates = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.replicates_.size());
  for (int i = 0, n = _impl_.replicates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.replicates_.Get(i));
  }

  // .google.protobuf.Timestamp leader_change_ts = 3;
  if (this->_internal_has_leader_change_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leader_change_ts_);
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferShardLeaderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferShardLeaderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferShardLeaderRequest::GetClassData() const { return &_class_data_; }


void TransferShardLeaderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferShardLeaderRequest*>(&to_msg);
  auto& from = static_cast<const TransferShardLeaderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.TransferShardLeaderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replicates_.MergeFrom(from._impl_.replicates_);
  if (from._internal_has_leader_change_ts()) {
    _this->_internal_mutable_leader_change_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_leader_change_ts());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferShardLeaderRequest::CopyFrom(const TransferShardLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.TransferShardLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferShardLeaderRequest::IsInitialized() const {
  return true;
}

void TransferShardLeaderRequest::InternalSwap(TransferShardLeaderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replicates_.InternalSwap(&other->_impl_.replicates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferShardLeaderRequest, _impl_.shard_id_)
      + sizeof(TransferShardLeaderRequest::_impl_.shard_id_)
      - PROTOBUF_FIELD_OFFSET(TransferShardLeaderRequest, _impl_.leader_change_ts_)>(
          reinterpret_cast<char*>(&_impl_.leader_change_ts_),
          reinterpret_cast<char*>(&other->_impl_.leader_change_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferShardLeaderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[20]);
}

// ===================================================================

class TransferShardLeaderResponse::_Internal {
 public:
};

TransferShardLeaderResponse::TransferShardLeaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.TransferShardLeaderResponse)
}
TransferShardLeaderResponse::TransferShardLeaderResponse(const TransferShardLeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TransferShardLeaderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.TransferShardLeaderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferShardLeaderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferShardLeaderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TransferShardLeaderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[21]);
}

// ===================================================================

class LockShardRequest::_Internal {
 public:
};

LockShardRequest::LockShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.LockShardRequest)
}
LockShardRequest::LockShardRequest(const LockShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LockShardRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.LockShardRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LockShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LockShardRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LockShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[22]);
}

// ===================================================================

class LockShardResponse::_Internal {
 public:
};

LockShardResponse::LockShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.LockShardResponse)
}
LockShardResponse::LockShardResponse(const LockShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LockShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.LockShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LockShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LockShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LockShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[23]);
}

// ===================================================================

class UnlockShardRequest::_Internal {
 public:
};

UnlockShardRequest::UnlockShardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.UnlockShardRequest)
}
UnlockShardRequest::UnlockShardRequest(const UnlockShardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UnlockShardRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.UnlockShardRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnlockShardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnlockShardRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UnlockShardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[24]);
}

// ===================================================================

class UnlockShardResponse::_Internal {
 public:
};

UnlockShardResponse::UnlockShardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.UnlockShardResponse)
}
UnlockShardResponse::UnlockShardResponse(const UnlockShardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UnlockShardResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.UnlockShardResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnlockShardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnlockShardResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UnlockShardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[25]);
}

// ===================================================================

class ShardReadRequest::_Internal {
 public:
};

ShardReadRequest::ShardReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardReadRequest)
}
ShardReadRequest::ShardReadRequest(const ShardReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardReadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardReadRequest)
}

inline void ShardReadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardReadRequest::~ShardReadRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardReadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardReadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void ShardReadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardReadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardReadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardReadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardReadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardReadRequest)
  return target;
}

size_t ShardReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardReadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardReadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardReadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardReadRequest::GetClassData() const { return &_class_data_; }


void ShardReadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardReadRequest*>(&to_msg);
  auto& from = static_cast<const ShardReadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardReadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardReadRequest::CopyFrom(const ShardReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReadRequest::IsInitialized() const {
  return true;
}

void ShardReadRequest::InternalSwap(ShardReadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.shard_id_, other->_impl_.shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardReadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[26]);
}

// ===================================================================

class ShardReadResponse::_Internal {
 public:
};

ShardReadResponse::ShardReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardReadResponse)
}
ShardReadResponse::ShardReadResponse(const ShardReadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardReadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardReadResponse)
}

inline void ShardReadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardReadResponse::~ShardReadResponse() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardReadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardReadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void ShardReadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardReadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardReadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardReadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardReadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardReadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardReadResponse)
  return target;
}

size_t ShardReadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardReadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardReadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardReadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardReadResponse::GetClassData() const { return &_class_data_; }


void ShardReadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardReadResponse*>(&to_msg);
  auto& from = static_cast<const ShardReadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardReadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardReadResponse::CopyFrom(const ShardReadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardReadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardReadResponse::IsInitialized() const {
  return true;
}

void ShardReadResponse::InternalSwap(ShardReadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardReadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[27]);
}

// ===================================================================

class ShardWriteRequest::_Internal {
 public:
};

ShardWriteRequest::ShardWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardWriteRequest)
}
ShardWriteRequest::ShardWriteRequest(const ShardWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardWriteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardWriteRequest)
}

inline void ShardWriteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardWriteRequest::~ShardWriteRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardWriteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void ShardWriteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardWriteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardWriteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardWriteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardWriteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardWriteRequest)
  return target;
}

size_t ShardWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardWriteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardWriteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardWriteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardWriteRequest::GetClassData() const { return &_class_data_; }


void ShardWriteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardWriteRequest*>(&to_msg);
  auto& from = static_cast<const ShardWriteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardWriteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardWriteRequest::CopyFrom(const ShardWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardWriteRequest::IsInitialized() const {
  return true;
}

void ShardWriteRequest::InternalSwap(ShardWriteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.shard_id_, other->_impl_.shard_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardWriteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[28]);
}

// ===================================================================

class ShardWriteResponse::_Internal {
 public:
};

ShardWriteResponse::ShardWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardWriteResponse)
}
ShardWriteResponse::ShardWriteResponse(const ShardWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardWriteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.not_leader_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.not_leader_ = from._impl_.not_leader_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardWriteResponse)
}

inline void ShardWriteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.not_leader_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardWriteResponse::~ShardWriteResponse() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardWriteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardWriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardWriteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardWriteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.not_leader_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardWriteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool not_leader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.not_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardWriteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardWriteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool not_leader = 1;
  if (this->_internal_not_leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_not_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardWriteResponse)
  return target;
}

size_t ShardWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardWriteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool not_leader = 1;
  if (this->_internal_not_leader() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardWriteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardWriteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardWriteResponse::GetClassData() const { return &_class_data_; }


void ShardWriteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardWriteResponse*>(&to_msg);
  auto& from = static_cast<const ShardWriteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardWriteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_not_leader() != 0) {
    _this->_internal_set_not_leader(from._internal_not_leader());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardWriteResponse::CopyFrom(const ShardWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardWriteResponse::IsInitialized() const {
  return true;
}

void ShardWriteResponse::InternalSwap(ShardWriteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.not_leader_, other->_impl_.not_leader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardWriteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[29]);
}

// ===================================================================

class ShardAppendLogRequest_Entry::_Internal {
 public:
};

ShardAppendLogRequest_Entry::ShardAppendLogRequest_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardAppendLogRequest.Entry)
}
ShardAppendLogRequest_Entry::ShardAppendLogRequest_Entry(const ShardAppendLogRequest_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardAppendLogRequest_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.op_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.op_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op().empty()) {
    _this->_impl_.op_.Set(from._internal_op(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardAppendLogRequest.Entry)
}

inline void ShardAppendLogRequest_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.op_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.index_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.op_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardAppendLogRequest_Entry::~ShardAppendLogRequest_Entry() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardAppendLogRequest.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardAppendLogRequest_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.op_.Destroy();
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void ShardAppendLogRequest_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardAppendLogRequest_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardAppendLogRequest.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.op_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.index_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardAppendLogRequest_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_op();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bedrock.dataserver.ShardAppendLogRequest.Entry.op"));
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardAppendLogRequest_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardAppendLogRequest.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string op = 1;
  if (!this->_internal_op().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op().data(), static_cast<int>(this->_internal_op().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bedrock.dataserver.ShardAppendLogRequest.Entry.op");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op(), target);
  }

  // uint64 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_index(), target);
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardAppendLogRequest.Entry)
  return target;
}

size_t ShardAppendLogRequest_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardAppendLogRequest.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op = 1;
  if (!this->_internal_op().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op());
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint64 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardAppendLogRequest_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardAppendLogRequest_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardAppendLogRequest_Entry::GetClassData() const { return &_class_data_; }


void ShardAppendLogRequest_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardAppendLogRequest_Entry*>(&to_msg);
  auto& from = static_cast<const ShardAppendLogRequest_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardAppendLogRequest.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_op().empty()) {
    _this->_internal_set_op(from._internal_op());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardAppendLogRequest_Entry::CopyFrom(const ShardAppendLogRequest_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardAppendLogRequest.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAppendLogRequest_Entry::IsInitialized() const {
  return true;
}

void ShardAppendLogRequest_Entry::InternalSwap(ShardAppendLogRequest_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_, lhs_arena,
      &other->_impl_.op_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardAppendLogRequest_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[30]);
}

// ===================================================================

class ShardAppendLogRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& leader_change_ts(const ShardAppendLogRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ShardAppendLogRequest::_Internal::leader_change_ts(const ShardAppendLogRequest* msg) {
  return *msg->_impl_.leader_change_ts_;
}
void ShardAppendLogRequest::clear_leader_change_ts() {
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
}
ShardAppendLogRequest::ShardAppendLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardAppendLogRequest)
}
ShardAppendLogRequest::ShardAppendLogRequest(const ShardAppendLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardAppendLogRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leader_change_ts()) {
    _this->_impl_.leader_change_ts_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.leader_change_ts_);
  }
  _this->_impl_.shard_id_ = from._impl_.shard_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardAppendLogRequest)
}

inline void ShardAppendLogRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.leader_change_ts_){nullptr}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardAppendLogRequest::~ShardAppendLogRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardAppendLogRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardAppendLogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.leader_change_ts_;
}

void ShardAppendLogRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardAppendLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardAppendLogRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.leader_change_ts_ != nullptr) {
    delete _impl_.leader_change_ts_;
  }
  _impl_.leader_change_ts_ = nullptr;
  _impl_.shard_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardAppendLogRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp leader_change_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leader_change_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.dataserver.ShardAppendLogRequest.Entry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardAppendLogRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardAppendLogRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // .google.protobuf.Timestamp leader_change_ts = 2;
  if (this->_internal_has_leader_change_ts()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::leader_change_ts(this),
        _Internal::leader_change_ts(this).GetCachedSize(), target, stream);
  }

  // repeated .bedrock.dataserver.ShardAppendLogRequest.Entry entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardAppendLogRequest)
  return target;
}

size_t ShardAppendLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardAppendLogRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.dataserver.ShardAppendLogRequest.Entry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp leader_change_ts = 2;
  if (this->_internal_has_leader_change_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.leader_change_ts_);
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardAppendLogRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardAppendLogRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardAppendLogRequest::GetClassData() const { return &_class_data_; }


void ShardAppendLogRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardAppendLogRequest*>(&to_msg);
  auto& from = static_cast<const ShardAppendLogRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardAppendLogRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_has_leader_change_ts()) {
    _this->_internal_mutable_leader_change_ts()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_leader_change_ts());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardAppendLogRequest::CopyFrom(const ShardAppendLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardAppendLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAppendLogRequest::IsInitialized() const {
  return true;
}

void ShardAppendLogRequest::InternalSwap(ShardAppendLogRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardAppendLogRequest, _impl_.shard_id_)
      + sizeof(ShardAppendLogRequest::_impl_.shard_id_)
      - PROTOBUF_FIELD_OFFSET(ShardAppendLogRequest, _impl_.leader_change_ts_)>(
          reinterpret_cast<char*>(&_impl_.leader_change_ts_),
          reinterpret_cast<char*>(&other->_impl_.leader_change_ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardAppendLogRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[31]);
}

// ===================================================================

class ShardAppendLogResponse::_Internal {
 public:
};

ShardAppendLogResponse::ShardAppendLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardAppendLogResponse)
}
ShardAppendLogResponse::ShardAppendLogResponse(const ShardAppendLogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardAppendLogResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_applied_index_){}
    , decltype(_impl_.is_old_leader_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.last_applied_index_, &from._impl_.last_applied_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_old_leader_) -
    reinterpret_cast<char*>(&_impl_.last_applied_index_)) + sizeof(_impl_.is_old_leader_));
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardAppendLogResponse)
}

inline void ShardAppendLogResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_applied_index_){uint64_t{0u}}
    , decltype(_impl_.is_old_leader_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShardAppendLogResponse::~ShardAppendLogResponse() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardAppendLogResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardAppendLogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShardAppendLogResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardAppendLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardAppendLogResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.last_applied_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_old_leader_) -
      reinterpret_cast<char*>(&_impl_.last_applied_index_)) + sizeof(_impl_.is_old_leader_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardAppendLogResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_old_leader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_old_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_applied_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.last_applied_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardAppendLogResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardAppendLogResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_old_leader = 1;
  if (this->_internal_is_old_leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_old_leader(), target);
  }

  // uint64 last_applied_index = 2;
  if (this->_internal_last_applied_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_applied_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardAppendLogResponse)
  return target;
}

size_t ShardAppendLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardAppendLogResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 last_applied_index = 2;
  if (this->_internal_last_applied_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_applied_index());
  }

  // bool is_old_leader = 1;
  if (this->_internal_is_old_leader() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardAppendLogResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardAppendLogResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardAppendLogResponse::GetClassData() const { return &_class_data_; }


void ShardAppendLogResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardAppendLogResponse*>(&to_msg);
  auto& from = static_cast<const ShardAppendLogResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardAppendLogResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_last_applied_index() != 0) {
    _this->_internal_set_last_applied_index(from._internal_last_applied_index());
  }
  if (from._internal_is_old_leader() != 0) {
    _this->_internal_set_is_old_leader(from._internal_is_old_leader());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardAppendLogResponse::CopyFrom(const ShardAppendLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardAppendLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAppendLogResponse::IsInitialized() const {
  return true;
}

void ShardAppendLogResponse::InternalSwap(ShardAppendLogResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardAppendLogResponse, _impl_.is_old_leader_)
      + sizeof(ShardAppendLogResponse::_impl_.is_old_leader_)
      - PROTOBUF_FIELD_OFFSET(ShardAppendLogResponse, _impl_.last_applied_index_)>(
          reinterpret_cast<char*>(&_impl_.last_applied_index_),
          reinterpret_cast<char*>(&other->_impl_.last_applied_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardAppendLogResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[32]);
}

// ===================================================================

class ShardInstallSnapshotRequest::_Internal {
 public:
};

ShardInstallSnapshotRequest::ShardInstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardInstallSnapshotRequest)
}
ShardInstallSnapshotRequest::ShardInstallSnapshotRequest(const ShardInstallSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShardInstallSnapshotRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_piece_){}
    , decltype(_impl_.shard_id_){}
    , decltype(_impl_.last_wal_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_piece_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_piece().empty()) {
    _this->_impl_.data_piece_.Set(from._internal_data_piece(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.shard_id_, &from._impl_.shard_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_wal_index_) -
    reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.last_wal_index_));
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardInstallSnapshotRequest)
}

inline void ShardInstallSnapshotRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_piece_){}
    , decltype(_impl_.shard_id_){uint64_t{0u}}
    , decltype(_impl_.last_wal_index_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_piece_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ShardInstallSnapshotRequest::~ShardInstallSnapshotRequest() {
  // @@protoc_insertion_point(destructor:bedrock.dataserver.ShardInstallSnapshotRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShardInstallSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_piece_.Destroy();
}

void ShardInstallSnapshotRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShardInstallSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.dataserver.ShardInstallSnapshotRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_piece_.ClearToEmpty();
  ::memset(&_impl_.shard_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_wal_index_) -
      reinterpret_cast<char*>(&_impl_.shard_id_)) + sizeof(_impl_.last_wal_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShardInstallSnapshotRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 shard_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shard_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data_piece = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_wal_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_wal_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShardInstallSnapshotRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.dataserver.ShardInstallSnapshotRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_shard_id(), target);
  }

  // bytes data_piece = 2;
  if (!this->_internal_data_piece().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data_piece(), target);
  }

  // uint64 last_wal_index = 3;
  if (this->_internal_last_wal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_wal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.dataserver.ShardInstallSnapshotRequest)
  return target;
}

size_t ShardInstallSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.dataserver.ShardInstallSnapshotRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data_piece = 2;
  if (!this->_internal_data_piece().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_piece());
  }

  // uint64 shard_id = 1;
  if (this->_internal_shard_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_shard_id());
  }

  // uint64 last_wal_index = 3;
  if (this->_internal_last_wal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_wal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardInstallSnapshotRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShardInstallSnapshotRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardInstallSnapshotRequest::GetClassData() const { return &_class_data_; }


void ShardInstallSnapshotRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShardInstallSnapshotRequest*>(&to_msg);
  auto& from = static_cast<const ShardInstallSnapshotRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.dataserver.ShardInstallSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data_piece().empty()) {
    _this->_internal_set_data_piece(from._internal_data_piece());
  }
  if (from._internal_shard_id() != 0) {
    _this->_internal_set_shard_id(from._internal_shard_id());
  }
  if (from._internal_last_wal_index() != 0) {
    _this->_internal_set_last_wal_index(from._internal_last_wal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShardInstallSnapshotRequest::CopyFrom(const ShardInstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.dataserver.ShardInstallSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInstallSnapshotRequest::IsInitialized() const {
  return true;
}

void ShardInstallSnapshotRequest::InternalSwap(ShardInstallSnapshotRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_piece_, lhs_arena,
      &other->_impl_.data_piece_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShardInstallSnapshotRequest, _impl_.last_wal_index_)
      + sizeof(ShardInstallSnapshotRequest::_impl_.last_wal_index_)
      - PROTOBUF_FIELD_OFFSET(ShardInstallSnapshotRequest, _impl_.shard_id_)>(
          reinterpret_cast<char*>(&_impl_.shard_id_),
          reinterpret_cast<char*>(&other->_impl_.shard_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShardInstallSnapshotRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[33]);
}

// ===================================================================

class ShardInstallSnapshotResponse::_Internal {
 public:
};

ShardInstallSnapshotResponse::ShardInstallSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardInstallSnapshotResponse)
}
ShardInstallSnapshotResponse::ShardInstallSnapshotResponse(const ShardInstallSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShardInstallSnapshotResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardInstallSnapshotResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardInstallSnapshotResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardInstallSnapshotResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShardInstallSnapshotResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[34]);
}

// ===================================================================

class ShardWriteReplicaRequest::_Internal {
 public:
};

ShardWriteReplicaRequest::ShardWriteReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardWriteReplicaRequest)
}
ShardWriteReplicaRequest::ShardWriteReplicaRequest(const ShardWriteReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShardWriteReplicaRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardWriteReplicaRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardWriteReplicaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardWriteReplicaRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShardWriteReplicaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[35]);
}

// ===================================================================

class ShardWriteReplicaResponse::_Internal {
 public:
};

ShardWriteReplicaResponse::ShardWriteReplicaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardWriteReplicaResponse)
}
ShardWriteReplicaResponse::ShardWriteReplicaResponse(const ShardWriteReplicaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShardWriteReplicaResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardWriteReplicaResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardWriteReplicaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardWriteReplicaResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShardWriteReplicaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[36]);
}

// ===================================================================

class ShardRepairRequest::_Internal {
 public:
};

ShardRepairRequest::ShardRepairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardRepairRequest)
}
ShardRepairRequest::ShardRepairRequest(const ShardRepairRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShardRepairRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardRepairRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardRepairRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardRepairRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShardRepairRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[37]);
}

// ===================================================================

class ShardRepairResponse::_Internal {
 public:
};

ShardRepairResponse::ShardRepairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.ShardRepairResponse)
}
ShardRepairResponse::ShardRepairResponse(const ShardRepairResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShardRepairResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.ShardRepairResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShardRepairResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShardRepairResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShardRepairResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[38]);
}

// ===================================================================

class DataServerJoinRequest::_Internal {
 public:
};

DataServerJoinRequest::DataServerJoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.DataServerJoinRequest)
}
DataServerJoinRequest::DataServerJoinRequest(const DataServerJoinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DataServerJoinRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.DataServerJoinRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataServerJoinRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataServerJoinRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DataServerJoinRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[39]);
}

// ===================================================================

class DataServerJoinResponse::_Internal {
 public:
};

DataServerJoinResponse::DataServerJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.DataServerJoinResponse)
}
DataServerJoinResponse::DataServerJoinResponse(const DataServerJoinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DataServerJoinResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.DataServerJoinResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataServerJoinResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataServerJoinResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DataServerJoinResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[40]);
}

// ===================================================================

class DataServerLeaveRequest::_Internal {
 public:
};

DataServerLeaveRequest::DataServerLeaveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.DataServerLeaveRequest)
}
DataServerLeaveRequest::DataServerLeaveRequest(const DataServerLeaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DataServerLeaveRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.DataServerLeaveRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataServerLeaveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataServerLeaveRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DataServerLeaveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[41]);
}

// ===================================================================

class DataServerLeaveResponse::_Internal {
 public:
};

DataServerLeaveResponse::DataServerLeaveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:bedrock.dataserver.DataServerLeaveResponse)
}
DataServerLeaveResponse::DataServerLeaveResponse(const DataServerLeaveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DataServerLeaveResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bedrock.dataserver.DataServerLeaveResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataServerLeaveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataServerLeaveResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DataServerLeaveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dataserver_2eproto_getter, &descriptor_table_dataserver_2eproto_once,
      file_level_metadata_dataserver_2eproto[42]);
}

// ===================================================================

DataService::~DataService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DataService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dataserver_2eproto);
  return file_level_service_descriptors_dataserver_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DataService::GetDescriptor() {
  return descriptor();
}

void DataService::CreateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::CreateShardRequest*,
                         ::bedrock::dataserver::CreateShardResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateShard() not implemented.");
  done->Run();
}

void DataService::DeleteShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::DeleteShardRequest*,
                         ::PROTOBUF_NAMESPACE_ID::Empty*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteShard() not implemented.");
  done->Run();
}

void DataService::ShardInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::ShardInfoRequest*,
                         ::bedrock::dataserver::ShardInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShardInfo() not implemented.");
  done->Run();
}

void DataService::SplitShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::SplitShardRequest*,
                         ::bedrock::dataserver::SplitShardResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SplitShard() not implemented.");
  done->Run();
}

void DataService::MergeShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::MergeShardRequest*,
                         ::bedrock::dataserver::MergeShardResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MergeShard() not implemented.");
  done->Run();
}

void DataService::TransferShardLeader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::TransferShardLeaderRequest*,
                         ::bedrock::dataserver::TransferShardLeaderResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransferShardLeader() not implemented.");
  done->Run();
}

void DataService::ShardRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::ShardReadRequest*,
                         ::bedrock::dataserver::ShardReadResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShardRead() not implemented.");
  done->Run();
}

void DataService::ShardWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::ShardWriteRequest*,
                         ::bedrock::dataserver::ShardWriteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShardWrite() not implemented.");
  done->Run();
}

void DataService::ShardAppendLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::ShardAppendLogRequest*,
                         ::bedrock::dataserver::ShardAppendLogResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShardAppendLog() not implemented.");
  done->Run();
}

void DataService::ShardInstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::ShardInstallSnapshotRequest*,
                         ::bedrock::dataserver::ShardInstallSnapshotResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShardInstallSnapshot() not implemented.");
  done->Run();
}

void DataService::MigrateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::dataserver::MigrateShardRequest*,
                         ::bedrock::dataserver::MigrateShardResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MigrateShard() not implemented.");
  done->Run();
}

void DataService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_dataserver_2eproto[0]);
  switch(method->index()) {
    case 0:
      CreateShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::CreateShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::CreateShardResponse*>(
                 response),
             done);
      break;
    case 1:
      DeleteShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::DeleteShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::PROTOBUF_NAMESPACE_ID::Empty*>(
                 response),
             done);
      break;
    case 2:
      ShardInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::ShardInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::ShardInfoResponse*>(
                 response),
             done);
      break;
    case 3:
      SplitShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::SplitShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::SplitShardResponse*>(
                 response),
             done);
      break;
    case 4:
      MergeShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::MergeShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::MergeShardResponse*>(
                 response),
             done);
      break;
    case 5:
      TransferShardLeader(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::TransferShardLeaderRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::TransferShardLeaderResponse*>(
                 response),
             done);
      break;
    case 6:
      ShardRead(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::ShardReadRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::ShardReadResponse*>(
                 response),
             done);
      break;
    case 7:
      ShardWrite(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::ShardWriteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::ShardWriteResponse*>(
                 response),
             done);
      break;
    case 8:
      ShardAppendLog(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::ShardAppendLogRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::ShardAppendLogResponse*>(
                 response),
             done);
      break;
    case 9:
      ShardInstallSnapshot(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::ShardInstallSnapshotRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::ShardInstallSnapshotResponse*>(
                 response),
             done);
      break;
    case 10:
      MigrateShard(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::dataserver::MigrateShardRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::dataserver::MigrateShardResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DataService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bedrock::dataserver::CreateShardRequest::default_instance();
    case 1:
      return ::bedrock::dataserver::DeleteShardRequest::default_instance();
    case 2:
      return ::bedrock::dataserver::ShardInfoRequest::default_instance();
    case 3:
      return ::bedrock::dataserver::SplitShardRequest::default_instance();
    case 4:
      return ::bedrock::dataserver::MergeShardRequest::default_instance();
    case 5:
      return ::bedrock::dataserver::TransferShardLeaderRequest::default_instance();
    case 6:
      return ::bedrock::dataserver::ShardReadRequest::default_instance();
    case 7:
      return ::bedrock::dataserver::ShardWriteRequest::default_instance();
    case 8:
      return ::bedrock::dataserver::ShardAppendLogRequest::default_instance();
    case 9:
      return ::bedrock::dataserver::ShardInstallSnapshotRequest::default_instance();
    case 10:
      return ::bedrock::dataserver::MigrateShardRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DataService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bedrock::dataserver::CreateShardResponse::default_instance();
    case 1:
      return ::PROTOBUF_NAMESPACE_ID::Empty::default_instance();
    case 2:
      return ::bedrock::dataserver::ShardInfoResponse::default_instance();
    case 3:
      return ::bedrock::dataserver::SplitShardResponse::default_instance();
    case 4:
      return ::bedrock::dataserver::MergeShardResponse::default_instance();
    case 5:
      return ::bedrock::dataserver::TransferShardLeaderResponse::default_instance();
    case 6:
      return ::bedrock::dataserver::ShardReadResponse::default_instance();
    case 7:
      return ::bedrock::dataserver::ShardWriteResponse::default_instance();
    case 8:
      return ::bedrock::dataserver::ShardAppendLogResponse::default_instance();
    case 9:
      return ::bedrock::dataserver::ShardInstallSnapshotResponse::default_instance();
    case 10:
      return ::bedrock::dataserver::MigrateShardResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DataService_Stub::DataService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DataService_Stub::DataService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DataService_Stub::~DataService_Stub() {
  if (owns_channel_) delete channel_;
}

void DataService_Stub::CreateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::CreateShardRequest* request,
                              ::bedrock::dataserver::CreateShardResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DataService_Stub::DeleteShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::DeleteShardRequest* request,
                              ::PROTOBUF_NAMESPACE_ID::Empty* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DataService_Stub::ShardInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::ShardInfoRequest* request,
                              ::bedrock::dataserver::ShardInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DataService_Stub::SplitShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::SplitShardRequest* request,
                              ::bedrock::dataserver::SplitShardResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DataService_Stub::MergeShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::MergeShardRequest* request,
                              ::bedrock::dataserver::MergeShardResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DataService_Stub::TransferShardLeader(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::TransferShardLeaderRequest* request,
                              ::bedrock::dataserver::TransferShardLeaderResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void DataService_Stub::ShardRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::ShardReadRequest* request,
                              ::bedrock::dataserver::ShardReadResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void DataService_Stub::ShardWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::ShardWriteRequest* request,
                              ::bedrock::dataserver::ShardWriteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void DataService_Stub::ShardAppendLog(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::ShardAppendLogRequest* request,
                              ::bedrock::dataserver::ShardAppendLogResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void DataService_Stub::ShardInstallSnapshot(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::ShardInstallSnapshotRequest* request,
                              ::bedrock::dataserver::ShardInstallSnapshotResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void DataService_Stub::MigrateShard(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::dataserver::MigrateShardRequest* request,
                              ::bedrock::dataserver::MigrateShardResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dataserver
}  // namespace bedrock
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardMeta*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::SplitShardRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::SplitShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::SplitShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::SplitShardResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::SplitShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::SplitShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::MergeShardRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::MergeShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::MergeShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::MergeShardResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::MergeShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::MergeShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::CreateShardRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::CreateShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::CreateShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::CreateShardResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::CreateShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::CreateShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::DeleteShardRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::DeleteShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::DeleteShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::DeleteShardResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::DeleteShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::DeleteShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardInfoRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardInfoResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::PullShardDataRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::PullShardDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::PullShardDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::PullShardDataResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::PullShardDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::PullShardDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::MigrateShardRequest_Entry*
Arena::CreateMaybeMessage< ::bedrock::dataserver::MigrateShardRequest_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::MigrateShardRequest_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::MigrateShardRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::MigrateShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::MigrateShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::MigrateShardResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::MigrateShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::MigrateShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::AddShardReplicaRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::AddShardReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::AddShardReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::AddShardReplicaResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::AddShardReplicaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::AddShardReplicaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::DeleteShardReplicaRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::DeleteShardReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::DeleteShardReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::DeleteShardReplicaResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::DeleteShardReplicaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::DeleteShardReplicaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::TransferShardLeaderRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::TransferShardLeaderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::TransferShardLeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::TransferShardLeaderResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::TransferShardLeaderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::TransferShardLeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::LockShardRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::LockShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::LockShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::LockShardResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::LockShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::LockShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::UnlockShardRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::UnlockShardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::UnlockShardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::UnlockShardResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::UnlockShardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::UnlockShardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardReadRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardReadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardReadResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardReadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardReadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardWriteRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardWriteResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardWriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardAppendLogRequest_Entry*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardAppendLogRequest_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardAppendLogRequest_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardAppendLogRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardAppendLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardAppendLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardAppendLogResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardAppendLogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardAppendLogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardInstallSnapshotRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardInstallSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardInstallSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardInstallSnapshotResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardInstallSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardInstallSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardWriteReplicaRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardWriteReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardWriteReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardWriteReplicaResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardWriteReplicaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardWriteReplicaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardRepairRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardRepairRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardRepairRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::ShardRepairResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::ShardRepairResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::ShardRepairResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::DataServerJoinRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::DataServerJoinRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::DataServerJoinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::DataServerJoinResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::DataServerJoinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::DataServerJoinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::DataServerLeaveRequest*
Arena::CreateMaybeMessage< ::bedrock::dataserver::DataServerLeaveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::DataServerLeaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::dataserver::DataServerLeaveResponse*
Arena::CreateMaybeMessage< ::bedrock::dataserver::DataServerLeaveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::dataserver::DataServerLeaveResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
