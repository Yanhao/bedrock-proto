// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2eproto;
namespace bedrock {
namespace proxy {
class BedRockCommitTxRequest;
class BedRockCommitTxRequestDefaultTypeInternal;
extern BedRockCommitTxRequestDefaultTypeInternal _BedRockCommitTxRequest_default_instance_;
class BedRockCommitTxResponse;
class BedRockCommitTxResponseDefaultTypeInternal;
extern BedRockCommitTxResponseDefaultTypeInternal _BedRockCommitTxResponse_default_instance_;
class BedRockDoScanRequest;
class BedRockDoScanRequestDefaultTypeInternal;
extern BedRockDoScanRequestDefaultTypeInternal _BedRockDoScanRequest_default_instance_;
class BedRockDoScanResponse;
class BedRockDoScanResponseDefaultTypeInternal;
extern BedRockDoScanResponseDefaultTypeInternal _BedRockDoScanResponse_default_instance_;
class BedRockKvDeleteRequest;
class BedRockKvDeleteRequestDefaultTypeInternal;
extern BedRockKvDeleteRequestDefaultTypeInternal _BedRockKvDeleteRequest_default_instance_;
class BedRockKvDeleteResponse;
class BedRockKvDeleteResponseDefaultTypeInternal;
extern BedRockKvDeleteResponseDefaultTypeInternal _BedRockKvDeleteResponse_default_instance_;
class BedRockKvGetRequest;
class BedRockKvGetRequestDefaultTypeInternal;
extern BedRockKvGetRequestDefaultTypeInternal _BedRockKvGetRequest_default_instance_;
class BedRockKvGetResponse;
class BedRockKvGetResponseDefaultTypeInternal;
extern BedRockKvGetResponseDefaultTypeInternal _BedRockKvGetResponse_default_instance_;
class BedRockKvMDeleteParam;
class BedRockKvMDeleteParamDefaultTypeInternal;
extern BedRockKvMDeleteParamDefaultTypeInternal _BedRockKvMDeleteParam_default_instance_;
class BedRockKvMDeleteRequest;
class BedRockKvMDeleteRequestDefaultTypeInternal;
extern BedRockKvMDeleteRequestDefaultTypeInternal _BedRockKvMDeleteRequest_default_instance_;
class BedRockKvMDeleteResponse;
class BedRockKvMDeleteResponseDefaultTypeInternal;
extern BedRockKvMDeleteResponseDefaultTypeInternal _BedRockKvMDeleteResponse_default_instance_;
class BedRockKvMGetKvRetPair;
class BedRockKvMGetKvRetPairDefaultTypeInternal;
extern BedRockKvMGetKvRetPairDefaultTypeInternal _BedRockKvMGetKvRetPair_default_instance_;
class BedRockKvMGetParam;
class BedRockKvMGetParamDefaultTypeInternal;
extern BedRockKvMGetParamDefaultTypeInternal _BedRockKvMGetParam_default_instance_;
class BedRockKvMGetRequest;
class BedRockKvMGetRequestDefaultTypeInternal;
extern BedRockKvMGetRequestDefaultTypeInternal _BedRockKvMGetRequest_default_instance_;
class BedRockKvMGetResponse;
class BedRockKvMGetResponseDefaultTypeInternal;
extern BedRockKvMGetResponseDefaultTypeInternal _BedRockKvMGetResponse_default_instance_;
class BedRockKvMSetParam;
class BedRockKvMSetParamDefaultTypeInternal;
extern BedRockKvMSetParamDefaultTypeInternal _BedRockKvMSetParam_default_instance_;
class BedRockKvMSetRequest;
class BedRockKvMSetRequestDefaultTypeInternal;
extern BedRockKvMSetRequestDefaultTypeInternal _BedRockKvMSetRequest_default_instance_;
class BedRockKvMSetResponse;
class BedRockKvMSetResponseDefaultTypeInternal;
extern BedRockKvMSetResponseDefaultTypeInternal _BedRockKvMSetResponse_default_instance_;
class BedRockKvPair;
class BedRockKvPairDefaultTypeInternal;
extern BedRockKvPairDefaultTypeInternal _BedRockKvPair_default_instance_;
class BedRockKvSetRequest;
class BedRockKvSetRequestDefaultTypeInternal;
extern BedRockKvSetRequestDefaultTypeInternal _BedRockKvSetRequest_default_instance_;
class BedRockKvSetResponse;
class BedRockKvSetResponseDefaultTypeInternal;
extern BedRockKvSetResponseDefaultTypeInternal _BedRockKvSetResponse_default_instance_;
class BedRockRollbackTxRequest;
class BedRockRollbackTxRequestDefaultTypeInternal;
extern BedRockRollbackTxRequestDefaultTypeInternal _BedRockRollbackTxRequest_default_instance_;
class BedRockRollbackTxResponse;
class BedRockRollbackTxResponseDefaultTypeInternal;
extern BedRockRollbackTxResponseDefaultTypeInternal _BedRockRollbackTxResponse_default_instance_;
class BedRockStartScanRequest;
class BedRockStartScanRequestDefaultTypeInternal;
extern BedRockStartScanRequestDefaultTypeInternal _BedRockStartScanRequest_default_instance_;
class BedRockStartScanResponse;
class BedRockStartScanResponseDefaultTypeInternal;
extern BedRockStartScanResponseDefaultTypeInternal _BedRockStartScanResponse_default_instance_;
class BedRockStartTxRequest;
class BedRockStartTxRequestDefaultTypeInternal;
extern BedRockStartTxRequestDefaultTypeInternal _BedRockStartTxRequest_default_instance_;
class BedRockStartTxResponse;
class BedRockStartTxResponseDefaultTypeInternal;
extern BedRockStartTxResponseDefaultTypeInternal _BedRockStartTxResponse_default_instance_;
class BedRockStopScanRequest;
class BedRockStopScanRequestDefaultTypeInternal;
extern BedRockStopScanRequestDefaultTypeInternal _BedRockStopScanRequest_default_instance_;
class BedRockStopScanResponse;
class BedRockStopScanResponseDefaultTypeInternal;
extern BedRockStopScanResponseDefaultTypeInternal _BedRockStopScanResponse_default_instance_;
class BedRockTxRangeLock;
class BedRockTxRangeLockDefaultTypeInternal;
extern BedRockTxRangeLockDefaultTypeInternal _BedRockTxRangeLock_default_instance_;
class BedRockTxRecordLock;
class BedRockTxRecordLockDefaultTypeInternal;
extern BedRockTxRecordLockDefaultTypeInternal _BedRockTxRecordLock_default_instance_;
class TxRecord;
class TxRecordDefaultTypeInternal;
extern TxRecordDefaultTypeInternal _TxRecord_default_instance_;
}  // namespace proxy
}  // namespace bedrock
PROTOBUF_NAMESPACE_OPEN
template<> ::bedrock::proxy::BedRockCommitTxRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockCommitTxRequest>(Arena*);
template<> ::bedrock::proxy::BedRockCommitTxResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockCommitTxResponse>(Arena*);
template<> ::bedrock::proxy::BedRockDoScanRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockDoScanRequest>(Arena*);
template<> ::bedrock::proxy::BedRockDoScanResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockDoScanResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvDeleteRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvDeleteRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvDeleteResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvDeleteResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvGetRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvGetRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvGetResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvGetResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvMDeleteParam* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMDeleteParam>(Arena*);
template<> ::bedrock::proxy::BedRockKvMDeleteRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMDeleteRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvMDeleteResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMDeleteResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvMGetKvRetPair* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMGetKvRetPair>(Arena*);
template<> ::bedrock::proxy::BedRockKvMGetParam* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMGetParam>(Arena*);
template<> ::bedrock::proxy::BedRockKvMGetRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMGetRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvMGetResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMGetResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvMSetParam* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMSetParam>(Arena*);
template<> ::bedrock::proxy::BedRockKvMSetRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMSetRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvMSetResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMSetResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvPair* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvPair>(Arena*);
template<> ::bedrock::proxy::BedRockKvSetRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvSetRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvSetResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvSetResponse>(Arena*);
template<> ::bedrock::proxy::BedRockRollbackTxRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockRollbackTxRequest>(Arena*);
template<> ::bedrock::proxy::BedRockRollbackTxResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockRollbackTxResponse>(Arena*);
template<> ::bedrock::proxy::BedRockStartScanRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockStartScanRequest>(Arena*);
template<> ::bedrock::proxy::BedRockStartScanResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockStartScanResponse>(Arena*);
template<> ::bedrock::proxy::BedRockStartTxRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockStartTxRequest>(Arena*);
template<> ::bedrock::proxy::BedRockStartTxResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockStartTxResponse>(Arena*);
template<> ::bedrock::proxy::BedRockStopScanRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockStopScanRequest>(Arena*);
template<> ::bedrock::proxy::BedRockStopScanResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockStopScanResponse>(Arena*);
template<> ::bedrock::proxy::BedRockTxRangeLock* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockTxRangeLock>(Arena*);
template<> ::bedrock::proxy::BedRockTxRecordLock* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockTxRecordLock>(Arena*);
template<> ::bedrock::proxy::TxRecord* Arena::CreateMaybeMessage<::bedrock::proxy::TxRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bedrock {
namespace proxy {

enum TxStatus : int {
  START = 0,
  FINISHED = 1,
  TxStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TxStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TxStatus_IsValid(int value);
constexpr TxStatus TxStatus_MIN = START;
constexpr TxStatus TxStatus_MAX = FINISHED;
constexpr int TxStatus_ARRAYSIZE = TxStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxStatus_descriptor();
template<typename T>
inline const std::string& TxStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TxStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TxStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TxStatus_descriptor(), enum_t_value);
}
inline bool TxStatus_Parse(
    const std::string& name, TxStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TxStatus>(
    TxStatus_descriptor(), name, value);
}
enum Error : int {
  OK = 0,
  NO_SUCH_KEY = 1,
  INVLIAD_PARAMETERS = 2,
  UNKNOWN = 255,
  Error_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Error_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Error_IsValid(int value);
constexpr Error Error_MIN = OK;
constexpr Error Error_MAX = UNKNOWN;
constexpr int Error_ARRAYSIZE = Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor();
template<typename T>
inline const std::string& Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_descriptor(), enum_t_value);
}
inline bool Error_Parse(
    const std::string& name, Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error>(
    Error_descriptor(), name, value);
}
enum BedRockTxLockType : int {
  SHARED = 0,
  EXCLUSIVE = 1,
  BedRockTxLockType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BedRockTxLockType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BedRockTxLockType_IsValid(int value);
constexpr BedRockTxLockType BedRockTxLockType_MIN = SHARED;
constexpr BedRockTxLockType BedRockTxLockType_MAX = EXCLUSIVE;
constexpr int BedRockTxLockType_ARRAYSIZE = BedRockTxLockType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BedRockTxLockType_descriptor();
template<typename T>
inline const std::string& BedRockTxLockType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BedRockTxLockType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BedRockTxLockType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BedRockTxLockType_descriptor(), enum_t_value);
}
inline bool BedRockTxLockType_Parse(
    const std::string& name, BedRockTxLockType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BedRockTxLockType>(
    BedRockTxLockType_descriptor(), name, value);
}
// ===================================================================

class TxRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.TxRecord) */ {
 public:
  inline TxRecord() : TxRecord(nullptr) {};
  virtual ~TxRecord();

  TxRecord(const TxRecord& from);
  TxRecord(TxRecord&& from) noexcept
    : TxRecord() {
    *this = ::std::move(from);
  }

  inline TxRecord& operator=(const TxRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxRecord& operator=(TxRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxRecord* internal_default_instance() {
    return reinterpret_cast<const TxRecord*>(
               &_TxRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxRecord& a, TxRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(TxRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxRecord* New() const final {
    return CreateMaybeMessage<TxRecord>(nullptr);
  }

  TxRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxRecord& from);
  void MergeFrom(const TxRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.TxRecord";
  }
  protected:
  explicit TxRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIdFieldNumber = 1,
    kHeartbeatTsFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 heartbeat_ts = 3;
  void clear_heartbeat_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 heartbeat_ts() const;
  void set_heartbeat_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_heartbeat_ts() const;
  void _internal_set_heartbeat_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .bedrock.proxy.TxStatus status = 2;
  void clear_status();
  ::bedrock::proxy::TxStatus status() const;
  void set_status(::bedrock::proxy::TxStatus value);
  private:
  ::bedrock::proxy::TxStatus _internal_status() const;
  void _internal_set_status(::bedrock::proxy::TxStatus value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.TxRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 heartbeat_ts_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvGetRequest) */ {
 public:
  inline BedRockKvGetRequest() : BedRockKvGetRequest(nullptr) {};
  virtual ~BedRockKvGetRequest();

  BedRockKvGetRequest(const BedRockKvGetRequest& from);
  BedRockKvGetRequest(BedRockKvGetRequest&& from) noexcept
    : BedRockKvGetRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvGetRequest& operator=(const BedRockKvGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvGetRequest& operator=(BedRockKvGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvGetRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvGetRequest*>(
               &_BedRockKvGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BedRockKvGetRequest& a, BedRockKvGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvGetRequest* New() const final {
    return CreateMaybeMessage<BedRockKvGetRequest>(nullptr);
  }

  BedRockKvGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvGetRequest& from);
  void MergeFrom(const BedRockKvGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvGetRequest";
  }
  protected:
  explicit BedRockKvGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvGetResponse) */ {
 public:
  inline BedRockKvGetResponse() : BedRockKvGetResponse(nullptr) {};
  virtual ~BedRockKvGetResponse();

  BedRockKvGetResponse(const BedRockKvGetResponse& from);
  BedRockKvGetResponse(BedRockKvGetResponse&& from) noexcept
    : BedRockKvGetResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvGetResponse& operator=(const BedRockKvGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvGetResponse& operator=(BedRockKvGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvGetResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvGetResponse*>(
               &_BedRockKvGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BedRockKvGetResponse& a, BedRockKvGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvGetResponse* New() const final {
    return CreateMaybeMessage<BedRockKvGetResponse>(nullptr);
  }

  BedRockKvGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvGetResponse& from);
  void MergeFrom(const BedRockKvGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvGetResponse";
  }
  protected:
  explicit BedRockKvGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kErrFieldNumber = 255,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvSetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvSetRequest) */ {
 public:
  inline BedRockKvSetRequest() : BedRockKvSetRequest(nullptr) {};
  virtual ~BedRockKvSetRequest();

  BedRockKvSetRequest(const BedRockKvSetRequest& from);
  BedRockKvSetRequest(BedRockKvSetRequest&& from) noexcept
    : BedRockKvSetRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvSetRequest& operator=(const BedRockKvSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvSetRequest& operator=(BedRockKvSetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvSetRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvSetRequest*>(
               &_BedRockKvSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BedRockKvSetRequest& a, BedRockKvSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvSetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvSetRequest* New() const final {
    return CreateMaybeMessage<BedRockKvSetRequest>(nullptr);
  }

  BedRockKvSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvSetRequest& from);
  void MergeFrom(const BedRockKvSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvSetRequest";
  }
  protected:
  explicit BedRockKvSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kStorageIdFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvSetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvSetResponse) */ {
 public:
  inline BedRockKvSetResponse() : BedRockKvSetResponse(nullptr) {};
  virtual ~BedRockKvSetResponse();

  BedRockKvSetResponse(const BedRockKvSetResponse& from);
  BedRockKvSetResponse(BedRockKvSetResponse&& from) noexcept
    : BedRockKvSetResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvSetResponse& operator=(const BedRockKvSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvSetResponse& operator=(BedRockKvSetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvSetResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvSetResponse*>(
               &_BedRockKvSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BedRockKvSetResponse& a, BedRockKvSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvSetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvSetResponse* New() const final {
    return CreateMaybeMessage<BedRockKvSetResponse>(nullptr);
  }

  BedRockKvSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvSetResponse& from);
  void MergeFrom(const BedRockKvSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvSetResponse";
  }
  protected:
  explicit BedRockKvSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvDeleteRequest) */ {
 public:
  inline BedRockKvDeleteRequest() : BedRockKvDeleteRequest(nullptr) {};
  virtual ~BedRockKvDeleteRequest();

  BedRockKvDeleteRequest(const BedRockKvDeleteRequest& from);
  BedRockKvDeleteRequest(BedRockKvDeleteRequest&& from) noexcept
    : BedRockKvDeleteRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvDeleteRequest& operator=(const BedRockKvDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvDeleteRequest& operator=(BedRockKvDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvDeleteRequest*>(
               &_BedRockKvDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BedRockKvDeleteRequest& a, BedRockKvDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvDeleteRequest* New() const final {
    return CreateMaybeMessage<BedRockKvDeleteRequest>(nullptr);
  }

  BedRockKvDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvDeleteRequest& from);
  void MergeFrom(const BedRockKvDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvDeleteRequest";
  }
  protected:
  explicit BedRockKvDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvDeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvDeleteResponse) */ {
 public:
  inline BedRockKvDeleteResponse() : BedRockKvDeleteResponse(nullptr) {};
  virtual ~BedRockKvDeleteResponse();

  BedRockKvDeleteResponse(const BedRockKvDeleteResponse& from);
  BedRockKvDeleteResponse(BedRockKvDeleteResponse&& from) noexcept
    : BedRockKvDeleteResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvDeleteResponse& operator=(const BedRockKvDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvDeleteResponse& operator=(BedRockKvDeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvDeleteResponse*>(
               &_BedRockKvDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BedRockKvDeleteResponse& a, BedRockKvDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvDeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvDeleteResponse* New() const final {
    return CreateMaybeMessage<BedRockKvDeleteResponse>(nullptr);
  }

  BedRockKvDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvDeleteResponse& from);
  void MergeFrom(const BedRockKvDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvDeleteResponse";
  }
  protected:
  explicit BedRockKvDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMSetParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMSetParam) */ {
 public:
  inline BedRockKvMSetParam() : BedRockKvMSetParam(nullptr) {};
  virtual ~BedRockKvMSetParam();

  BedRockKvMSetParam(const BedRockKvMSetParam& from);
  BedRockKvMSetParam(BedRockKvMSetParam&& from) noexcept
    : BedRockKvMSetParam() {
    *this = ::std::move(from);
  }

  inline BedRockKvMSetParam& operator=(const BedRockKvMSetParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMSetParam& operator=(BedRockKvMSetParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMSetParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMSetParam* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMSetParam*>(
               &_BedRockKvMSetParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BedRockKvMSetParam& a, BedRockKvMSetParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMSetParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMSetParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMSetParam* New() const final {
    return CreateMaybeMessage<BedRockKvMSetParam>(nullptr);
  }

  BedRockKvMSetParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMSetParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMSetParam& from);
  void MergeFrom(const BedRockKvMSetParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMSetParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMSetParam";
  }
  protected:
  explicit BedRockKvMSetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMSetParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMSetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMSetRequest) */ {
 public:
  inline BedRockKvMSetRequest() : BedRockKvMSetRequest(nullptr) {};
  virtual ~BedRockKvMSetRequest();

  BedRockKvMSetRequest(const BedRockKvMSetRequest& from);
  BedRockKvMSetRequest(BedRockKvMSetRequest&& from) noexcept
    : BedRockKvMSetRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvMSetRequest& operator=(const BedRockKvMSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMSetRequest& operator=(BedRockKvMSetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMSetRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMSetRequest*>(
               &_BedRockKvMSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BedRockKvMSetRequest& a, BedRockKvMSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMSetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMSetRequest* New() const final {
    return CreateMaybeMessage<BedRockKvMSetRequest>(nullptr);
  }

  BedRockKvMSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMSetRequest& from);
  void MergeFrom(const BedRockKvMSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMSetRequest";
  }
  protected:
  explicit BedRockKvMSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::bedrock::proxy::BedRockKvMSetParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam >*
      mutable_params();
  private:
  const ::bedrock::proxy::BedRockKvMSetParam& _internal_params(int index) const;
  ::bedrock::proxy::BedRockKvMSetParam* _internal_add_params();
  public:
  const ::bedrock::proxy::BedRockKvMSetParam& params(int index) const;
  ::bedrock::proxy::BedRockKvMSetParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam >&
      params() const;

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam > params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMSetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMSetResponse) */ {
 public:
  inline BedRockKvMSetResponse() : BedRockKvMSetResponse(nullptr) {};
  virtual ~BedRockKvMSetResponse();

  BedRockKvMSetResponse(const BedRockKvMSetResponse& from);
  BedRockKvMSetResponse(BedRockKvMSetResponse&& from) noexcept
    : BedRockKvMSetResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvMSetResponse& operator=(const BedRockKvMSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMSetResponse& operator=(BedRockKvMSetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMSetResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMSetResponse*>(
               &_BedRockKvMSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BedRockKvMSetResponse& a, BedRockKvMSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMSetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMSetResponse* New() const final {
    return CreateMaybeMessage<BedRockKvMSetResponse>(nullptr);
  }

  BedRockKvMSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMSetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMSetResponse& from);
  void MergeFrom(const BedRockKvMSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMSetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMSetResponse";
  }
  protected:
  explicit BedRockKvMSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMGetParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMGetParam) */ {
 public:
  inline BedRockKvMGetParam() : BedRockKvMGetParam(nullptr) {};
  virtual ~BedRockKvMGetParam();

  BedRockKvMGetParam(const BedRockKvMGetParam& from);
  BedRockKvMGetParam(BedRockKvMGetParam&& from) noexcept
    : BedRockKvMGetParam() {
    *this = ::std::move(from);
  }

  inline BedRockKvMGetParam& operator=(const BedRockKvMGetParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMGetParam& operator=(BedRockKvMGetParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMGetParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMGetParam* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMGetParam*>(
               &_BedRockKvMGetParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BedRockKvMGetParam& a, BedRockKvMGetParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMGetParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMGetParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMGetParam* New() const final {
    return CreateMaybeMessage<BedRockKvMGetParam>(nullptr);
  }

  BedRockKvMGetParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMGetParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMGetParam& from);
  void MergeFrom(const BedRockKvMGetParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMGetParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMGetParam";
  }
  protected:
  explicit BedRockKvMGetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMGetParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMGetRequest) */ {
 public:
  inline BedRockKvMGetRequest() : BedRockKvMGetRequest(nullptr) {};
  virtual ~BedRockKvMGetRequest();

  BedRockKvMGetRequest(const BedRockKvMGetRequest& from);
  BedRockKvMGetRequest(BedRockKvMGetRequest&& from) noexcept
    : BedRockKvMGetRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvMGetRequest& operator=(const BedRockKvMGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMGetRequest& operator=(BedRockKvMGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMGetRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMGetRequest*>(
               &_BedRockKvMGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BedRockKvMGetRequest& a, BedRockKvMGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMGetRequest* New() const final {
    return CreateMaybeMessage<BedRockKvMGetRequest>(nullptr);
  }

  BedRockKvMGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMGetRequest& from);
  void MergeFrom(const BedRockKvMGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMGetRequest";
  }
  protected:
  explicit BedRockKvMGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::bedrock::proxy::BedRockKvMGetParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam >*
      mutable_params();
  private:
  const ::bedrock::proxy::BedRockKvMGetParam& _internal_params(int index) const;
  ::bedrock::proxy::BedRockKvMGetParam* _internal_add_params();
  public:
  const ::bedrock::proxy::BedRockKvMGetParam& params(int index) const;
  ::bedrock::proxy::BedRockKvMGetParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam >&
      params() const;

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam > params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMGetKvRetPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMGetKvRetPair) */ {
 public:
  inline BedRockKvMGetKvRetPair() : BedRockKvMGetKvRetPair(nullptr) {};
  virtual ~BedRockKvMGetKvRetPair();

  BedRockKvMGetKvRetPair(const BedRockKvMGetKvRetPair& from);
  BedRockKvMGetKvRetPair(BedRockKvMGetKvRetPair&& from) noexcept
    : BedRockKvMGetKvRetPair() {
    *this = ::std::move(from);
  }

  inline BedRockKvMGetKvRetPair& operator=(const BedRockKvMGetKvRetPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMGetKvRetPair& operator=(BedRockKvMGetKvRetPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMGetKvRetPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMGetKvRetPair* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMGetKvRetPair*>(
               &_BedRockKvMGetKvRetPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BedRockKvMGetKvRetPair& a, BedRockKvMGetKvRetPair& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMGetKvRetPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMGetKvRetPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMGetKvRetPair* New() const final {
    return CreateMaybeMessage<BedRockKvMGetKvRetPair>(nullptr);
  }

  BedRockKvMGetKvRetPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMGetKvRetPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMGetKvRetPair& from);
  void MergeFrom(const BedRockKvMGetKvRetPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMGetKvRetPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMGetKvRetPair";
  }
  protected:
  explicit BedRockKvMGetKvRetPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMGetKvRetPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMGetResponse) */ {
 public:
  inline BedRockKvMGetResponse() : BedRockKvMGetResponse(nullptr) {};
  virtual ~BedRockKvMGetResponse();

  BedRockKvMGetResponse(const BedRockKvMGetResponse& from);
  BedRockKvMGetResponse(BedRockKvMGetResponse&& from) noexcept
    : BedRockKvMGetResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvMGetResponse& operator=(const BedRockKvMGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMGetResponse& operator=(BedRockKvMGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMGetResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMGetResponse*>(
               &_BedRockKvMGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BedRockKvMGetResponse& a, BedRockKvMGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMGetResponse* New() const final {
    return CreateMaybeMessage<BedRockKvMGetResponse>(nullptr);
  }

  BedRockKvMGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMGetResponse& from);
  void MergeFrom(const BedRockKvMGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMGetResponse";
  }
  protected:
  explicit BedRockKvMGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 1,
    kErrFieldNumber = 255,
  };
  // repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::bedrock::proxy::BedRockKvMGetKvRetPair* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair >*
      mutable_kvs();
  private:
  const ::bedrock::proxy::BedRockKvMGetKvRetPair& _internal_kvs(int index) const;
  ::bedrock::proxy::BedRockKvMGetKvRetPair* _internal_add_kvs();
  public:
  const ::bedrock::proxy::BedRockKvMGetKvRetPair& kvs(int index) const;
  ::bedrock::proxy::BedRockKvMGetKvRetPair* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair >&
      kvs() const;

  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair > kvs_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMDeleteParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMDeleteParam) */ {
 public:
  inline BedRockKvMDeleteParam() : BedRockKvMDeleteParam(nullptr) {};
  virtual ~BedRockKvMDeleteParam();

  BedRockKvMDeleteParam(const BedRockKvMDeleteParam& from);
  BedRockKvMDeleteParam(BedRockKvMDeleteParam&& from) noexcept
    : BedRockKvMDeleteParam() {
    *this = ::std::move(from);
  }

  inline BedRockKvMDeleteParam& operator=(const BedRockKvMDeleteParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMDeleteParam& operator=(BedRockKvMDeleteParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMDeleteParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMDeleteParam* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMDeleteParam*>(
               &_BedRockKvMDeleteParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BedRockKvMDeleteParam& a, BedRockKvMDeleteParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMDeleteParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMDeleteParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMDeleteParam* New() const final {
    return CreateMaybeMessage<BedRockKvMDeleteParam>(nullptr);
  }

  BedRockKvMDeleteParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMDeleteParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMDeleteParam& from);
  void MergeFrom(const BedRockKvMDeleteParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMDeleteParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMDeleteParam";
  }
  protected:
  explicit BedRockKvMDeleteParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMDeleteParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMDeleteRequest) */ {
 public:
  inline BedRockKvMDeleteRequest() : BedRockKvMDeleteRequest(nullptr) {};
  virtual ~BedRockKvMDeleteRequest();

  BedRockKvMDeleteRequest(const BedRockKvMDeleteRequest& from);
  BedRockKvMDeleteRequest(BedRockKvMDeleteRequest&& from) noexcept
    : BedRockKvMDeleteRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvMDeleteRequest& operator=(const BedRockKvMDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMDeleteRequest& operator=(BedRockKvMDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMDeleteRequest*>(
               &_BedRockKvMDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BedRockKvMDeleteRequest& a, BedRockKvMDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMDeleteRequest* New() const final {
    return CreateMaybeMessage<BedRockKvMDeleteRequest>(nullptr);
  }

  BedRockKvMDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMDeleteRequest& from);
  void MergeFrom(const BedRockKvMDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMDeleteRequest";
  }
  protected:
  explicit BedRockKvMDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::bedrock::proxy::BedRockKvMDeleteParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam >*
      mutable_params();
  private:
  const ::bedrock::proxy::BedRockKvMDeleteParam& _internal_params(int index) const;
  ::bedrock::proxy::BedRockKvMDeleteParam* _internal_add_params();
  public:
  const ::bedrock::proxy::BedRockKvMDeleteParam& params(int index) const;
  ::bedrock::proxy::BedRockKvMDeleteParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam >&
      params() const;

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam > params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMDeleteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMDeleteResponse) */ {
 public:
  inline BedRockKvMDeleteResponse() : BedRockKvMDeleteResponse(nullptr) {};
  virtual ~BedRockKvMDeleteResponse();

  BedRockKvMDeleteResponse(const BedRockKvMDeleteResponse& from);
  BedRockKvMDeleteResponse(BedRockKvMDeleteResponse&& from) noexcept
    : BedRockKvMDeleteResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvMDeleteResponse& operator=(const BedRockKvMDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMDeleteResponse& operator=(BedRockKvMDeleteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvMDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvMDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMDeleteResponse*>(
               &_BedRockKvMDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BedRockKvMDeleteResponse& a, BedRockKvMDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMDeleteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvMDeleteResponse* New() const final {
    return CreateMaybeMessage<BedRockKvMDeleteResponse>(nullptr);
  }

  BedRockKvMDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvMDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvMDeleteResponse& from);
  void MergeFrom(const BedRockKvMDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMDeleteResponse";
  }
  protected:
  explicit BedRockKvMDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockStartScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockStartScanRequest) */ {
 public:
  inline BedRockStartScanRequest() : BedRockStartScanRequest(nullptr) {};
  virtual ~BedRockStartScanRequest();

  BedRockStartScanRequest(const BedRockStartScanRequest& from);
  BedRockStartScanRequest(BedRockStartScanRequest&& from) noexcept
    : BedRockStartScanRequest() {
    *this = ::std::move(from);
  }

  inline BedRockStartScanRequest& operator=(const BedRockStartScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockStartScanRequest& operator=(BedRockStartScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockStartScanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockStartScanRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockStartScanRequest*>(
               &_BedRockStartScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BedRockStartScanRequest& a, BedRockStartScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockStartScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockStartScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockStartScanRequest* New() const final {
    return CreateMaybeMessage<BedRockStartScanRequest>(nullptr);
  }

  BedRockStartScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockStartScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockStartScanRequest& from);
  void MergeFrom(const BedRockStartScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockStartScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockStartScanRequest";
  }
  protected:
  explicit BedRockStartScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 2,
    kEndKeyFieldNumber = 3,
    kStorageIdFieldNumber = 1,
    kLimitFieldNumber = 4,
  };
  // bytes start_key = 2;
  void clear_start_key();
  const std::string& start_key() const;
  void set_start_key(const std::string& value);
  void set_start_key(std::string&& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  std::string* mutable_start_key();
  std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_key(
      std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // bytes end_key = 3;
  void clear_end_key();
  const std::string& end_key() const;
  void set_end_key(const std::string& value);
  void set_end_key(std::string&& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  std::string* mutable_end_key();
  std::string* release_end_key();
  void set_allocated_end_key(std::string* end_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end_key(
      std::string* end_key);
  private:
  const std::string& _internal_end_key() const;
  void _internal_set_end_key(const std::string& value);
  std::string* _internal_mutable_end_key();
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 limit = 4;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockStartScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockStartScanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockStartScanResponse) */ {
 public:
  inline BedRockStartScanResponse() : BedRockStartScanResponse(nullptr) {};
  virtual ~BedRockStartScanResponse();

  BedRockStartScanResponse(const BedRockStartScanResponse& from);
  BedRockStartScanResponse(BedRockStartScanResponse&& from) noexcept
    : BedRockStartScanResponse() {
    *this = ::std::move(from);
  }

  inline BedRockStartScanResponse& operator=(const BedRockStartScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockStartScanResponse& operator=(BedRockStartScanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockStartScanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockStartScanResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockStartScanResponse*>(
               &_BedRockStartScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BedRockStartScanResponse& a, BedRockStartScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockStartScanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockStartScanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockStartScanResponse* New() const final {
    return CreateMaybeMessage<BedRockStartScanResponse>(nullptr);
  }

  BedRockStartScanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockStartScanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockStartScanResponse& from);
  void MergeFrom(const BedRockStartScanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockStartScanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockStartScanResponse";
  }
  protected:
  explicit BedRockStartScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIteratorIdFieldNumber = 1,
    kErrFieldNumber = 255,
  };
  // uint64 iterator_id = 1;
  void clear_iterator_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 iterator_id() const;
  void set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iterator_id() const;
  void _internal_set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockStartScanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iterator_id_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockStopScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockStopScanRequest) */ {
 public:
  inline BedRockStopScanRequest() : BedRockStopScanRequest(nullptr) {};
  virtual ~BedRockStopScanRequest();

  BedRockStopScanRequest(const BedRockStopScanRequest& from);
  BedRockStopScanRequest(BedRockStopScanRequest&& from) noexcept
    : BedRockStopScanRequest() {
    *this = ::std::move(from);
  }

  inline BedRockStopScanRequest& operator=(const BedRockStopScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockStopScanRequest& operator=(BedRockStopScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockStopScanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockStopScanRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockStopScanRequest*>(
               &_BedRockStopScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(BedRockStopScanRequest& a, BedRockStopScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockStopScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockStopScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockStopScanRequest* New() const final {
    return CreateMaybeMessage<BedRockStopScanRequest>(nullptr);
  }

  BedRockStopScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockStopScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockStopScanRequest& from);
  void MergeFrom(const BedRockStopScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockStopScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockStopScanRequest";
  }
  protected:
  explicit BedRockStopScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIteratorIdFieldNumber = 1,
  };
  // uint64 iterator_id = 1;
  void clear_iterator_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 iterator_id() const;
  void set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iterator_id() const;
  void _internal_set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockStopScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iterator_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockStopScanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockStopScanResponse) */ {
 public:
  inline BedRockStopScanResponse() : BedRockStopScanResponse(nullptr) {};
  virtual ~BedRockStopScanResponse();

  BedRockStopScanResponse(const BedRockStopScanResponse& from);
  BedRockStopScanResponse(BedRockStopScanResponse&& from) noexcept
    : BedRockStopScanResponse() {
    *this = ::std::move(from);
  }

  inline BedRockStopScanResponse& operator=(const BedRockStopScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockStopScanResponse& operator=(BedRockStopScanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockStopScanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockStopScanResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockStopScanResponse*>(
               &_BedRockStopScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BedRockStopScanResponse& a, BedRockStopScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockStopScanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockStopScanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockStopScanResponse* New() const final {
    return CreateMaybeMessage<BedRockStopScanResponse>(nullptr);
  }

  BedRockStopScanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockStopScanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockStopScanResponse& from);
  void MergeFrom(const BedRockStopScanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockStopScanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockStopScanResponse";
  }
  protected:
  explicit BedRockStopScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockStopScanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockDoScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockDoScanRequest) */ {
 public:
  inline BedRockDoScanRequest() : BedRockDoScanRequest(nullptr) {};
  virtual ~BedRockDoScanRequest();

  BedRockDoScanRequest(const BedRockDoScanRequest& from);
  BedRockDoScanRequest(BedRockDoScanRequest&& from) noexcept
    : BedRockDoScanRequest() {
    *this = ::std::move(from);
  }

  inline BedRockDoScanRequest& operator=(const BedRockDoScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockDoScanRequest& operator=(BedRockDoScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockDoScanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockDoScanRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockDoScanRequest*>(
               &_BedRockDoScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BedRockDoScanRequest& a, BedRockDoScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockDoScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockDoScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockDoScanRequest* New() const final {
    return CreateMaybeMessage<BedRockDoScanRequest>(nullptr);
  }

  BedRockDoScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockDoScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockDoScanRequest& from);
  void MergeFrom(const BedRockDoScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockDoScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockDoScanRequest";
  }
  protected:
  explicit BedRockDoScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIteratorIdFieldNumber = 1,
  };
  // uint64 iterator_id = 1;
  void clear_iterator_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 iterator_id() const;
  void set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_iterator_id() const;
  void _internal_set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockDoScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 iterator_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvPair) */ {
 public:
  inline BedRockKvPair() : BedRockKvPair(nullptr) {};
  virtual ~BedRockKvPair();

  BedRockKvPair(const BedRockKvPair& from);
  BedRockKvPair(BedRockKvPair&& from) noexcept
    : BedRockKvPair() {
    *this = ::std::move(from);
  }

  inline BedRockKvPair& operator=(const BedRockKvPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvPair& operator=(BedRockKvPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockKvPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockKvPair* internal_default_instance() {
    return reinterpret_cast<const BedRockKvPair*>(
               &_BedRockKvPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BedRockKvPair& a, BedRockKvPair& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockKvPair* New() const final {
    return CreateMaybeMessage<BedRockKvPair>(nullptr);
  }

  BedRockKvPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockKvPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockKvPair& from);
  void MergeFrom(const BedRockKvPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvPair";
  }
  protected:
  explicit BedRockKvPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockDoScanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockDoScanResponse) */ {
 public:
  inline BedRockDoScanResponse() : BedRockDoScanResponse(nullptr) {};
  virtual ~BedRockDoScanResponse();

  BedRockDoScanResponse(const BedRockDoScanResponse& from);
  BedRockDoScanResponse(BedRockDoScanResponse&& from) noexcept
    : BedRockDoScanResponse() {
    *this = ::std::move(from);
  }

  inline BedRockDoScanResponse& operator=(const BedRockDoScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockDoScanResponse& operator=(BedRockDoScanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockDoScanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockDoScanResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockDoScanResponse*>(
               &_BedRockDoScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BedRockDoScanResponse& a, BedRockDoScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockDoScanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockDoScanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockDoScanResponse* New() const final {
    return CreateMaybeMessage<BedRockDoScanResponse>(nullptr);
  }

  BedRockDoScanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockDoScanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockDoScanResponse& from);
  void MergeFrom(const BedRockDoScanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockDoScanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockDoScanResponse";
  }
  protected:
  explicit BedRockDoScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 1,
    kNoLeftFieldNumber = 2,
    kErrFieldNumber = 255,
  };
  // repeated .bedrock.proxy.BedRockKvPair kvs = 1;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::bedrock::proxy::BedRockKvPair* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvPair >*
      mutable_kvs();
  private:
  const ::bedrock::proxy::BedRockKvPair& _internal_kvs(int index) const;
  ::bedrock::proxy::BedRockKvPair* _internal_add_kvs();
  public:
  const ::bedrock::proxy::BedRockKvPair& kvs(int index) const;
  ::bedrock::proxy::BedRockKvPair* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvPair >&
      kvs() const;

  // bool no_left = 2;
  void clear_no_left();
  bool no_left() const;
  void set_no_left(bool value);
  private:
  bool _internal_no_left() const;
  void _internal_set_no_left(bool value);
  public:

  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockDoScanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvPair > kvs_;
  bool no_left_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockTxRecordLock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockTxRecordLock) */ {
 public:
  inline BedRockTxRecordLock() : BedRockTxRecordLock(nullptr) {};
  virtual ~BedRockTxRecordLock();

  BedRockTxRecordLock(const BedRockTxRecordLock& from);
  BedRockTxRecordLock(BedRockTxRecordLock&& from) noexcept
    : BedRockTxRecordLock() {
    *this = ::std::move(from);
  }

  inline BedRockTxRecordLock& operator=(const BedRockTxRecordLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockTxRecordLock& operator=(BedRockTxRecordLock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockTxRecordLock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockTxRecordLock* internal_default_instance() {
    return reinterpret_cast<const BedRockTxRecordLock*>(
               &_BedRockTxRecordLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BedRockTxRecordLock& a, BedRockTxRecordLock& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockTxRecordLock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockTxRecordLock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockTxRecordLock* New() const final {
    return CreateMaybeMessage<BedRockTxRecordLock>(nullptr);
  }

  BedRockTxRecordLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockTxRecordLock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockTxRecordLock& from);
  void MergeFrom(const BedRockTxRecordLock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockTxRecordLock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockTxRecordLock";
  }
  protected:
  explicit BedRockTxRecordLock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kLockTypeFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  void clear_lock_type();
  ::bedrock::proxy::BedRockTxLockType lock_type() const;
  void set_lock_type(::bedrock::proxy::BedRockTxLockType value);
  private:
  ::bedrock::proxy::BedRockTxLockType _internal_lock_type() const;
  void _internal_set_lock_type(::bedrock::proxy::BedRockTxLockType value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockTxRecordLock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int lock_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockTxRangeLock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockTxRangeLock) */ {
 public:
  inline BedRockTxRangeLock() : BedRockTxRangeLock(nullptr) {};
  virtual ~BedRockTxRangeLock();

  BedRockTxRangeLock(const BedRockTxRangeLock& from);
  BedRockTxRangeLock(BedRockTxRangeLock&& from) noexcept
    : BedRockTxRangeLock() {
    *this = ::std::move(from);
  }

  inline BedRockTxRangeLock& operator=(const BedRockTxRangeLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockTxRangeLock& operator=(BedRockTxRangeLock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockTxRangeLock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockTxRangeLock* internal_default_instance() {
    return reinterpret_cast<const BedRockTxRangeLock*>(
               &_BedRockTxRangeLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BedRockTxRangeLock& a, BedRockTxRangeLock& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockTxRangeLock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockTxRangeLock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockTxRangeLock* New() const final {
    return CreateMaybeMessage<BedRockTxRangeLock>(nullptr);
  }

  BedRockTxRangeLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockTxRangeLock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockTxRangeLock& from);
  void MergeFrom(const BedRockTxRangeLock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockTxRangeLock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockTxRangeLock";
  }
  protected:
  explicit BedRockTxRangeLock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 2,
    kEndKeyFieldNumber = 3,
    kLockTypeFieldNumber = 1,
  };
  // bytes start_key = 2;
  void clear_start_key();
  const std::string& start_key() const;
  void set_start_key(const std::string& value);
  void set_start_key(std::string&& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  std::string* mutable_start_key();
  std::string* release_start_key();
  void set_allocated_start_key(std::string* start_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_key(
      std::string* start_key);
  private:
  const std::string& _internal_start_key() const;
  void _internal_set_start_key(const std::string& value);
  std::string* _internal_mutable_start_key();
  public:

  // bytes end_key = 3;
  void clear_end_key();
  const std::string& end_key() const;
  void set_end_key(const std::string& value);
  void set_end_key(std::string&& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  std::string* mutable_end_key();
  std::string* release_end_key();
  void set_allocated_end_key(std::string* end_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end_key(
      std::string* end_key);
  private:
  const std::string& _internal_end_key() const;
  void _internal_set_end_key(const std::string& value);
  std::string* _internal_mutable_end_key();
  public:

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  void clear_lock_type();
  ::bedrock::proxy::BedRockTxLockType lock_type() const;
  void set_lock_type(::bedrock::proxy::BedRockTxLockType value);
  private:
  ::bedrock::proxy::BedRockTxLockType _internal_lock_type() const;
  void _internal_set_lock_type(::bedrock::proxy::BedRockTxLockType value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockTxRangeLock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_key_;
  int lock_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockStartTxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockStartTxRequest) */ {
 public:
  inline BedRockStartTxRequest() : BedRockStartTxRequest(nullptr) {};
  virtual ~BedRockStartTxRequest();

  BedRockStartTxRequest(const BedRockStartTxRequest& from);
  BedRockStartTxRequest(BedRockStartTxRequest&& from) noexcept
    : BedRockStartTxRequest() {
    *this = ::std::move(from);
  }

  inline BedRockStartTxRequest& operator=(const BedRockStartTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockStartTxRequest& operator=(BedRockStartTxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockStartTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockStartTxRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockStartTxRequest*>(
               &_BedRockStartTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BedRockStartTxRequest& a, BedRockStartTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockStartTxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockStartTxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockStartTxRequest* New() const final {
    return CreateMaybeMessage<BedRockStartTxRequest>(nullptr);
  }

  BedRockStartTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockStartTxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockStartTxRequest& from);
  void MergeFrom(const BedRockStartTxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockStartTxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockStartTxRequest";
  }
  protected:
  explicit BedRockStartTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordLocksFieldNumber = 2,
    kRangeLocksFieldNumber = 3,
    kStorageIdFieldNumber = 1,
  };
  // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 2;
  int record_locks_size() const;
  private:
  int _internal_record_locks_size() const;
  public:
  void clear_record_locks();
  ::bedrock::proxy::BedRockTxRecordLock* mutable_record_locks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRecordLock >*
      mutable_record_locks();
  private:
  const ::bedrock::proxy::BedRockTxRecordLock& _internal_record_locks(int index) const;
  ::bedrock::proxy::BedRockTxRecordLock* _internal_add_record_locks();
  public:
  const ::bedrock::proxy::BedRockTxRecordLock& record_locks(int index) const;
  ::bedrock::proxy::BedRockTxRecordLock* add_record_locks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRecordLock >&
      record_locks() const;

  // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 3;
  int range_locks_size() const;
  private:
  int _internal_range_locks_size() const;
  public:
  void clear_range_locks();
  ::bedrock::proxy::BedRockTxRangeLock* mutable_range_locks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRangeLock >*
      mutable_range_locks();
  private:
  const ::bedrock::proxy::BedRockTxRangeLock& _internal_range_locks(int index) const;
  ::bedrock::proxy::BedRockTxRangeLock* _internal_add_range_locks();
  public:
  const ::bedrock::proxy::BedRockTxRangeLock& range_locks(int index) const;
  ::bedrock::proxy::BedRockTxRangeLock* add_range_locks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRangeLock >&
      range_locks() const;

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockStartTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRecordLock > record_locks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRangeLock > range_locks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockStartTxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockStartTxResponse) */ {
 public:
  inline BedRockStartTxResponse() : BedRockStartTxResponse(nullptr) {};
  virtual ~BedRockStartTxResponse();

  BedRockStartTxResponse(const BedRockStartTxResponse& from);
  BedRockStartTxResponse(BedRockStartTxResponse&& from) noexcept
    : BedRockStartTxResponse() {
    *this = ::std::move(from);
  }

  inline BedRockStartTxResponse& operator=(const BedRockStartTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockStartTxResponse& operator=(BedRockStartTxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockStartTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockStartTxResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockStartTxResponse*>(
               &_BedRockStartTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BedRockStartTxResponse& a, BedRockStartTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockStartTxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockStartTxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockStartTxResponse* New() const final {
    return CreateMaybeMessage<BedRockStartTxResponse>(nullptr);
  }

  BedRockStartTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockStartTxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockStartTxResponse& from);
  void MergeFrom(const BedRockStartTxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockStartTxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockStartTxResponse";
  }
  protected:
  explicit BedRockStartTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIdFieldNumber = 1,
    kErrFieldNumber = 255,
  };
  // uint64 tx_id = 1;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockStartTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockCommitTxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockCommitTxRequest) */ {
 public:
  inline BedRockCommitTxRequest() : BedRockCommitTxRequest(nullptr) {};
  virtual ~BedRockCommitTxRequest();

  BedRockCommitTxRequest(const BedRockCommitTxRequest& from);
  BedRockCommitTxRequest(BedRockCommitTxRequest&& from) noexcept
    : BedRockCommitTxRequest() {
    *this = ::std::move(from);
  }

  inline BedRockCommitTxRequest& operator=(const BedRockCommitTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockCommitTxRequest& operator=(BedRockCommitTxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockCommitTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockCommitTxRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockCommitTxRequest*>(
               &_BedRockCommitTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(BedRockCommitTxRequest& a, BedRockCommitTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockCommitTxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockCommitTxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockCommitTxRequest* New() const final {
    return CreateMaybeMessage<BedRockCommitTxRequest>(nullptr);
  }

  BedRockCommitTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockCommitTxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockCommitTxRequest& from);
  void MergeFrom(const BedRockCommitTxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockCommitTxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockCommitTxRequest";
  }
  protected:
  explicit BedRockCommitTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIdFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // uint64 tx_id = 2;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockCommitTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockCommitTxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockCommitTxResponse) */ {
 public:
  inline BedRockCommitTxResponse() : BedRockCommitTxResponse(nullptr) {};
  virtual ~BedRockCommitTxResponse();

  BedRockCommitTxResponse(const BedRockCommitTxResponse& from);
  BedRockCommitTxResponse(BedRockCommitTxResponse&& from) noexcept
    : BedRockCommitTxResponse() {
    *this = ::std::move(from);
  }

  inline BedRockCommitTxResponse& operator=(const BedRockCommitTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockCommitTxResponse& operator=(BedRockCommitTxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockCommitTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockCommitTxResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockCommitTxResponse*>(
               &_BedRockCommitTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BedRockCommitTxResponse& a, BedRockCommitTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockCommitTxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockCommitTxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockCommitTxResponse* New() const final {
    return CreateMaybeMessage<BedRockCommitTxResponse>(nullptr);
  }

  BedRockCommitTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockCommitTxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockCommitTxResponse& from);
  void MergeFrom(const BedRockCommitTxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockCommitTxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockCommitTxResponse";
  }
  protected:
  explicit BedRockCommitTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockCommitTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockRollbackTxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockRollbackTxRequest) */ {
 public:
  inline BedRockRollbackTxRequest() : BedRockRollbackTxRequest(nullptr) {};
  virtual ~BedRockRollbackTxRequest();

  BedRockRollbackTxRequest(const BedRockRollbackTxRequest& from);
  BedRockRollbackTxRequest(BedRockRollbackTxRequest&& from) noexcept
    : BedRockRollbackTxRequest() {
    *this = ::std::move(from);
  }

  inline BedRockRollbackTxRequest& operator=(const BedRockRollbackTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockRollbackTxRequest& operator=(BedRockRollbackTxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockRollbackTxRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockRollbackTxRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockRollbackTxRequest*>(
               &_BedRockRollbackTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(BedRockRollbackTxRequest& a, BedRockRollbackTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockRollbackTxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockRollbackTxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockRollbackTxRequest* New() const final {
    return CreateMaybeMessage<BedRockRollbackTxRequest>(nullptr);
  }

  BedRockRollbackTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockRollbackTxRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockRollbackTxRequest& from);
  void MergeFrom(const BedRockRollbackTxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockRollbackTxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockRollbackTxRequest";
  }
  protected:
  explicit BedRockRollbackTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIdFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // uint64 tx_id = 2;
  void clear_tx_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id() const;
  void set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_id() const;
  void _internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id() const;
  void set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_id() const;
  void _internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockRollbackTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockRollbackTxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockRollbackTxResponse) */ {
 public:
  inline BedRockRollbackTxResponse() : BedRockRollbackTxResponse(nullptr) {};
  virtual ~BedRockRollbackTxResponse();

  BedRockRollbackTxResponse(const BedRockRollbackTxResponse& from);
  BedRockRollbackTxResponse(BedRockRollbackTxResponse&& from) noexcept
    : BedRockRollbackTxResponse() {
    *this = ::std::move(from);
  }

  inline BedRockRollbackTxResponse& operator=(const BedRockRollbackTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockRollbackTxResponse& operator=(BedRockRollbackTxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedRockRollbackTxResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRockRollbackTxResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockRollbackTxResponse*>(
               &_BedRockRollbackTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(BedRockRollbackTxResponse& a, BedRockRollbackTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockRollbackTxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockRollbackTxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedRockRollbackTxResponse* New() const final {
    return CreateMaybeMessage<BedRockRollbackTxResponse>(nullptr);
  }

  BedRockRollbackTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedRockRollbackTxResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedRockRollbackTxResponse& from);
  void MergeFrom(const BedRockRollbackTxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockRollbackTxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockRollbackTxResponse";
  }
  protected:
  explicit BedRockRollbackTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proxy_2eproto);
    return ::descriptor_table_proxy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockRollbackTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proxy_2eproto;
};
// ===================================================================

class ProxyService_Stub;

class ProxyService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ProxyService() {};
 public:
  virtual ~ProxyService();

  typedef ProxyService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void BedRockKvSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvSetRequest* request,
                       ::bedrock::proxy::BedRockKvSetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvGetRequest* request,
                       ::bedrock::proxy::BedRockKvGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvDeleteRequest* request,
                       ::bedrock::proxy::BedRockKvDeleteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvMSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMSetRequest* request,
                       ::bedrock::proxy::BedRockKvMSetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvMGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMGetRequest* request,
                       ::bedrock::proxy::BedRockKvMGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvMDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMDeleteRequest* request,
                       ::bedrock::proxy::BedRockKvMDeleteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockStartScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockStartScanRequest* request,
                       ::bedrock::proxy::BedRockStartScanResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockStopScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockStopScanRequest* request,
                       ::bedrock::proxy::BedRockStopScanResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockDoScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockDoScanRequest* request,
                       ::bedrock::proxy::BedRockDoScanResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockStartTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockStartTxRequest* request,
                       ::bedrock::proxy::BedRockStartTxResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockCommitTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockCommitTxRequest* request,
                       ::bedrock::proxy::BedRockCommitTxResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockRollbackTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockRollbackTxRequest* request,
                       ::bedrock::proxy::BedRockRollbackTxResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ProxyService);
};

class ProxyService_Stub : public ProxyService {
 public:
  ProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ProxyService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ProxyService ------------------------------------------

  void BedRockKvSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvSetRequest* request,
                       ::bedrock::proxy::BedRockKvSetResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvGetRequest* request,
                       ::bedrock::proxy::BedRockKvGetResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvDeleteRequest* request,
                       ::bedrock::proxy::BedRockKvDeleteResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvMSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMSetRequest* request,
                       ::bedrock::proxy::BedRockKvMSetResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvMGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMGetRequest* request,
                       ::bedrock::proxy::BedRockKvMGetResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvMDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMDeleteRequest* request,
                       ::bedrock::proxy::BedRockKvMDeleteResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockStartScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockStartScanRequest* request,
                       ::bedrock::proxy::BedRockStartScanResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockStopScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockStopScanRequest* request,
                       ::bedrock::proxy::BedRockStopScanResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockDoScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockDoScanRequest* request,
                       ::bedrock::proxy::BedRockDoScanResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockStartTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockStartTxRequest* request,
                       ::bedrock::proxy::BedRockStartTxResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockCommitTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockCommitTxRequest* request,
                       ::bedrock::proxy::BedRockCommitTxResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockRollbackTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockRollbackTxRequest* request,
                       ::bedrock::proxy::BedRockRollbackTxResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ProxyService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxRecord

// uint64 tx_id = 1;
inline void TxRecord::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxRecord::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxRecord::tx_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.TxRecord.tx_id)
  return _internal_tx_id();
}
inline void TxRecord::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void TxRecord::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.TxRecord.tx_id)
}

// .bedrock.proxy.TxStatus status = 2;
inline void TxRecord::clear_status() {
  status_ = 0;
}
inline ::bedrock::proxy::TxStatus TxRecord::_internal_status() const {
  return static_cast< ::bedrock::proxy::TxStatus >(status_);
}
inline ::bedrock::proxy::TxStatus TxRecord::status() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.TxRecord.status)
  return _internal_status();
}
inline void TxRecord::_internal_set_status(::bedrock::proxy::TxStatus value) {
  
  status_ = value;
}
inline void TxRecord::set_status(::bedrock::proxy::TxStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.TxRecord.status)
}

// uint64 heartbeat_ts = 3;
inline void TxRecord::clear_heartbeat_ts() {
  heartbeat_ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxRecord::_internal_heartbeat_ts() const {
  return heartbeat_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxRecord::heartbeat_ts() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.TxRecord.heartbeat_ts)
  return _internal_heartbeat_ts();
}
inline void TxRecord::_internal_set_heartbeat_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  heartbeat_ts_ = value;
}
inline void TxRecord::set_heartbeat_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_heartbeat_ts(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.TxRecord.heartbeat_ts)
}

// -------------------------------------------------------------------

// BedRockKvGetRequest

// uint32 storage_id = 1;
inline void BedRockKvGetRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvGetRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvGetRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvGetRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvGetRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockKvGetRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvGetRequest.storage_id)
}

// bytes key = 2;
inline void BedRockKvGetRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvGetRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvGetRequest.key)
  return _internal_key();
}
inline void BedRockKvGetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvGetRequest.key)
}
inline std::string* BedRockKvGetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvGetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockKvGetRequest::_internal_key() const {
  return key_.Get();
}
inline void BedRockKvGetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvGetRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvGetRequest.key)
}
inline void BedRockKvGetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvGetRequest.key)
}
inline void BedRockKvGetRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvGetRequest.key)
}
inline std::string* BedRockKvGetRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvGetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvGetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvGetRequest.key)
}
inline std::string* BedRockKvGetRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvGetRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvGetRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvGetRequest.key)
}

// -------------------------------------------------------------------

// BedRockKvGetResponse

// bytes value = 1;
inline void BedRockKvGetResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvGetResponse::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvGetResponse.value)
  return _internal_value();
}
inline void BedRockKvGetResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvGetResponse.value)
}
inline std::string* BedRockKvGetResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvGetResponse.value)
  return _internal_mutable_value();
}
inline const std::string& BedRockKvGetResponse::_internal_value() const {
  return value_.Get();
}
inline void BedRockKvGetResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvGetResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvGetResponse.value)
}
inline void BedRockKvGetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvGetResponse.value)
}
inline void BedRockKvGetResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvGetResponse.value)
}
inline std::string* BedRockKvGetResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvGetResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvGetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvGetResponse.value)
}
inline std::string* BedRockKvGetResponse::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvGetResponse.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvGetResponse::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvGetResponse.value)
}

// .bedrock.proxy.Error err = 255;
inline void BedRockKvGetResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvGetResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockKvGetResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvGetResponse.err)
  return _internal_err();
}
inline void BedRockKvGetResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockKvGetResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvGetResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvSetRequest

// uint32 storage_id = 1;
inline void BedRockKvSetRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvSetRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvSetRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvSetRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvSetRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockKvSetRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvSetRequest.storage_id)
}

// bytes key = 2;
inline void BedRockKvSetRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvSetRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvSetRequest.key)
  return _internal_key();
}
inline void BedRockKvSetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvSetRequest.key)
}
inline std::string* BedRockKvSetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvSetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockKvSetRequest::_internal_key() const {
  return key_.Get();
}
inline void BedRockKvSetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvSetRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvSetRequest.key)
}
inline void BedRockKvSetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvSetRequest.key)
}
inline void BedRockKvSetRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvSetRequest.key)
}
inline std::string* BedRockKvSetRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvSetRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvSetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvSetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvSetRequest.key)
}
inline std::string* BedRockKvSetRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvSetRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvSetRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvSetRequest.key)
}

// bytes value = 3;
inline void BedRockKvSetRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvSetRequest::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvSetRequest.value)
  return _internal_value();
}
inline void BedRockKvSetRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvSetRequest.value)
}
inline std::string* BedRockKvSetRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvSetRequest.value)
  return _internal_mutable_value();
}
inline const std::string& BedRockKvSetRequest::_internal_value() const {
  return value_.Get();
}
inline void BedRockKvSetRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvSetRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvSetRequest.value)
}
inline void BedRockKvSetRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvSetRequest.value)
}
inline void BedRockKvSetRequest::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvSetRequest.value)
}
inline std::string* BedRockKvSetRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvSetRequest::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvSetRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvSetRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvSetRequest.value)
}
inline std::string* BedRockKvSetRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvSetRequest.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvSetRequest::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvSetRequest.value)
}

// -------------------------------------------------------------------

// BedRockKvSetResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockKvSetResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvSetResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockKvSetResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvSetResponse.err)
  return _internal_err();
}
inline void BedRockKvSetResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockKvSetResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvSetResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvDeleteRequest

// uint32 storage_id = 1;
inline void BedRockKvDeleteRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvDeleteRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvDeleteRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvDeleteRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvDeleteRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockKvDeleteRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvDeleteRequest.storage_id)
}

// bytes key = 2;
inline void BedRockKvDeleteRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvDeleteRequest.key)
  return _internal_key();
}
inline void BedRockKvDeleteRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvDeleteRequest.key)
}
inline std::string* BedRockKvDeleteRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvDeleteRequest.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockKvDeleteRequest::_internal_key() const {
  return key_.Get();
}
inline void BedRockKvDeleteRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvDeleteRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvDeleteRequest.key)
}
inline void BedRockKvDeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvDeleteRequest.key)
}
inline void BedRockKvDeleteRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvDeleteRequest.key)
}
inline std::string* BedRockKvDeleteRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvDeleteRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvDeleteRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvDeleteRequest.key)
}
inline std::string* BedRockKvDeleteRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvDeleteRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvDeleteRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvDeleteRequest.key)
}

// -------------------------------------------------------------------

// BedRockKvDeleteResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockKvDeleteResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvDeleteResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockKvDeleteResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvDeleteResponse.err)
  return _internal_err();
}
inline void BedRockKvDeleteResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockKvDeleteResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvDeleteResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvMSetParam

// bytes key = 1;
inline void BedRockKvMSetParam::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvMSetParam::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetParam.key)
  return _internal_key();
}
inline void BedRockKvMSetParam::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMSetParam.key)
}
inline std::string* BedRockKvMSetParam::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMSetParam.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockKvMSetParam::_internal_key() const {
  return key_.Get();
}
inline void BedRockKvMSetParam::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvMSetParam::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvMSetParam.key)
}
inline void BedRockKvMSetParam::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvMSetParam.key)
}
inline void BedRockKvMSetParam::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvMSetParam.key)
}
inline std::string* BedRockKvMSetParam::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvMSetParam::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMSetParam.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvMSetParam::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMSetParam.key)
}
inline std::string* BedRockKvMSetParam::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvMSetParam.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvMSetParam::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvMSetParam.key)
}

// bytes value = 2;
inline void BedRockKvMSetParam::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvMSetParam::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetParam.value)
  return _internal_value();
}
inline void BedRockKvMSetParam::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMSetParam.value)
}
inline std::string* BedRockKvMSetParam::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMSetParam.value)
  return _internal_mutable_value();
}
inline const std::string& BedRockKvMSetParam::_internal_value() const {
  return value_.Get();
}
inline void BedRockKvMSetParam::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvMSetParam::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvMSetParam.value)
}
inline void BedRockKvMSetParam::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvMSetParam.value)
}
inline void BedRockKvMSetParam::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvMSetParam.value)
}
inline std::string* BedRockKvMSetParam::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvMSetParam::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMSetParam.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvMSetParam::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMSetParam.value)
}
inline std::string* BedRockKvMSetParam::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvMSetParam.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvMSetParam::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvMSetParam.value)
}

// -------------------------------------------------------------------

// BedRockKvMSetRequest

// uint32 storage_id = 1;
inline void BedRockKvMSetRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvMSetRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvMSetRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvMSetRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockKvMSetRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMSetRequest.storage_id)
}

// repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
inline int BedRockKvMSetRequest::_internal_params_size() const {
  return params_.size();
}
inline int BedRockKvMSetRequest::params_size() const {
  return _internal_params_size();
}
inline void BedRockKvMSetRequest::clear_params() {
  params_.Clear();
}
inline ::bedrock::proxy::BedRockKvMSetParam* BedRockKvMSetRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMSetRequest.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam >*
BedRockKvMSetRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockKvMSetRequest.params)
  return &params_;
}
inline const ::bedrock::proxy::BedRockKvMSetParam& BedRockKvMSetRequest::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvMSetParam& BedRockKvMSetRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetRequest.params)
  return _internal_params(index);
}
inline ::bedrock::proxy::BedRockKvMSetParam* BedRockKvMSetRequest::_internal_add_params() {
  return params_.Add();
}
inline ::bedrock::proxy::BedRockKvMSetParam* BedRockKvMSetRequest::add_params() {
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockKvMSetRequest.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam >&
BedRockKvMSetRequest::params() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockKvMSetRequest.params)
  return params_;
}

// -------------------------------------------------------------------

// BedRockKvMSetResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockKvMSetResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvMSetResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockKvMSetResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetResponse.err)
  return _internal_err();
}
inline void BedRockKvMSetResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockKvMSetResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMSetResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvMGetParam

// bytes key = 1;
inline void BedRockKvMGetParam::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvMGetParam::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetParam.key)
  return _internal_key();
}
inline void BedRockKvMGetParam::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetParam.key)
}
inline std::string* BedRockKvMGetParam::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetParam.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockKvMGetParam::_internal_key() const {
  return key_.Get();
}
inline void BedRockKvMGetParam::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvMGetParam::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvMGetParam.key)
}
inline void BedRockKvMGetParam::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvMGetParam.key)
}
inline void BedRockKvMGetParam::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvMGetParam.key)
}
inline std::string* BedRockKvMGetParam::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvMGetParam::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMGetParam.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvMGetParam::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMGetParam.key)
}
inline std::string* BedRockKvMGetParam::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvMGetParam.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvMGetParam::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvMGetParam.key)
}

// -------------------------------------------------------------------

// BedRockKvMGetRequest

// uint32 storage_id = 1;
inline void BedRockKvMGetRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvMGetRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvMGetRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvMGetRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockKvMGetRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetRequest.storage_id)
}

// repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
inline int BedRockKvMGetRequest::_internal_params_size() const {
  return params_.size();
}
inline int BedRockKvMGetRequest::params_size() const {
  return _internal_params_size();
}
inline void BedRockKvMGetRequest::clear_params() {
  params_.Clear();
}
inline ::bedrock::proxy::BedRockKvMGetParam* BedRockKvMGetRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetRequest.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam >*
BedRockKvMGetRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockKvMGetRequest.params)
  return &params_;
}
inline const ::bedrock::proxy::BedRockKvMGetParam& BedRockKvMGetRequest::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvMGetParam& BedRockKvMGetRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetRequest.params)
  return _internal_params(index);
}
inline ::bedrock::proxy::BedRockKvMGetParam* BedRockKvMGetRequest::_internal_add_params() {
  return params_.Add();
}
inline ::bedrock::proxy::BedRockKvMGetParam* BedRockKvMGetRequest::add_params() {
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockKvMGetRequest.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam >&
BedRockKvMGetRequest::params() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockKvMGetRequest.params)
  return params_;
}

// -------------------------------------------------------------------

// BedRockKvMGetKvRetPair

// bytes key = 1;
inline void BedRockKvMGetKvRetPair::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvMGetKvRetPair::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetKvRetPair.key)
  return _internal_key();
}
inline void BedRockKvMGetKvRetPair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetKvRetPair.key)
}
inline std::string* BedRockKvMGetKvRetPair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetKvRetPair.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockKvMGetKvRetPair::_internal_key() const {
  return key_.Get();
}
inline void BedRockKvMGetKvRetPair::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvMGetKvRetPair::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvMGetKvRetPair.key)
}
inline void BedRockKvMGetKvRetPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvMGetKvRetPair.key)
}
inline void BedRockKvMGetKvRetPair::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvMGetKvRetPair.key)
}
inline std::string* BedRockKvMGetKvRetPair::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvMGetKvRetPair::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMGetKvRetPair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvMGetKvRetPair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMGetKvRetPair.key)
}
inline std::string* BedRockKvMGetKvRetPair::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvMGetKvRetPair.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvMGetKvRetPair::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvMGetKvRetPair.key)
}

// bytes value = 2;
inline void BedRockKvMGetKvRetPair::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvMGetKvRetPair::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetKvRetPair.value)
  return _internal_value();
}
inline void BedRockKvMGetKvRetPair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetKvRetPair.value)
}
inline std::string* BedRockKvMGetKvRetPair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetKvRetPair.value)
  return _internal_mutable_value();
}
inline const std::string& BedRockKvMGetKvRetPair::_internal_value() const {
  return value_.Get();
}
inline void BedRockKvMGetKvRetPair::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvMGetKvRetPair::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvMGetKvRetPair.value)
}
inline void BedRockKvMGetKvRetPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvMGetKvRetPair.value)
}
inline void BedRockKvMGetKvRetPair::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvMGetKvRetPair.value)
}
inline std::string* BedRockKvMGetKvRetPair::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvMGetKvRetPair::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMGetKvRetPair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvMGetKvRetPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMGetKvRetPair.value)
}
inline std::string* BedRockKvMGetKvRetPair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvMGetKvRetPair.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvMGetKvRetPair::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvMGetKvRetPair.value)
}

// -------------------------------------------------------------------

// BedRockKvMGetResponse

// repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
inline int BedRockKvMGetResponse::_internal_kvs_size() const {
  return kvs_.size();
}
inline int BedRockKvMGetResponse::kvs_size() const {
  return _internal_kvs_size();
}
inline void BedRockKvMGetResponse::clear_kvs() {
  kvs_.Clear();
}
inline ::bedrock::proxy::BedRockKvMGetKvRetPair* BedRockKvMGetResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair >*
BedRockKvMGetResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return &kvs_;
}
inline const ::bedrock::proxy::BedRockKvMGetKvRetPair& BedRockKvMGetResponse::_internal_kvs(int index) const {
  return kvs_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvMGetKvRetPair& BedRockKvMGetResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return _internal_kvs(index);
}
inline ::bedrock::proxy::BedRockKvMGetKvRetPair* BedRockKvMGetResponse::_internal_add_kvs() {
  return kvs_.Add();
}
inline ::bedrock::proxy::BedRockKvMGetKvRetPair* BedRockKvMGetResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return _internal_add_kvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair >&
BedRockKvMGetResponse::kvs() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return kvs_;
}

// .bedrock.proxy.Error err = 255;
inline void BedRockKvMGetResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvMGetResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockKvMGetResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetResponse.err)
  return _internal_err();
}
inline void BedRockKvMGetResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockKvMGetResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvMDeleteParam

// bytes key = 1;
inline void BedRockKvMDeleteParam::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvMDeleteParam::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMDeleteParam.key)
  return _internal_key();
}
inline void BedRockKvMDeleteParam::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMDeleteParam.key)
}
inline std::string* BedRockKvMDeleteParam::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMDeleteParam.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockKvMDeleteParam::_internal_key() const {
  return key_.Get();
}
inline void BedRockKvMDeleteParam::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvMDeleteParam::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvMDeleteParam.key)
}
inline void BedRockKvMDeleteParam::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvMDeleteParam.key)
}
inline void BedRockKvMDeleteParam::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvMDeleteParam.key)
}
inline std::string* BedRockKvMDeleteParam::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvMDeleteParam::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMDeleteParam.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvMDeleteParam::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMDeleteParam.key)
}
inline std::string* BedRockKvMDeleteParam::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvMDeleteParam.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvMDeleteParam::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvMDeleteParam.key)
}

// -------------------------------------------------------------------

// BedRockKvMDeleteRequest

// uint32 storage_id = 1;
inline void BedRockKvMDeleteRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvMDeleteRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockKvMDeleteRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMDeleteRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvMDeleteRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockKvMDeleteRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMDeleteRequest.storage_id)
}

// repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
inline int BedRockKvMDeleteRequest::_internal_params_size() const {
  return params_.size();
}
inline int BedRockKvMDeleteRequest::params_size() const {
  return _internal_params_size();
}
inline void BedRockKvMDeleteRequest::clear_params() {
  params_.Clear();
}
inline ::bedrock::proxy::BedRockKvMDeleteParam* BedRockKvMDeleteRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam >*
BedRockKvMDeleteRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return &params_;
}
inline const ::bedrock::proxy::BedRockKvMDeleteParam& BedRockKvMDeleteRequest::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvMDeleteParam& BedRockKvMDeleteRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return _internal_params(index);
}
inline ::bedrock::proxy::BedRockKvMDeleteParam* BedRockKvMDeleteRequest::_internal_add_params() {
  return params_.Add();
}
inline ::bedrock::proxy::BedRockKvMDeleteParam* BedRockKvMDeleteRequest::add_params() {
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return _internal_add_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam >&
BedRockKvMDeleteRequest::params() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return params_;
}

// -------------------------------------------------------------------

// BedRockKvMDeleteResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockKvMDeleteResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvMDeleteResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockKvMDeleteResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMDeleteResponse.err)
  return _internal_err();
}
inline void BedRockKvMDeleteResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockKvMDeleteResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMDeleteResponse.err)
}

// -------------------------------------------------------------------

// BedRockStartScanRequest

// uint32 storage_id = 1;
inline void BedRockStartScanRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockStartScanRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockStartScanRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartScanRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockStartScanRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockStartScanRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartScanRequest.storage_id)
}

// bytes start_key = 2;
inline void BedRockStartScanRequest::clear_start_key() {
  start_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockStartScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartScanRequest.start_key)
  return _internal_start_key();
}
inline void BedRockStartScanRequest::set_start_key(const std::string& value) {
  _internal_set_start_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartScanRequest.start_key)
}
inline std::string* BedRockStartScanRequest::mutable_start_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockStartScanRequest.start_key)
  return _internal_mutable_start_key();
}
inline const std::string& BedRockStartScanRequest::_internal_start_key() const {
  return start_key_.Get();
}
inline void BedRockStartScanRequest::_internal_set_start_key(const std::string& value) {
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockStartScanRequest::set_start_key(std::string&& value) {
  
  start_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockStartScanRequest.start_key)
}
inline void BedRockStartScanRequest::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockStartScanRequest.start_key)
}
inline void BedRockStartScanRequest::set_start_key(const void* value,
    size_t size) {
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockStartScanRequest.start_key)
}
inline std::string* BedRockStartScanRequest::_internal_mutable_start_key() {
  
  return start_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockStartScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockStartScanRequest.start_key)
  return start_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockStartScanRequest::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockStartScanRequest.start_key)
}
inline std::string* BedRockStartScanRequest::unsafe_arena_release_start_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockStartScanRequest.start_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockStartScanRequest::unsafe_arena_set_allocated_start_key(
    std::string* start_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockStartScanRequest.start_key)
}

// bytes end_key = 3;
inline void BedRockStartScanRequest::clear_end_key() {
  end_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockStartScanRequest::end_key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartScanRequest.end_key)
  return _internal_end_key();
}
inline void BedRockStartScanRequest::set_end_key(const std::string& value) {
  _internal_set_end_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartScanRequest.end_key)
}
inline std::string* BedRockStartScanRequest::mutable_end_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockStartScanRequest.end_key)
  return _internal_mutable_end_key();
}
inline const std::string& BedRockStartScanRequest::_internal_end_key() const {
  return end_key_.Get();
}
inline void BedRockStartScanRequest::_internal_set_end_key(const std::string& value) {
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockStartScanRequest::set_end_key(std::string&& value) {
  
  end_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockStartScanRequest.end_key)
}
inline void BedRockStartScanRequest::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockStartScanRequest.end_key)
}
inline void BedRockStartScanRequest::set_end_key(const void* value,
    size_t size) {
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockStartScanRequest.end_key)
}
inline std::string* BedRockStartScanRequest::_internal_mutable_end_key() {
  
  return end_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockStartScanRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockStartScanRequest.end_key)
  return end_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockStartScanRequest::set_allocated_end_key(std::string* end_key) {
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockStartScanRequest.end_key)
}
inline std::string* BedRockStartScanRequest::unsafe_arena_release_end_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockStartScanRequest.end_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockStartScanRequest::unsafe_arena_set_allocated_end_key(
    std::string* end_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockStartScanRequest.end_key)
}

// int32 limit = 4;
inline void BedRockStartScanRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BedRockStartScanRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BedRockStartScanRequest::limit() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartScanRequest.limit)
  return _internal_limit();
}
inline void BedRockStartScanRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void BedRockStartScanRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartScanRequest.limit)
}

// -------------------------------------------------------------------

// BedRockStartScanResponse

// uint64 iterator_id = 1;
inline void BedRockStartScanResponse::clear_iterator_id() {
  iterator_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockStartScanResponse::_internal_iterator_id() const {
  return iterator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockStartScanResponse::iterator_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartScanResponse.iterator_id)
  return _internal_iterator_id();
}
inline void BedRockStartScanResponse::_internal_set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iterator_id_ = value;
}
inline void BedRockStartScanResponse::set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iterator_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartScanResponse.iterator_id)
}

// .bedrock.proxy.Error err = 255;
inline void BedRockStartScanResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockStartScanResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockStartScanResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartScanResponse.err)
  return _internal_err();
}
inline void BedRockStartScanResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockStartScanResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartScanResponse.err)
}

// -------------------------------------------------------------------

// BedRockStopScanRequest

// uint64 iterator_id = 1;
inline void BedRockStopScanRequest::clear_iterator_id() {
  iterator_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockStopScanRequest::_internal_iterator_id() const {
  return iterator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockStopScanRequest::iterator_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStopScanRequest.iterator_id)
  return _internal_iterator_id();
}
inline void BedRockStopScanRequest::_internal_set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iterator_id_ = value;
}
inline void BedRockStopScanRequest::set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iterator_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStopScanRequest.iterator_id)
}

// -------------------------------------------------------------------

// BedRockStopScanResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockStopScanResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockStopScanResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockStopScanResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStopScanResponse.err)
  return _internal_err();
}
inline void BedRockStopScanResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockStopScanResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStopScanResponse.err)
}

// -------------------------------------------------------------------

// BedRockDoScanRequest

// uint64 iterator_id = 1;
inline void BedRockDoScanRequest::clear_iterator_id() {
  iterator_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockDoScanRequest::_internal_iterator_id() const {
  return iterator_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockDoScanRequest::iterator_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockDoScanRequest.iterator_id)
  return _internal_iterator_id();
}
inline void BedRockDoScanRequest::_internal_set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  iterator_id_ = value;
}
inline void BedRockDoScanRequest::set_iterator_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_iterator_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockDoScanRequest.iterator_id)
}

// -------------------------------------------------------------------

// BedRockKvPair

// bytes key = 1;
inline void BedRockKvPair::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvPair::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvPair.key)
  return _internal_key();
}
inline void BedRockKvPair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvPair.key)
}
inline std::string* BedRockKvPair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvPair.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockKvPair::_internal_key() const {
  return key_.Get();
}
inline void BedRockKvPair::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvPair::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvPair.key)
}
inline void BedRockKvPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvPair.key)
}
inline void BedRockKvPair::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvPair.key)
}
inline std::string* BedRockKvPair::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvPair::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvPair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvPair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvPair.key)
}
inline std::string* BedRockKvPair::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvPair.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvPair::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvPair.key)
}

// bytes value = 2;
inline void BedRockKvPair::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockKvPair::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvPair.value)
  return _internal_value();
}
inline void BedRockKvPair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvPair.value)
}
inline std::string* BedRockKvPair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvPair.value)
  return _internal_mutable_value();
}
inline const std::string& BedRockKvPair::_internal_value() const {
  return value_.Get();
}
inline void BedRockKvPair::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockKvPair::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockKvPair.value)
}
inline void BedRockKvPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockKvPair.value)
}
inline void BedRockKvPair::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockKvPair.value)
}
inline std::string* BedRockKvPair::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockKvPair::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvPair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockKvPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvPair.value)
}
inline std::string* BedRockKvPair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockKvPair.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockKvPair::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockKvPair.value)
}

// -------------------------------------------------------------------

// BedRockDoScanResponse

// repeated .bedrock.proxy.BedRockKvPair kvs = 1;
inline int BedRockDoScanResponse::_internal_kvs_size() const {
  return kvs_.size();
}
inline int BedRockDoScanResponse::kvs_size() const {
  return _internal_kvs_size();
}
inline void BedRockDoScanResponse::clear_kvs() {
  kvs_.Clear();
}
inline ::bedrock::proxy::BedRockKvPair* BedRockDoScanResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockDoScanResponse.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvPair >*
BedRockDoScanResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockDoScanResponse.kvs)
  return &kvs_;
}
inline const ::bedrock::proxy::BedRockKvPair& BedRockDoScanResponse::_internal_kvs(int index) const {
  return kvs_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvPair& BedRockDoScanResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockDoScanResponse.kvs)
  return _internal_kvs(index);
}
inline ::bedrock::proxy::BedRockKvPair* BedRockDoScanResponse::_internal_add_kvs() {
  return kvs_.Add();
}
inline ::bedrock::proxy::BedRockKvPair* BedRockDoScanResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockDoScanResponse.kvs)
  return _internal_add_kvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvPair >&
BedRockDoScanResponse::kvs() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockDoScanResponse.kvs)
  return kvs_;
}

// bool no_left = 2;
inline void BedRockDoScanResponse::clear_no_left() {
  no_left_ = false;
}
inline bool BedRockDoScanResponse::_internal_no_left() const {
  return no_left_;
}
inline bool BedRockDoScanResponse::no_left() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockDoScanResponse.no_left)
  return _internal_no_left();
}
inline void BedRockDoScanResponse::_internal_set_no_left(bool value) {
  
  no_left_ = value;
}
inline void BedRockDoScanResponse::set_no_left(bool value) {
  _internal_set_no_left(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockDoScanResponse.no_left)
}

// .bedrock.proxy.Error err = 255;
inline void BedRockDoScanResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockDoScanResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockDoScanResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockDoScanResponse.err)
  return _internal_err();
}
inline void BedRockDoScanResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockDoScanResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockDoScanResponse.err)
}

// -------------------------------------------------------------------

// BedRockTxRecordLock

// .bedrock.proxy.BedRockTxLockType lock_type = 1;
inline void BedRockTxRecordLock::clear_lock_type() {
  lock_type_ = 0;
}
inline ::bedrock::proxy::BedRockTxLockType BedRockTxRecordLock::_internal_lock_type() const {
  return static_cast< ::bedrock::proxy::BedRockTxLockType >(lock_type_);
}
inline ::bedrock::proxy::BedRockTxLockType BedRockTxRecordLock::lock_type() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockTxRecordLock.lock_type)
  return _internal_lock_type();
}
inline void BedRockTxRecordLock::_internal_set_lock_type(::bedrock::proxy::BedRockTxLockType value) {
  
  lock_type_ = value;
}
inline void BedRockTxRecordLock::set_lock_type(::bedrock::proxy::BedRockTxLockType value) {
  _internal_set_lock_type(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockTxRecordLock.lock_type)
}

// bytes key = 2;
inline void BedRockTxRecordLock::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockTxRecordLock::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockTxRecordLock.key)
  return _internal_key();
}
inline void BedRockTxRecordLock::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockTxRecordLock.key)
}
inline std::string* BedRockTxRecordLock::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockTxRecordLock.key)
  return _internal_mutable_key();
}
inline const std::string& BedRockTxRecordLock::_internal_key() const {
  return key_.Get();
}
inline void BedRockTxRecordLock::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockTxRecordLock::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockTxRecordLock.key)
}
inline void BedRockTxRecordLock::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockTxRecordLock.key)
}
inline void BedRockTxRecordLock::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockTxRecordLock.key)
}
inline std::string* BedRockTxRecordLock::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockTxRecordLock::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockTxRecordLock.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockTxRecordLock::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockTxRecordLock.key)
}
inline std::string* BedRockTxRecordLock::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockTxRecordLock.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockTxRecordLock::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockTxRecordLock.key)
}

// -------------------------------------------------------------------

// BedRockTxRangeLock

// .bedrock.proxy.BedRockTxLockType lock_type = 1;
inline void BedRockTxRangeLock::clear_lock_type() {
  lock_type_ = 0;
}
inline ::bedrock::proxy::BedRockTxLockType BedRockTxRangeLock::_internal_lock_type() const {
  return static_cast< ::bedrock::proxy::BedRockTxLockType >(lock_type_);
}
inline ::bedrock::proxy::BedRockTxLockType BedRockTxRangeLock::lock_type() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockTxRangeLock.lock_type)
  return _internal_lock_type();
}
inline void BedRockTxRangeLock::_internal_set_lock_type(::bedrock::proxy::BedRockTxLockType value) {
  
  lock_type_ = value;
}
inline void BedRockTxRangeLock::set_lock_type(::bedrock::proxy::BedRockTxLockType value) {
  _internal_set_lock_type(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockTxRangeLock.lock_type)
}

// bytes start_key = 2;
inline void BedRockTxRangeLock::clear_start_key() {
  start_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockTxRangeLock::start_key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockTxRangeLock.start_key)
  return _internal_start_key();
}
inline void BedRockTxRangeLock::set_start_key(const std::string& value) {
  _internal_set_start_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockTxRangeLock.start_key)
}
inline std::string* BedRockTxRangeLock::mutable_start_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockTxRangeLock.start_key)
  return _internal_mutable_start_key();
}
inline const std::string& BedRockTxRangeLock::_internal_start_key() const {
  return start_key_.Get();
}
inline void BedRockTxRangeLock::_internal_set_start_key(const std::string& value) {
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockTxRangeLock::set_start_key(std::string&& value) {
  
  start_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockTxRangeLock.start_key)
}
inline void BedRockTxRangeLock::set_start_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockTxRangeLock.start_key)
}
inline void BedRockTxRangeLock::set_start_key(const void* value,
    size_t size) {
  
  start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockTxRangeLock.start_key)
}
inline std::string* BedRockTxRangeLock::_internal_mutable_start_key() {
  
  return start_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockTxRangeLock::release_start_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockTxRangeLock.start_key)
  return start_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockTxRangeLock::set_allocated_start_key(std::string* start_key) {
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockTxRangeLock.start_key)
}
inline std::string* BedRockTxRangeLock::unsafe_arena_release_start_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockTxRangeLock.start_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockTxRangeLock::unsafe_arena_set_allocated_start_key(
    std::string* start_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_key != nullptr) {
    
  } else {
    
  }
  start_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockTxRangeLock.start_key)
}

// bytes end_key = 3;
inline void BedRockTxRangeLock::clear_end_key() {
  end_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BedRockTxRangeLock::end_key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockTxRangeLock.end_key)
  return _internal_end_key();
}
inline void BedRockTxRangeLock::set_end_key(const std::string& value) {
  _internal_set_end_key(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockTxRangeLock.end_key)
}
inline std::string* BedRockTxRangeLock::mutable_end_key() {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockTxRangeLock.end_key)
  return _internal_mutable_end_key();
}
inline const std::string& BedRockTxRangeLock::_internal_end_key() const {
  return end_key_.Get();
}
inline void BedRockTxRangeLock::_internal_set_end_key(const std::string& value) {
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BedRockTxRangeLock::set_end_key(std::string&& value) {
  
  end_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bedrock.proxy.BedRockTxRangeLock.end_key)
}
inline void BedRockTxRangeLock::set_end_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bedrock.proxy.BedRockTxRangeLock.end_key)
}
inline void BedRockTxRangeLock::set_end_key(const void* value,
    size_t size) {
  
  end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bedrock.proxy.BedRockTxRangeLock.end_key)
}
inline std::string* BedRockTxRangeLock::_internal_mutable_end_key() {
  
  return end_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BedRockTxRangeLock::release_end_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockTxRangeLock.end_key)
  return end_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BedRockTxRangeLock::set_allocated_end_key(std::string* end_key) {
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockTxRangeLock.end_key)
}
inline std::string* BedRockTxRangeLock::unsafe_arena_release_end_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bedrock.proxy.BedRockTxRangeLock.end_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BedRockTxRangeLock::unsafe_arena_set_allocated_end_key(
    std::string* end_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end_key != nullptr) {
    
  } else {
    
  }
  end_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bedrock.proxy.BedRockTxRangeLock.end_key)
}

// -------------------------------------------------------------------

// BedRockStartTxRequest

// uint32 storage_id = 1;
inline void BedRockStartTxRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockStartTxRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockStartTxRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartTxRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockStartTxRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockStartTxRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartTxRequest.storage_id)
}

// repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 2;
inline int BedRockStartTxRequest::_internal_record_locks_size() const {
  return record_locks_.size();
}
inline int BedRockStartTxRequest::record_locks_size() const {
  return _internal_record_locks_size();
}
inline void BedRockStartTxRequest::clear_record_locks() {
  record_locks_.Clear();
}
inline ::bedrock::proxy::BedRockTxRecordLock* BedRockStartTxRequest::mutable_record_locks(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockStartTxRequest.record_locks)
  return record_locks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRecordLock >*
BedRockStartTxRequest::mutable_record_locks() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockStartTxRequest.record_locks)
  return &record_locks_;
}
inline const ::bedrock::proxy::BedRockTxRecordLock& BedRockStartTxRequest::_internal_record_locks(int index) const {
  return record_locks_.Get(index);
}
inline const ::bedrock::proxy::BedRockTxRecordLock& BedRockStartTxRequest::record_locks(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartTxRequest.record_locks)
  return _internal_record_locks(index);
}
inline ::bedrock::proxy::BedRockTxRecordLock* BedRockStartTxRequest::_internal_add_record_locks() {
  return record_locks_.Add();
}
inline ::bedrock::proxy::BedRockTxRecordLock* BedRockStartTxRequest::add_record_locks() {
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockStartTxRequest.record_locks)
  return _internal_add_record_locks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRecordLock >&
BedRockStartTxRequest::record_locks() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockStartTxRequest.record_locks)
  return record_locks_;
}

// repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 3;
inline int BedRockStartTxRequest::_internal_range_locks_size() const {
  return range_locks_.size();
}
inline int BedRockStartTxRequest::range_locks_size() const {
  return _internal_range_locks_size();
}
inline void BedRockStartTxRequest::clear_range_locks() {
  range_locks_.Clear();
}
inline ::bedrock::proxy::BedRockTxRangeLock* BedRockStartTxRequest::mutable_range_locks(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockStartTxRequest.range_locks)
  return range_locks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRangeLock >*
BedRockStartTxRequest::mutable_range_locks() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockStartTxRequest.range_locks)
  return &range_locks_;
}
inline const ::bedrock::proxy::BedRockTxRangeLock& BedRockStartTxRequest::_internal_range_locks(int index) const {
  return range_locks_.Get(index);
}
inline const ::bedrock::proxy::BedRockTxRangeLock& BedRockStartTxRequest::range_locks(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartTxRequest.range_locks)
  return _internal_range_locks(index);
}
inline ::bedrock::proxy::BedRockTxRangeLock* BedRockStartTxRequest::_internal_add_range_locks() {
  return range_locks_.Add();
}
inline ::bedrock::proxy::BedRockTxRangeLock* BedRockStartTxRequest::add_range_locks() {
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockStartTxRequest.range_locks)
  return _internal_add_range_locks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockTxRangeLock >&
BedRockStartTxRequest::range_locks() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockStartTxRequest.range_locks)
  return range_locks_;
}

// -------------------------------------------------------------------

// BedRockStartTxResponse

// uint64 tx_id = 1;
inline void BedRockStartTxResponse::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockStartTxResponse::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockStartTxResponse::tx_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartTxResponse.tx_id)
  return _internal_tx_id();
}
inline void BedRockStartTxResponse::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void BedRockStartTxResponse::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartTxResponse.tx_id)
}

// .bedrock.proxy.Error err = 255;
inline void BedRockStartTxResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockStartTxResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockStartTxResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockStartTxResponse.err)
  return _internal_err();
}
inline void BedRockStartTxResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockStartTxResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockStartTxResponse.err)
}

// -------------------------------------------------------------------

// BedRockCommitTxRequest

// uint32 storage_id = 1;
inline void BedRockCommitTxRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockCommitTxRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockCommitTxRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockCommitTxRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockCommitTxRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockCommitTxRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockCommitTxRequest.storage_id)
}

// uint64 tx_id = 2;
inline void BedRockCommitTxRequest::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockCommitTxRequest::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockCommitTxRequest::tx_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockCommitTxRequest.tx_id)
  return _internal_tx_id();
}
inline void BedRockCommitTxRequest::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void BedRockCommitTxRequest::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockCommitTxRequest.tx_id)
}

// -------------------------------------------------------------------

// BedRockCommitTxResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockCommitTxResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockCommitTxResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockCommitTxResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockCommitTxResponse.err)
  return _internal_err();
}
inline void BedRockCommitTxResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockCommitTxResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockCommitTxResponse.err)
}

// -------------------------------------------------------------------

// BedRockRollbackTxRequest

// uint32 storage_id = 1;
inline void BedRockRollbackTxRequest::clear_storage_id() {
  storage_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockRollbackTxRequest::_internal_storage_id() const {
  return storage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BedRockRollbackTxRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockRollbackTxRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockRollbackTxRequest::_internal_set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_id_ = value;
}
inline void BedRockRollbackTxRequest::set_storage_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockRollbackTxRequest.storage_id)
}

// uint64 tx_id = 2;
inline void BedRockRollbackTxRequest::clear_tx_id() {
  tx_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockRollbackTxRequest::_internal_tx_id() const {
  return tx_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BedRockRollbackTxRequest::tx_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockRollbackTxRequest.tx_id)
  return _internal_tx_id();
}
inline void BedRockRollbackTxRequest::_internal_set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_id_ = value;
}
inline void BedRockRollbackTxRequest::set_tx_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockRollbackTxRequest.tx_id)
}

// -------------------------------------------------------------------

// BedRockRollbackTxResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockRollbackTxResponse::clear_err() {
  err_ = 0;
}
inline ::bedrock::proxy::Error BedRockRollbackTxResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(err_);
}
inline ::bedrock::proxy::Error BedRockRollbackTxResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockRollbackTxResponse.err)
  return _internal_err();
}
inline void BedRockRollbackTxResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  err_ = value;
}
inline void BedRockRollbackTxResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockRollbackTxResponse.err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proxy
}  // namespace bedrock

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bedrock::proxy::TxStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bedrock::proxy::TxStatus>() {
  return ::bedrock::proxy::TxStatus_descriptor();
}
template <> struct is_proto_enum< ::bedrock::proxy::Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bedrock::proxy::Error>() {
  return ::bedrock::proxy::Error_descriptor();
}
template <> struct is_proto_enum< ::bedrock::proxy::BedRockTxLockType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bedrock::proxy::BedRockTxLockType>() {
  return ::bedrock::proxy::BedRockTxLockType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
