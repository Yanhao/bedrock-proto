// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2eproto;
namespace bedrock {
namespace proxy {
class BedRockKvDeleteRequest;
struct BedRockKvDeleteRequestDefaultTypeInternal;
extern BedRockKvDeleteRequestDefaultTypeInternal _BedRockKvDeleteRequest_default_instance_;
class BedRockKvDeleteResponse;
struct BedRockKvDeleteResponseDefaultTypeInternal;
extern BedRockKvDeleteResponseDefaultTypeInternal _BedRockKvDeleteResponse_default_instance_;
class BedRockKvGetRequest;
struct BedRockKvGetRequestDefaultTypeInternal;
extern BedRockKvGetRequestDefaultTypeInternal _BedRockKvGetRequest_default_instance_;
class BedRockKvGetResponse;
struct BedRockKvGetResponseDefaultTypeInternal;
extern BedRockKvGetResponseDefaultTypeInternal _BedRockKvGetResponse_default_instance_;
class BedRockKvMDeleteParam;
struct BedRockKvMDeleteParamDefaultTypeInternal;
extern BedRockKvMDeleteParamDefaultTypeInternal _BedRockKvMDeleteParam_default_instance_;
class BedRockKvMDeleteRequest;
struct BedRockKvMDeleteRequestDefaultTypeInternal;
extern BedRockKvMDeleteRequestDefaultTypeInternal _BedRockKvMDeleteRequest_default_instance_;
class BedRockKvMDeleteResponse;
struct BedRockKvMDeleteResponseDefaultTypeInternal;
extern BedRockKvMDeleteResponseDefaultTypeInternal _BedRockKvMDeleteResponse_default_instance_;
class BedRockKvMGetKvRetPair;
struct BedRockKvMGetKvRetPairDefaultTypeInternal;
extern BedRockKvMGetKvRetPairDefaultTypeInternal _BedRockKvMGetKvRetPair_default_instance_;
class BedRockKvMGetParam;
struct BedRockKvMGetParamDefaultTypeInternal;
extern BedRockKvMGetParamDefaultTypeInternal _BedRockKvMGetParam_default_instance_;
class BedRockKvMGetRequest;
struct BedRockKvMGetRequestDefaultTypeInternal;
extern BedRockKvMGetRequestDefaultTypeInternal _BedRockKvMGetRequest_default_instance_;
class BedRockKvMGetResponse;
struct BedRockKvMGetResponseDefaultTypeInternal;
extern BedRockKvMGetResponseDefaultTypeInternal _BedRockKvMGetResponse_default_instance_;
class BedRockKvMSetParam;
struct BedRockKvMSetParamDefaultTypeInternal;
extern BedRockKvMSetParamDefaultTypeInternal _BedRockKvMSetParam_default_instance_;
class BedRockKvMSetRequest;
struct BedRockKvMSetRequestDefaultTypeInternal;
extern BedRockKvMSetRequestDefaultTypeInternal _BedRockKvMSetRequest_default_instance_;
class BedRockKvMSetResponse;
struct BedRockKvMSetResponseDefaultTypeInternal;
extern BedRockKvMSetResponseDefaultTypeInternal _BedRockKvMSetResponse_default_instance_;
class BedRockKvSetRequest;
struct BedRockKvSetRequestDefaultTypeInternal;
extern BedRockKvSetRequestDefaultTypeInternal _BedRockKvSetRequest_default_instance_;
class BedRockKvSetResponse;
struct BedRockKvSetResponseDefaultTypeInternal;
extern BedRockKvSetResponseDefaultTypeInternal _BedRockKvSetResponse_default_instance_;
}  // namespace proxy
}  // namespace bedrock
PROTOBUF_NAMESPACE_OPEN
template<> ::bedrock::proxy::BedRockKvDeleteRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvDeleteRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvDeleteResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvDeleteResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvGetRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvGetRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvGetResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvGetResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvMDeleteParam* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMDeleteParam>(Arena*);
template<> ::bedrock::proxy::BedRockKvMDeleteRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMDeleteRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvMDeleteResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMDeleteResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvMGetKvRetPair* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMGetKvRetPair>(Arena*);
template<> ::bedrock::proxy::BedRockKvMGetParam* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMGetParam>(Arena*);
template<> ::bedrock::proxy::BedRockKvMGetRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMGetRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvMGetResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMGetResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvMSetParam* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMSetParam>(Arena*);
template<> ::bedrock::proxy::BedRockKvMSetRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMSetRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvMSetResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvMSetResponse>(Arena*);
template<> ::bedrock::proxy::BedRockKvSetRequest* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvSetRequest>(Arena*);
template<> ::bedrock::proxy::BedRockKvSetResponse* Arena::CreateMaybeMessage<::bedrock::proxy::BedRockKvSetResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bedrock {
namespace proxy {

enum Error : int {
  OK = 0,
  NO_SUCH_KEY = 1,
  INVLIAD_PARAMETERS = 2,
  UNKNOWN = 255,
  Error_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Error_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Error_IsValid(int value);
constexpr Error Error_MIN = OK;
constexpr Error Error_MAX = UNKNOWN;
constexpr int Error_ARRAYSIZE = Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor();
template<typename T>
inline const std::string& Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_descriptor(), enum_t_value);
}
inline bool Error_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error>(
    Error_descriptor(), name, value);
}
// ===================================================================

class BedRockKvGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvGetRequest) */ {
 public:
  inline BedRockKvGetRequest() : BedRockKvGetRequest(nullptr) {}
  ~BedRockKvGetRequest() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvGetRequest(const BedRockKvGetRequest& from);
  BedRockKvGetRequest(BedRockKvGetRequest&& from) noexcept
    : BedRockKvGetRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvGetRequest& operator=(const BedRockKvGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvGetRequest& operator=(BedRockKvGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvGetRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvGetRequest*>(
               &_BedRockKvGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BedRockKvGetRequest& a, BedRockKvGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvGetRequest& from) {
    BedRockKvGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvGetRequest";
  }
  protected:
  explicit BedRockKvGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  uint32_t storage_id() const;
  void set_storage_id(uint32_t value);
  private:
  uint32_t _internal_storage_id() const;
  void _internal_set_storage_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint32_t storage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvGetResponse) */ {
 public:
  inline BedRockKvGetResponse() : BedRockKvGetResponse(nullptr) {}
  ~BedRockKvGetResponse() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvGetResponse(const BedRockKvGetResponse& from);
  BedRockKvGetResponse(BedRockKvGetResponse&& from) noexcept
    : BedRockKvGetResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvGetResponse& operator=(const BedRockKvGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvGetResponse& operator=(BedRockKvGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvGetResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvGetResponse*>(
               &_BedRockKvGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BedRockKvGetResponse& a, BedRockKvGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvGetResponse& from) {
    BedRockKvGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvGetResponse";
  }
  protected:
  explicit BedRockKvGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kErrFieldNumber = 255,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvSetRequest) */ {
 public:
  inline BedRockKvSetRequest() : BedRockKvSetRequest(nullptr) {}
  ~BedRockKvSetRequest() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvSetRequest(const BedRockKvSetRequest& from);
  BedRockKvSetRequest(BedRockKvSetRequest&& from) noexcept
    : BedRockKvSetRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvSetRequest& operator=(const BedRockKvSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvSetRequest& operator=(BedRockKvSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvSetRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvSetRequest*>(
               &_BedRockKvSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BedRockKvSetRequest& a, BedRockKvSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvSetRequest& from) {
    BedRockKvSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvSetRequest";
  }
  protected:
  explicit BedRockKvSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kStorageIdFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  uint32_t storage_id() const;
  void set_storage_id(uint32_t value);
  private:
  uint32_t _internal_storage_id() const;
  void _internal_set_storage_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    uint32_t storage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvSetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvSetResponse) */ {
 public:
  inline BedRockKvSetResponse() : BedRockKvSetResponse(nullptr) {}
  ~BedRockKvSetResponse() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvSetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvSetResponse(const BedRockKvSetResponse& from);
  BedRockKvSetResponse(BedRockKvSetResponse&& from) noexcept
    : BedRockKvSetResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvSetResponse& operator=(const BedRockKvSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvSetResponse& operator=(BedRockKvSetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvSetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvSetResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvSetResponse*>(
               &_BedRockKvSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BedRockKvSetResponse& a, BedRockKvSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvSetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvSetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvSetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvSetResponse& from) {
    BedRockKvSetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvSetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvSetResponse";
  }
  protected:
  explicit BedRockKvSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvDeleteRequest) */ {
 public:
  inline BedRockKvDeleteRequest() : BedRockKvDeleteRequest(nullptr) {}
  ~BedRockKvDeleteRequest() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvDeleteRequest(const BedRockKvDeleteRequest& from);
  BedRockKvDeleteRequest(BedRockKvDeleteRequest&& from) noexcept
    : BedRockKvDeleteRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvDeleteRequest& operator=(const BedRockKvDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvDeleteRequest& operator=(BedRockKvDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvDeleteRequest*>(
               &_BedRockKvDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BedRockKvDeleteRequest& a, BedRockKvDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvDeleteRequest& from) {
    BedRockKvDeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvDeleteRequest";
  }
  protected:
  explicit BedRockKvDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint32 storage_id = 1;
  void clear_storage_id();
  uint32_t storage_id() const;
  void set_storage_id(uint32_t value);
  private:
  uint32_t _internal_storage_id() const;
  void _internal_set_storage_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    uint32_t storage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvDeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvDeleteResponse) */ {
 public:
  inline BedRockKvDeleteResponse() : BedRockKvDeleteResponse(nullptr) {}
  ~BedRockKvDeleteResponse() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvDeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvDeleteResponse(const BedRockKvDeleteResponse& from);
  BedRockKvDeleteResponse(BedRockKvDeleteResponse&& from) noexcept
    : BedRockKvDeleteResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvDeleteResponse& operator=(const BedRockKvDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvDeleteResponse& operator=(BedRockKvDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvDeleteResponse*>(
               &_BedRockKvDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BedRockKvDeleteResponse& a, BedRockKvDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvDeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvDeleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvDeleteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvDeleteResponse& from) {
    BedRockKvDeleteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvDeleteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvDeleteResponse";
  }
  protected:
  explicit BedRockKvDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMSetParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMSetParam) */ {
 public:
  inline BedRockKvMSetParam() : BedRockKvMSetParam(nullptr) {}
  ~BedRockKvMSetParam() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMSetParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMSetParam(const BedRockKvMSetParam& from);
  BedRockKvMSetParam(BedRockKvMSetParam&& from) noexcept
    : BedRockKvMSetParam() {
    *this = ::std::move(from);
  }

  inline BedRockKvMSetParam& operator=(const BedRockKvMSetParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMSetParam& operator=(BedRockKvMSetParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMSetParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMSetParam* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMSetParam*>(
               &_BedRockKvMSetParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BedRockKvMSetParam& a, BedRockKvMSetParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMSetParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMSetParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMSetParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMSetParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMSetParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMSetParam& from) {
    BedRockKvMSetParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMSetParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMSetParam";
  }
  protected:
  explicit BedRockKvMSetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMSetParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMSetRequest) */ {
 public:
  inline BedRockKvMSetRequest() : BedRockKvMSetRequest(nullptr) {}
  ~BedRockKvMSetRequest() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMSetRequest(const BedRockKvMSetRequest& from);
  BedRockKvMSetRequest(BedRockKvMSetRequest&& from) noexcept
    : BedRockKvMSetRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvMSetRequest& operator=(const BedRockKvMSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMSetRequest& operator=(BedRockKvMSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMSetRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMSetRequest*>(
               &_BedRockKvMSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BedRockKvMSetRequest& a, BedRockKvMSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMSetRequest& from) {
    BedRockKvMSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMSetRequest";
  }
  protected:
  explicit BedRockKvMSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::bedrock::proxy::BedRockKvMSetParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam >*
      mutable_params();
  private:
  const ::bedrock::proxy::BedRockKvMSetParam& _internal_params(int index) const;
  ::bedrock::proxy::BedRockKvMSetParam* _internal_add_params();
  public:
  const ::bedrock::proxy::BedRockKvMSetParam& params(int index) const;
  ::bedrock::proxy::BedRockKvMSetParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam >&
      params() const;

  // uint32 storage_id = 1;
  void clear_storage_id();
  uint32_t storage_id() const;
  void set_storage_id(uint32_t value);
  private:
  uint32_t _internal_storage_id() const;
  void _internal_set_storage_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam > params_;
    uint32_t storage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMSetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMSetResponse) */ {
 public:
  inline BedRockKvMSetResponse() : BedRockKvMSetResponse(nullptr) {}
  ~BedRockKvMSetResponse() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMSetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMSetResponse(const BedRockKvMSetResponse& from);
  BedRockKvMSetResponse(BedRockKvMSetResponse&& from) noexcept
    : BedRockKvMSetResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvMSetResponse& operator=(const BedRockKvMSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMSetResponse& operator=(BedRockKvMSetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMSetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMSetResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMSetResponse*>(
               &_BedRockKvMSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BedRockKvMSetResponse& a, BedRockKvMSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMSetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMSetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMSetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMSetResponse& from) {
    BedRockKvMSetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMSetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMSetResponse";
  }
  protected:
  explicit BedRockKvMSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMGetParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMGetParam) */ {
 public:
  inline BedRockKvMGetParam() : BedRockKvMGetParam(nullptr) {}
  ~BedRockKvMGetParam() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMGetParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMGetParam(const BedRockKvMGetParam& from);
  BedRockKvMGetParam(BedRockKvMGetParam&& from) noexcept
    : BedRockKvMGetParam() {
    *this = ::std::move(from);
  }

  inline BedRockKvMGetParam& operator=(const BedRockKvMGetParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMGetParam& operator=(BedRockKvMGetParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMGetParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMGetParam* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMGetParam*>(
               &_BedRockKvMGetParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BedRockKvMGetParam& a, BedRockKvMGetParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMGetParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMGetParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMGetParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMGetParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMGetParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMGetParam& from) {
    BedRockKvMGetParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMGetParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMGetParam";
  }
  protected:
  explicit BedRockKvMGetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMGetParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMGetRequest) */ {
 public:
  inline BedRockKvMGetRequest() : BedRockKvMGetRequest(nullptr) {}
  ~BedRockKvMGetRequest() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMGetRequest(const BedRockKvMGetRequest& from);
  BedRockKvMGetRequest(BedRockKvMGetRequest&& from) noexcept
    : BedRockKvMGetRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvMGetRequest& operator=(const BedRockKvMGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMGetRequest& operator=(BedRockKvMGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMGetRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMGetRequest*>(
               &_BedRockKvMGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BedRockKvMGetRequest& a, BedRockKvMGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMGetRequest& from) {
    BedRockKvMGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMGetRequest";
  }
  protected:
  explicit BedRockKvMGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::bedrock::proxy::BedRockKvMGetParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam >*
      mutable_params();
  private:
  const ::bedrock::proxy::BedRockKvMGetParam& _internal_params(int index) const;
  ::bedrock::proxy::BedRockKvMGetParam* _internal_add_params();
  public:
  const ::bedrock::proxy::BedRockKvMGetParam& params(int index) const;
  ::bedrock::proxy::BedRockKvMGetParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam >&
      params() const;

  // uint32 storage_id = 1;
  void clear_storage_id();
  uint32_t storage_id() const;
  void set_storage_id(uint32_t value);
  private:
  uint32_t _internal_storage_id() const;
  void _internal_set_storage_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam > params_;
    uint32_t storage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMGetKvRetPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMGetKvRetPair) */ {
 public:
  inline BedRockKvMGetKvRetPair() : BedRockKvMGetKvRetPair(nullptr) {}
  ~BedRockKvMGetKvRetPair() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMGetKvRetPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMGetKvRetPair(const BedRockKvMGetKvRetPair& from);
  BedRockKvMGetKvRetPair(BedRockKvMGetKvRetPair&& from) noexcept
    : BedRockKvMGetKvRetPair() {
    *this = ::std::move(from);
  }

  inline BedRockKvMGetKvRetPair& operator=(const BedRockKvMGetKvRetPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMGetKvRetPair& operator=(BedRockKvMGetKvRetPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMGetKvRetPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMGetKvRetPair* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMGetKvRetPair*>(
               &_BedRockKvMGetKvRetPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BedRockKvMGetKvRetPair& a, BedRockKvMGetKvRetPair& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMGetKvRetPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMGetKvRetPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMGetKvRetPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMGetKvRetPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMGetKvRetPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMGetKvRetPair& from) {
    BedRockKvMGetKvRetPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMGetKvRetPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMGetKvRetPair";
  }
  protected:
  explicit BedRockKvMGetKvRetPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMGetKvRetPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMGetResponse) */ {
 public:
  inline BedRockKvMGetResponse() : BedRockKvMGetResponse(nullptr) {}
  ~BedRockKvMGetResponse() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMGetResponse(const BedRockKvMGetResponse& from);
  BedRockKvMGetResponse(BedRockKvMGetResponse&& from) noexcept
    : BedRockKvMGetResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvMGetResponse& operator=(const BedRockKvMGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMGetResponse& operator=(BedRockKvMGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMGetResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMGetResponse*>(
               &_BedRockKvMGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BedRockKvMGetResponse& a, BedRockKvMGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMGetResponse& from) {
    BedRockKvMGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMGetResponse";
  }
  protected:
  explicit BedRockKvMGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 1,
    kErrFieldNumber = 255,
  };
  // repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::bedrock::proxy::BedRockKvMGetKvRetPair* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair >*
      mutable_kvs();
  private:
  const ::bedrock::proxy::BedRockKvMGetKvRetPair& _internal_kvs(int index) const;
  ::bedrock::proxy::BedRockKvMGetKvRetPair* _internal_add_kvs();
  public:
  const ::bedrock::proxy::BedRockKvMGetKvRetPair& kvs(int index) const;
  ::bedrock::proxy::BedRockKvMGetKvRetPair* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair >&
      kvs() const;

  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair > kvs_;
    int err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMDeleteParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMDeleteParam) */ {
 public:
  inline BedRockKvMDeleteParam() : BedRockKvMDeleteParam(nullptr) {}
  ~BedRockKvMDeleteParam() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMDeleteParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMDeleteParam(const BedRockKvMDeleteParam& from);
  BedRockKvMDeleteParam(BedRockKvMDeleteParam&& from) noexcept
    : BedRockKvMDeleteParam() {
    *this = ::std::move(from);
  }

  inline BedRockKvMDeleteParam& operator=(const BedRockKvMDeleteParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMDeleteParam& operator=(BedRockKvMDeleteParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMDeleteParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMDeleteParam* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMDeleteParam*>(
               &_BedRockKvMDeleteParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BedRockKvMDeleteParam& a, BedRockKvMDeleteParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMDeleteParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMDeleteParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMDeleteParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMDeleteParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMDeleteParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMDeleteParam& from) {
    BedRockKvMDeleteParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMDeleteParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMDeleteParam";
  }
  protected:
  explicit BedRockKvMDeleteParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMDeleteParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMDeleteRequest) */ {
 public:
  inline BedRockKvMDeleteRequest() : BedRockKvMDeleteRequest(nullptr) {}
  ~BedRockKvMDeleteRequest() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMDeleteRequest(const BedRockKvMDeleteRequest& from);
  BedRockKvMDeleteRequest(BedRockKvMDeleteRequest&& from) noexcept
    : BedRockKvMDeleteRequest() {
    *this = ::std::move(from);
  }

  inline BedRockKvMDeleteRequest& operator=(const BedRockKvMDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMDeleteRequest& operator=(BedRockKvMDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMDeleteRequest*>(
               &_BedRockKvMDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BedRockKvMDeleteRequest& a, BedRockKvMDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMDeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMDeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMDeleteRequest& from) {
    BedRockKvMDeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMDeleteRequest";
  }
  protected:
  explicit BedRockKvMDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kStorageIdFieldNumber = 1,
  };
  // repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::bedrock::proxy::BedRockKvMDeleteParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam >*
      mutable_params();
  private:
  const ::bedrock::proxy::BedRockKvMDeleteParam& _internal_params(int index) const;
  ::bedrock::proxy::BedRockKvMDeleteParam* _internal_add_params();
  public:
  const ::bedrock::proxy::BedRockKvMDeleteParam& params(int index) const;
  ::bedrock::proxy::BedRockKvMDeleteParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam >&
      params() const;

  // uint32 storage_id = 1;
  void clear_storage_id();
  uint32_t storage_id() const;
  void set_storage_id(uint32_t value);
  private:
  uint32_t _internal_storage_id() const;
  void _internal_set_storage_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam > params_;
    uint32_t storage_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class BedRockKvMDeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bedrock.proxy.BedRockKvMDeleteResponse) */ {
 public:
  inline BedRockKvMDeleteResponse() : BedRockKvMDeleteResponse(nullptr) {}
  ~BedRockKvMDeleteResponse() override;
  explicit PROTOBUF_CONSTEXPR BedRockKvMDeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BedRockKvMDeleteResponse(const BedRockKvMDeleteResponse& from);
  BedRockKvMDeleteResponse(BedRockKvMDeleteResponse&& from) noexcept
    : BedRockKvMDeleteResponse() {
    *this = ::std::move(from);
  }

  inline BedRockKvMDeleteResponse& operator=(const BedRockKvMDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedRockKvMDeleteResponse& operator=(BedRockKvMDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BedRockKvMDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BedRockKvMDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const BedRockKvMDeleteResponse*>(
               &_BedRockKvMDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BedRockKvMDeleteResponse& a, BedRockKvMDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BedRockKvMDeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BedRockKvMDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BedRockKvMDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BedRockKvMDeleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BedRockKvMDeleteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BedRockKvMDeleteResponse& from) {
    BedRockKvMDeleteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRockKvMDeleteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bedrock.proxy.BedRockKvMDeleteResponse";
  }
  protected:
  explicit BedRockKvMDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 255,
  };
  // .bedrock.proxy.Error err = 255;
  void clear_err();
  ::bedrock::proxy::Error err() const;
  void set_err(::bedrock::proxy::Error value);
  private:
  ::bedrock::proxy::Error _internal_err() const;
  void _internal_set_err(::bedrock::proxy::Error value);
  public:

  // @@protoc_insertion_point(class_scope:bedrock.proxy.BedRockKvMDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// ===================================================================

class ProxyService_Stub;

class ProxyService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ProxyService() {};
 public:
  virtual ~ProxyService();

  typedef ProxyService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void BedRockKvSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvSetRequest* request,
                       ::bedrock::proxy::BedRockKvSetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvGetRequest* request,
                       ::bedrock::proxy::BedRockKvGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvDeleteRequest* request,
                       ::bedrock::proxy::BedRockKvDeleteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvMSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMSetRequest* request,
                       ::bedrock::proxy::BedRockKvMSetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvMGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMGetRequest* request,
                       ::bedrock::proxy::BedRockKvMGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BedRockKvMDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMDeleteRequest* request,
                       ::bedrock::proxy::BedRockKvMDeleteResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ProxyService);
};

class ProxyService_Stub : public ProxyService {
 public:
  ProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ProxyService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ProxyService ------------------------------------------

  void BedRockKvSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvSetRequest* request,
                       ::bedrock::proxy::BedRockKvSetResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvGetRequest* request,
                       ::bedrock::proxy::BedRockKvGetResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvDeleteRequest* request,
                       ::bedrock::proxy::BedRockKvDeleteResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvMSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMSetRequest* request,
                       ::bedrock::proxy::BedRockKvMSetResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvMGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMGetRequest* request,
                       ::bedrock::proxy::BedRockKvMGetResponse* response,
                       ::google::protobuf::Closure* done);
  void BedRockKvMDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::bedrock::proxy::BedRockKvMDeleteRequest* request,
                       ::bedrock::proxy::BedRockKvMDeleteResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ProxyService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BedRockKvGetRequest

// uint32 storage_id = 1;
inline void BedRockKvGetRequest::clear_storage_id() {
  _impl_.storage_id_ = 0u;
}
inline uint32_t BedRockKvGetRequest::_internal_storage_id() const {
  return _impl_.storage_id_;
}
inline uint32_t BedRockKvGetRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvGetRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvGetRequest::_internal_set_storage_id(uint32_t value) {
  
  _impl_.storage_id_ = value;
}
inline void BedRockKvGetRequest::set_storage_id(uint32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvGetRequest.storage_id)
}

// bytes key = 2;
inline void BedRockKvGetRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& BedRockKvGetRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvGetRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvGetRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvGetRequest.key)
}
inline std::string* BedRockKvGetRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvGetRequest.key)
  return _s;
}
inline const std::string& BedRockKvGetRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void BedRockKvGetRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvGetRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvGetRequest.key)
  return _impl_.key_.Release();
}
inline void BedRockKvGetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvGetRequest.key)
}

// -------------------------------------------------------------------

// BedRockKvGetResponse

// bytes value = 1;
inline void BedRockKvGetResponse::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& BedRockKvGetResponse::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvGetResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvGetResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvGetResponse.value)
}
inline std::string* BedRockKvGetResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvGetResponse.value)
  return _s;
}
inline const std::string& BedRockKvGetResponse::_internal_value() const {
  return _impl_.value_.Get();
}
inline void BedRockKvGetResponse::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvGetResponse::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvGetResponse.value)
  return _impl_.value_.Release();
}
inline void BedRockKvGetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvGetResponse.value)
}

// .bedrock.proxy.Error err = 255;
inline void BedRockKvGetResponse::clear_err() {
  _impl_.err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvGetResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(_impl_.err_);
}
inline ::bedrock::proxy::Error BedRockKvGetResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvGetResponse.err)
  return _internal_err();
}
inline void BedRockKvGetResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  _impl_.err_ = value;
}
inline void BedRockKvGetResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvGetResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvSetRequest

// uint32 storage_id = 1;
inline void BedRockKvSetRequest::clear_storage_id() {
  _impl_.storage_id_ = 0u;
}
inline uint32_t BedRockKvSetRequest::_internal_storage_id() const {
  return _impl_.storage_id_;
}
inline uint32_t BedRockKvSetRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvSetRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvSetRequest::_internal_set_storage_id(uint32_t value) {
  
  _impl_.storage_id_ = value;
}
inline void BedRockKvSetRequest::set_storage_id(uint32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvSetRequest.storage_id)
}

// bytes key = 2;
inline void BedRockKvSetRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& BedRockKvSetRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvSetRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvSetRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvSetRequest.key)
}
inline std::string* BedRockKvSetRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvSetRequest.key)
  return _s;
}
inline const std::string& BedRockKvSetRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void BedRockKvSetRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvSetRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvSetRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvSetRequest.key)
  return _impl_.key_.Release();
}
inline void BedRockKvSetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvSetRequest.key)
}

// bytes value = 3;
inline void BedRockKvSetRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& BedRockKvSetRequest::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvSetRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvSetRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvSetRequest.value)
}
inline std::string* BedRockKvSetRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvSetRequest.value)
  return _s;
}
inline const std::string& BedRockKvSetRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void BedRockKvSetRequest::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvSetRequest::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvSetRequest::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvSetRequest.value)
  return _impl_.value_.Release();
}
inline void BedRockKvSetRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvSetRequest.value)
}

// -------------------------------------------------------------------

// BedRockKvSetResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockKvSetResponse::clear_err() {
  _impl_.err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvSetResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(_impl_.err_);
}
inline ::bedrock::proxy::Error BedRockKvSetResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvSetResponse.err)
  return _internal_err();
}
inline void BedRockKvSetResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  _impl_.err_ = value;
}
inline void BedRockKvSetResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvSetResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvDeleteRequest

// uint32 storage_id = 1;
inline void BedRockKvDeleteRequest::clear_storage_id() {
  _impl_.storage_id_ = 0u;
}
inline uint32_t BedRockKvDeleteRequest::_internal_storage_id() const {
  return _impl_.storage_id_;
}
inline uint32_t BedRockKvDeleteRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvDeleteRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvDeleteRequest::_internal_set_storage_id(uint32_t value) {
  
  _impl_.storage_id_ = value;
}
inline void BedRockKvDeleteRequest::set_storage_id(uint32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvDeleteRequest.storage_id)
}

// bytes key = 2;
inline void BedRockKvDeleteRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& BedRockKvDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvDeleteRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvDeleteRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvDeleteRequest.key)
}
inline std::string* BedRockKvDeleteRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvDeleteRequest.key)
  return _s;
}
inline const std::string& BedRockKvDeleteRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void BedRockKvDeleteRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvDeleteRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvDeleteRequest.key)
  return _impl_.key_.Release();
}
inline void BedRockKvDeleteRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvDeleteRequest.key)
}

// -------------------------------------------------------------------

// BedRockKvDeleteResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockKvDeleteResponse::clear_err() {
  _impl_.err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvDeleteResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(_impl_.err_);
}
inline ::bedrock::proxy::Error BedRockKvDeleteResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvDeleteResponse.err)
  return _internal_err();
}
inline void BedRockKvDeleteResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  _impl_.err_ = value;
}
inline void BedRockKvDeleteResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvDeleteResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvMSetParam

// bytes key = 1;
inline void BedRockKvMSetParam::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& BedRockKvMSetParam::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetParam.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvMSetParam::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMSetParam.key)
}
inline std::string* BedRockKvMSetParam::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMSetParam.key)
  return _s;
}
inline const std::string& BedRockKvMSetParam::_internal_key() const {
  return _impl_.key_.Get();
}
inline void BedRockKvMSetParam::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvMSetParam::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvMSetParam::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMSetParam.key)
  return _impl_.key_.Release();
}
inline void BedRockKvMSetParam::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMSetParam.key)
}

// bytes value = 2;
inline void BedRockKvMSetParam::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& BedRockKvMSetParam::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetParam.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvMSetParam::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMSetParam.value)
}
inline std::string* BedRockKvMSetParam::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMSetParam.value)
  return _s;
}
inline const std::string& BedRockKvMSetParam::_internal_value() const {
  return _impl_.value_.Get();
}
inline void BedRockKvMSetParam::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvMSetParam::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvMSetParam::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMSetParam.value)
  return _impl_.value_.Release();
}
inline void BedRockKvMSetParam::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMSetParam.value)
}

// -------------------------------------------------------------------

// BedRockKvMSetRequest

// uint32 storage_id = 1;
inline void BedRockKvMSetRequest::clear_storage_id() {
  _impl_.storage_id_ = 0u;
}
inline uint32_t BedRockKvMSetRequest::_internal_storage_id() const {
  return _impl_.storage_id_;
}
inline uint32_t BedRockKvMSetRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvMSetRequest::_internal_set_storage_id(uint32_t value) {
  
  _impl_.storage_id_ = value;
}
inline void BedRockKvMSetRequest::set_storage_id(uint32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMSetRequest.storage_id)
}

// repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
inline int BedRockKvMSetRequest::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int BedRockKvMSetRequest::params_size() const {
  return _internal_params_size();
}
inline void BedRockKvMSetRequest::clear_params() {
  _impl_.params_.Clear();
}
inline ::bedrock::proxy::BedRockKvMSetParam* BedRockKvMSetRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMSetRequest.params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam >*
BedRockKvMSetRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockKvMSetRequest.params)
  return &_impl_.params_;
}
inline const ::bedrock::proxy::BedRockKvMSetParam& BedRockKvMSetRequest::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvMSetParam& BedRockKvMSetRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetRequest.params)
  return _internal_params(index);
}
inline ::bedrock::proxy::BedRockKvMSetParam* BedRockKvMSetRequest::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::bedrock::proxy::BedRockKvMSetParam* BedRockKvMSetRequest::add_params() {
  ::bedrock::proxy::BedRockKvMSetParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockKvMSetRequest.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMSetParam >&
BedRockKvMSetRequest::params() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockKvMSetRequest.params)
  return _impl_.params_;
}

// -------------------------------------------------------------------

// BedRockKvMSetResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockKvMSetResponse::clear_err() {
  _impl_.err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvMSetResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(_impl_.err_);
}
inline ::bedrock::proxy::Error BedRockKvMSetResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMSetResponse.err)
  return _internal_err();
}
inline void BedRockKvMSetResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  _impl_.err_ = value;
}
inline void BedRockKvMSetResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMSetResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvMGetParam

// bytes key = 1;
inline void BedRockKvMGetParam::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& BedRockKvMGetParam::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetParam.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvMGetParam::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetParam.key)
}
inline std::string* BedRockKvMGetParam::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetParam.key)
  return _s;
}
inline const std::string& BedRockKvMGetParam::_internal_key() const {
  return _impl_.key_.Get();
}
inline void BedRockKvMGetParam::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvMGetParam::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvMGetParam::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMGetParam.key)
  return _impl_.key_.Release();
}
inline void BedRockKvMGetParam::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMGetParam.key)
}

// -------------------------------------------------------------------

// BedRockKvMGetRequest

// uint32 storage_id = 1;
inline void BedRockKvMGetRequest::clear_storage_id() {
  _impl_.storage_id_ = 0u;
}
inline uint32_t BedRockKvMGetRequest::_internal_storage_id() const {
  return _impl_.storage_id_;
}
inline uint32_t BedRockKvMGetRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvMGetRequest::_internal_set_storage_id(uint32_t value) {
  
  _impl_.storage_id_ = value;
}
inline void BedRockKvMGetRequest::set_storage_id(uint32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetRequest.storage_id)
}

// repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
inline int BedRockKvMGetRequest::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int BedRockKvMGetRequest::params_size() const {
  return _internal_params_size();
}
inline void BedRockKvMGetRequest::clear_params() {
  _impl_.params_.Clear();
}
inline ::bedrock::proxy::BedRockKvMGetParam* BedRockKvMGetRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetRequest.params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam >*
BedRockKvMGetRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockKvMGetRequest.params)
  return &_impl_.params_;
}
inline const ::bedrock::proxy::BedRockKvMGetParam& BedRockKvMGetRequest::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvMGetParam& BedRockKvMGetRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetRequest.params)
  return _internal_params(index);
}
inline ::bedrock::proxy::BedRockKvMGetParam* BedRockKvMGetRequest::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::bedrock::proxy::BedRockKvMGetParam* BedRockKvMGetRequest::add_params() {
  ::bedrock::proxy::BedRockKvMGetParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockKvMGetRequest.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetParam >&
BedRockKvMGetRequest::params() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockKvMGetRequest.params)
  return _impl_.params_;
}

// -------------------------------------------------------------------

// BedRockKvMGetKvRetPair

// bytes key = 1;
inline void BedRockKvMGetKvRetPair::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& BedRockKvMGetKvRetPair::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetKvRetPair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvMGetKvRetPair::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetKvRetPair.key)
}
inline std::string* BedRockKvMGetKvRetPair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetKvRetPair.key)
  return _s;
}
inline const std::string& BedRockKvMGetKvRetPair::_internal_key() const {
  return _impl_.key_.Get();
}
inline void BedRockKvMGetKvRetPair::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvMGetKvRetPair::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvMGetKvRetPair::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMGetKvRetPair.key)
  return _impl_.key_.Release();
}
inline void BedRockKvMGetKvRetPair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMGetKvRetPair.key)
}

// bytes value = 2;
inline void BedRockKvMGetKvRetPair::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& BedRockKvMGetKvRetPair::value() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetKvRetPair.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvMGetKvRetPair::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetKvRetPair.value)
}
inline std::string* BedRockKvMGetKvRetPair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetKvRetPair.value)
  return _s;
}
inline const std::string& BedRockKvMGetKvRetPair::_internal_value() const {
  return _impl_.value_.Get();
}
inline void BedRockKvMGetKvRetPair::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvMGetKvRetPair::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvMGetKvRetPair::release_value() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMGetKvRetPair.value)
  return _impl_.value_.Release();
}
inline void BedRockKvMGetKvRetPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMGetKvRetPair.value)
}

// -------------------------------------------------------------------

// BedRockKvMGetResponse

// repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
inline int BedRockKvMGetResponse::_internal_kvs_size() const {
  return _impl_.kvs_.size();
}
inline int BedRockKvMGetResponse::kvs_size() const {
  return _internal_kvs_size();
}
inline void BedRockKvMGetResponse::clear_kvs() {
  _impl_.kvs_.Clear();
}
inline ::bedrock::proxy::BedRockKvMGetKvRetPair* BedRockKvMGetResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return _impl_.kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair >*
BedRockKvMGetResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return &_impl_.kvs_;
}
inline const ::bedrock::proxy::BedRockKvMGetKvRetPair& BedRockKvMGetResponse::_internal_kvs(int index) const {
  return _impl_.kvs_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvMGetKvRetPair& BedRockKvMGetResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return _internal_kvs(index);
}
inline ::bedrock::proxy::BedRockKvMGetKvRetPair* BedRockKvMGetResponse::_internal_add_kvs() {
  return _impl_.kvs_.Add();
}
inline ::bedrock::proxy::BedRockKvMGetKvRetPair* BedRockKvMGetResponse::add_kvs() {
  ::bedrock::proxy::BedRockKvMGetKvRetPair* _add = _internal_add_kvs();
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMGetKvRetPair >&
BedRockKvMGetResponse::kvs() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockKvMGetResponse.kvs)
  return _impl_.kvs_;
}

// .bedrock.proxy.Error err = 255;
inline void BedRockKvMGetResponse::clear_err() {
  _impl_.err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvMGetResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(_impl_.err_);
}
inline ::bedrock::proxy::Error BedRockKvMGetResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMGetResponse.err)
  return _internal_err();
}
inline void BedRockKvMGetResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  _impl_.err_ = value;
}
inline void BedRockKvMGetResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMGetResponse.err)
}

// -------------------------------------------------------------------

// BedRockKvMDeleteParam

// bytes key = 1;
inline void BedRockKvMDeleteParam::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& BedRockKvMDeleteParam::key() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMDeleteParam.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BedRockKvMDeleteParam::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMDeleteParam.key)
}
inline std::string* BedRockKvMDeleteParam::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMDeleteParam.key)
  return _s;
}
inline const std::string& BedRockKvMDeleteParam::_internal_key() const {
  return _impl_.key_.Get();
}
inline void BedRockKvMDeleteParam::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* BedRockKvMDeleteParam::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* BedRockKvMDeleteParam::release_key() {
  // @@protoc_insertion_point(field_release:bedrock.proxy.BedRockKvMDeleteParam.key)
  return _impl_.key_.Release();
}
inline void BedRockKvMDeleteParam::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bedrock.proxy.BedRockKvMDeleteParam.key)
}

// -------------------------------------------------------------------

// BedRockKvMDeleteRequest

// uint32 storage_id = 1;
inline void BedRockKvMDeleteRequest::clear_storage_id() {
  _impl_.storage_id_ = 0u;
}
inline uint32_t BedRockKvMDeleteRequest::_internal_storage_id() const {
  return _impl_.storage_id_;
}
inline uint32_t BedRockKvMDeleteRequest::storage_id() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMDeleteRequest.storage_id)
  return _internal_storage_id();
}
inline void BedRockKvMDeleteRequest::_internal_set_storage_id(uint32_t value) {
  
  _impl_.storage_id_ = value;
}
inline void BedRockKvMDeleteRequest::set_storage_id(uint32_t value) {
  _internal_set_storage_id(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMDeleteRequest.storage_id)
}

// repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
inline int BedRockKvMDeleteRequest::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int BedRockKvMDeleteRequest::params_size() const {
  return _internal_params_size();
}
inline void BedRockKvMDeleteRequest::clear_params() {
  _impl_.params_.Clear();
}
inline ::bedrock::proxy::BedRockKvMDeleteParam* BedRockKvMDeleteRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam >*
BedRockKvMDeleteRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return &_impl_.params_;
}
inline const ::bedrock::proxy::BedRockKvMDeleteParam& BedRockKvMDeleteRequest::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::bedrock::proxy::BedRockKvMDeleteParam& BedRockKvMDeleteRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return _internal_params(index);
}
inline ::bedrock::proxy::BedRockKvMDeleteParam* BedRockKvMDeleteRequest::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::bedrock::proxy::BedRockKvMDeleteParam* BedRockKvMDeleteRequest::add_params() {
  ::bedrock::proxy::BedRockKvMDeleteParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bedrock::proxy::BedRockKvMDeleteParam >&
BedRockKvMDeleteRequest::params() const {
  // @@protoc_insertion_point(field_list:bedrock.proxy.BedRockKvMDeleteRequest.params)
  return _impl_.params_;
}

// -------------------------------------------------------------------

// BedRockKvMDeleteResponse

// .bedrock.proxy.Error err = 255;
inline void BedRockKvMDeleteResponse::clear_err() {
  _impl_.err_ = 0;
}
inline ::bedrock::proxy::Error BedRockKvMDeleteResponse::_internal_err() const {
  return static_cast< ::bedrock::proxy::Error >(_impl_.err_);
}
inline ::bedrock::proxy::Error BedRockKvMDeleteResponse::err() const {
  // @@protoc_insertion_point(field_get:bedrock.proxy.BedRockKvMDeleteResponse.err)
  return _internal_err();
}
inline void BedRockKvMDeleteResponse::_internal_set_err(::bedrock::proxy::Error value) {
  
  _impl_.err_ = value;
}
inline void BedRockKvMDeleteResponse::set_err(::bedrock::proxy::Error value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:bedrock.proxy.BedRockKvMDeleteResponse.err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proxy
}  // namespace bedrock

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bedrock::proxy::Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bedrock::proxy::Error>() {
  return ::bedrock::proxy::Error_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
