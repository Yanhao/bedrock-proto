// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#include "proxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bedrock {
namespace proxy {
PROTOBUF_CONSTEXPR TxRecord::TxRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.record_locks_)*/{}
  , /*decltype(_impl_.range_locks_)*/{}
  , /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.heartbeat_ts_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxRecordDefaultTypeInternal() {}
  union {
    TxRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxRecordDefaultTypeInternal _TxRecord_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvGetRequest::BedRockKvGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvGetRequestDefaultTypeInternal() {}
  union {
    BedRockKvGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvGetRequestDefaultTypeInternal _BedRockKvGetRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvGetResponse::BedRockKvGetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvGetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvGetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvGetResponseDefaultTypeInternal() {}
  union {
    BedRockKvGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvGetResponseDefaultTypeInternal _BedRockKvGetResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvSetRequest::BedRockKvSetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvSetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvSetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvSetRequestDefaultTypeInternal() {}
  union {
    BedRockKvSetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvSetRequestDefaultTypeInternal _BedRockKvSetRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvSetResponse::BedRockKvSetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvSetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvSetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvSetResponseDefaultTypeInternal() {}
  union {
    BedRockKvSetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvSetResponseDefaultTypeInternal _BedRockKvSetResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvDeleteRequest::BedRockKvDeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvDeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvDeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvDeleteRequestDefaultTypeInternal() {}
  union {
    BedRockKvDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvDeleteRequestDefaultTypeInternal _BedRockKvDeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvDeleteResponse::BedRockKvDeleteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvDeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvDeleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvDeleteResponseDefaultTypeInternal() {}
  union {
    BedRockKvDeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvDeleteResponseDefaultTypeInternal _BedRockKvDeleteResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMSetParam::BedRockKvMSetParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMSetParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMSetParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMSetParamDefaultTypeInternal() {}
  union {
    BedRockKvMSetParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMSetParamDefaultTypeInternal _BedRockKvMSetParam_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMSetRequest::BedRockKvMSetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMSetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMSetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMSetRequestDefaultTypeInternal() {}
  union {
    BedRockKvMSetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMSetRequestDefaultTypeInternal _BedRockKvMSetRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMSetResponse::BedRockKvMSetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMSetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMSetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMSetResponseDefaultTypeInternal() {}
  union {
    BedRockKvMSetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMSetResponseDefaultTypeInternal _BedRockKvMSetResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMGetParam::BedRockKvMGetParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMGetParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMGetParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMGetParamDefaultTypeInternal() {}
  union {
    BedRockKvMGetParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMGetParamDefaultTypeInternal _BedRockKvMGetParam_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMGetRequest::BedRockKvMGetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMGetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMGetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMGetRequestDefaultTypeInternal() {}
  union {
    BedRockKvMGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMGetRequestDefaultTypeInternal _BedRockKvMGetRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMGetKvRetPair::BedRockKvMGetKvRetPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMGetKvRetPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMGetKvRetPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMGetKvRetPairDefaultTypeInternal() {}
  union {
    BedRockKvMGetKvRetPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMGetKvRetPairDefaultTypeInternal _BedRockKvMGetKvRetPair_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMGetResponse::BedRockKvMGetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kvs_)*/{}
  , /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMGetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMGetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMGetResponseDefaultTypeInternal() {}
  union {
    BedRockKvMGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMGetResponseDefaultTypeInternal _BedRockKvMGetResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMDeleteParam::BedRockKvMDeleteParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMDeleteParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMDeleteParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMDeleteParamDefaultTypeInternal() {}
  union {
    BedRockKvMDeleteParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMDeleteParamDefaultTypeInternal _BedRockKvMDeleteParam_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMDeleteRequest::BedRockKvMDeleteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMDeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMDeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMDeleteRequestDefaultTypeInternal() {}
  union {
    BedRockKvMDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMDeleteRequestDefaultTypeInternal _BedRockKvMDeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvMDeleteResponse::BedRockKvMDeleteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvMDeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvMDeleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvMDeleteResponseDefaultTypeInternal() {}
  union {
    BedRockKvMDeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvMDeleteResponseDefaultTypeInternal _BedRockKvMDeleteResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockStartScanRequest::BedRockStartScanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockStartScanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockStartScanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockStartScanRequestDefaultTypeInternal() {}
  union {
    BedRockStartScanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockStartScanRequestDefaultTypeInternal _BedRockStartScanRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockStartScanResponse::BedRockStartScanResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iterator_id_)*/uint64_t{0u}
  , /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockStartScanResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockStartScanResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockStartScanResponseDefaultTypeInternal() {}
  union {
    BedRockStartScanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockStartScanResponseDefaultTypeInternal _BedRockStartScanResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockStopScanRequest::BedRockStopScanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iterator_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockStopScanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockStopScanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockStopScanRequestDefaultTypeInternal() {}
  union {
    BedRockStopScanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockStopScanRequestDefaultTypeInternal _BedRockStopScanRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockStopScanResponse::BedRockStopScanResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockStopScanResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockStopScanResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockStopScanResponseDefaultTypeInternal() {}
  union {
    BedRockStopScanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockStopScanResponseDefaultTypeInternal _BedRockStopScanResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockDoScanRequest::BedRockDoScanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iterator_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockDoScanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockDoScanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockDoScanRequestDefaultTypeInternal() {}
  union {
    BedRockDoScanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockDoScanRequestDefaultTypeInternal _BedRockDoScanRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockKvPair::BedRockKvPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockKvPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockKvPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockKvPairDefaultTypeInternal() {}
  union {
    BedRockKvPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockKvPairDefaultTypeInternal _BedRockKvPair_default_instance_;
PROTOBUF_CONSTEXPR BedRockDoScanResponse::BedRockDoScanResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kvs_)*/{}
  , /*decltype(_impl_.no_left_)*/false
  , /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockDoScanResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockDoScanResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockDoScanResponseDefaultTypeInternal() {}
  union {
    BedRockDoScanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockDoScanResponseDefaultTypeInternal _BedRockDoScanResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockTxRecordLock::BedRockTxRecordLock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lock_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockTxRecordLockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockTxRecordLockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockTxRecordLockDefaultTypeInternal() {}
  union {
    BedRockTxRecordLock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockTxRecordLockDefaultTypeInternal _BedRockTxRecordLock_default_instance_;
PROTOBUF_CONSTEXPR BedRockTxRangeLock::BedRockTxRangeLock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lock_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockTxRangeLockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockTxRangeLockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockTxRangeLockDefaultTypeInternal() {}
  union {
    BedRockTxRangeLock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockTxRangeLockDefaultTypeInternal _BedRockTxRangeLock_default_instance_;
PROTOBUF_CONSTEXPR BedRockStartTxRequest::BedRockStartTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.record_locks_)*/{}
  , /*decltype(_impl_.range_locks_)*/{}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockStartTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockStartTxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockStartTxRequestDefaultTypeInternal() {}
  union {
    BedRockStartTxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockStartTxRequestDefaultTypeInternal _BedRockStartTxRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockStartTxResponse::BedRockStartTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockStartTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockStartTxResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockStartTxResponseDefaultTypeInternal() {}
  union {
    BedRockStartTxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockStartTxResponseDefaultTypeInternal _BedRockStartTxResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockCommitTxRequest::BedRockCommitTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockCommitTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockCommitTxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockCommitTxRequestDefaultTypeInternal() {}
  union {
    BedRockCommitTxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockCommitTxRequestDefaultTypeInternal _BedRockCommitTxRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockCommitTxResponse::BedRockCommitTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockCommitTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockCommitTxResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockCommitTxResponseDefaultTypeInternal() {}
  union {
    BedRockCommitTxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockCommitTxResponseDefaultTypeInternal _BedRockCommitTxResponse_default_instance_;
PROTOBUF_CONSTEXPR BedRockRollbackTxRequest::BedRockRollbackTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_id_)*/uint64_t{0u}
  , /*decltype(_impl_.storage_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockRollbackTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockRollbackTxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockRollbackTxRequestDefaultTypeInternal() {}
  union {
    BedRockRollbackTxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockRollbackTxRequestDefaultTypeInternal _BedRockRollbackTxRequest_default_instance_;
PROTOBUF_CONSTEXPR BedRockRollbackTxResponse::BedRockRollbackTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BedRockRollbackTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BedRockRollbackTxResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BedRockRollbackTxResponseDefaultTypeInternal() {}
  union {
    BedRockRollbackTxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BedRockRollbackTxResponseDefaultTypeInternal _BedRockRollbackTxResponse_default_instance_;
}  // namespace proxy
}  // namespace bedrock
static ::_pb::Metadata file_level_metadata_proxy_2eproto[32];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proxy_2eproto[3];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_proxy_2eproto[1];

const uint32_t TableStruct_proxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, _impl_.heartbeat_ts_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, _impl_.record_locks_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, _impl_.range_locks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetResponse, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetRequest, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetParam, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetParam, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetParam, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetKvRetPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetKvRetPair, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetKvRetPair, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetResponse, _impl_.kvs_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteParam, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteRequest, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, _impl_.start_key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, _impl_.end_key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanResponse, _impl_.iterator_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStopScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStopScanRequest, _impl_.iterator_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStopScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStopScanResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanRequest, _impl_.iterator_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvPair, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvPair, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanResponse, _impl_.kvs_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanResponse, _impl_.no_left_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRecordLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRecordLock, _impl_.lock_type_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRecordLock, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRangeLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRangeLock, _impl_.lock_type_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRangeLock, _impl_.start_key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRangeLock, _impl_.end_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxRequest, _impl_.record_locks_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxRequest, _impl_.range_locks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxResponse, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxRequest, _impl_.tx_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxResponse, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxRequest, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxRequest, _impl_.tx_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxResponse, _impl_.err_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bedrock::proxy::TxRecord)},
  { 12, -1, -1, sizeof(::bedrock::proxy::BedRockKvGetRequest)},
  { 20, -1, -1, sizeof(::bedrock::proxy::BedRockKvGetResponse)},
  { 28, -1, -1, sizeof(::bedrock::proxy::BedRockKvSetRequest)},
  { 37, -1, -1, sizeof(::bedrock::proxy::BedRockKvSetResponse)},
  { 44, -1, -1, sizeof(::bedrock::proxy::BedRockKvDeleteRequest)},
  { 52, -1, -1, sizeof(::bedrock::proxy::BedRockKvDeleteResponse)},
  { 59, -1, -1, sizeof(::bedrock::proxy::BedRockKvMSetParam)},
  { 67, -1, -1, sizeof(::bedrock::proxy::BedRockKvMSetRequest)},
  { 75, -1, -1, sizeof(::bedrock::proxy::BedRockKvMSetResponse)},
  { 82, -1, -1, sizeof(::bedrock::proxy::BedRockKvMGetParam)},
  { 89, -1, -1, sizeof(::bedrock::proxy::BedRockKvMGetRequest)},
  { 97, -1, -1, sizeof(::bedrock::proxy::BedRockKvMGetKvRetPair)},
  { 105, -1, -1, sizeof(::bedrock::proxy::BedRockKvMGetResponse)},
  { 113, -1, -1, sizeof(::bedrock::proxy::BedRockKvMDeleteParam)},
  { 120, -1, -1, sizeof(::bedrock::proxy::BedRockKvMDeleteRequest)},
  { 128, -1, -1, sizeof(::bedrock::proxy::BedRockKvMDeleteResponse)},
  { 135, -1, -1, sizeof(::bedrock::proxy::BedRockStartScanRequest)},
  { 145, -1, -1, sizeof(::bedrock::proxy::BedRockStartScanResponse)},
  { 153, -1, -1, sizeof(::bedrock::proxy::BedRockStopScanRequest)},
  { 160, -1, -1, sizeof(::bedrock::proxy::BedRockStopScanResponse)},
  { 167, -1, -1, sizeof(::bedrock::proxy::BedRockDoScanRequest)},
  { 174, -1, -1, sizeof(::bedrock::proxy::BedRockKvPair)},
  { 182, -1, -1, sizeof(::bedrock::proxy::BedRockDoScanResponse)},
  { 191, -1, -1, sizeof(::bedrock::proxy::BedRockTxRecordLock)},
  { 199, -1, -1, sizeof(::bedrock::proxy::BedRockTxRangeLock)},
  { 208, -1, -1, sizeof(::bedrock::proxy::BedRockStartTxRequest)},
  { 217, -1, -1, sizeof(::bedrock::proxy::BedRockStartTxResponse)},
  { 225, -1, -1, sizeof(::bedrock::proxy::BedRockCommitTxRequest)},
  { 233, -1, -1, sizeof(::bedrock::proxy::BedRockCommitTxResponse)},
  { 240, -1, -1, sizeof(::bedrock::proxy::BedRockRollbackTxRequest)},
  { 248, -1, -1, sizeof(::bedrock::proxy::BedRockRollbackTxResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bedrock::proxy::_TxRecord_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvGetRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvGetResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvSetRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvSetResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvDeleteRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvDeleteResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMSetParam_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMSetRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMSetResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMGetParam_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMGetRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMGetKvRetPair_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMGetResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMDeleteParam_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMDeleteRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvMDeleteResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockStartScanRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockStartScanResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockStopScanRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockStopScanResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockDoScanRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockKvPair_default_instance_._instance,
  &::bedrock::proxy::_BedRockDoScanResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockTxRecordLock_default_instance_._instance,
  &::bedrock::proxy::_BedRockTxRangeLock_default_instance_._instance,
  &::bedrock::proxy::_BedRockStartTxRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockStartTxResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockCommitTxRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockCommitTxResponse_default_instance_._instance,
  &::bedrock::proxy::_BedRockRollbackTxRequest_default_instance_._instance,
  &::bedrock::proxy::_BedRockRollbackTxResponse_default_instance_._instance,
};

const char descriptor_table_protodef_proxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013proxy.proto\022\rbedrock.proxy\"\336\001\n\010TxRecor"
  "d\022\022\n\nstorage_id\030\001 \001(\r\022\r\n\005tx_id\030\002 \001(\004\022\'\n\006"
  "status\030\003 \001(\0162\027.bedrock.proxy.TxStatus\022\024\n"
  "\014heartbeat_ts\030\004 \001(\004\0228\n\014record_locks\030\005 \003("
  "\0132\".bedrock.proxy.BedRockTxRecordLock\0226\n"
  "\013range_locks\030\006 \003(\0132!.bedrock.proxy.BedRo"
  "ckTxRangeLock\"6\n\023BedRockKvGetRequest\022\022\n\n"
  "storage_id\030\001 \001(\r\022\013\n\003key\030\002 \001(\014\"I\n\024BedRock"
  "KvGetResponse\022\r\n\005value\030\001 \001(\014\022\"\n\003err\030\377\001 \001"
  "(\0162\024.bedrock.proxy.Error\"E\n\023BedRockKvSet"
  "Request\022\022\n\nstorage_id\030\001 \001(\r\022\013\n\003key\030\002 \001(\014"
  "\022\r\n\005value\030\003 \001(\014\":\n\024BedRockKvSetResponse\022"
  "\"\n\003err\030\377\001 \001(\0162\024.bedrock.proxy.Error\"9\n\026B"
  "edRockKvDeleteRequest\022\022\n\nstorage_id\030\001 \001("
  "\r\022\013\n\003key\030\002 \001(\014\"=\n\027BedRockKvDeleteRespons"
  "e\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.proxy.Error\"0\n"
  "\022BedRockKvMSetParam\022\013\n\003key\030\001 \001(\014\022\r\n\005valu"
  "e\030\002 \001(\014\"]\n\024BedRockKvMSetRequest\022\022\n\nstora"
  "ge_id\030\001 \001(\r\0221\n\006params\030\002 \003(\0132!.bedrock.pr"
  "oxy.BedRockKvMSetParam\";\n\025BedRockKvMSetR"
  "esponse\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.proxy.Er"
  "ror\"!\n\022BedRockKvMGetParam\022\013\n\003key\030\001 \001(\014\"]"
  "\n\024BedRockKvMGetRequest\022\022\n\nstorage_id\030\001 \001"
  "(\r\0221\n\006params\030\002 \003(\0132!.bedrock.proxy.BedRo"
  "ckKvMGetParam\"4\n\026BedRockKvMGetKvRetPair\022"
  "\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"o\n\025BedRockKv"
  "MGetResponse\0222\n\003kvs\030\001 \003(\0132%.bedrock.prox"
  "y.BedRockKvMGetKvRetPair\022\"\n\003err\030\377\001 \001(\0162\024"
  ".bedrock.proxy.Error\"$\n\025BedRockKvMDelete"
  "Param\022\013\n\003key\030\001 \001(\014\"c\n\027BedRockKvMDeleteRe"
  "quest\022\022\n\nstorage_id\030\001 \001(\r\0224\n\006params\030\002 \003("
  "\0132$.bedrock.proxy.BedRockKvMDeleteParam\""
  ">\n\030BedRockKvMDeleteResponse\022\"\n\003err\030\377\001 \001("
  "\0162\024.bedrock.proxy.Error\"`\n\027BedRockStartS"
  "canRequest\022\022\n\nstorage_id\030\001 \001(\r\022\021\n\tstart_"
  "key\030\002 \001(\014\022\017\n\007end_key\030\003 \001(\014\022\r\n\005limit\030\004 \001("
  "\005\"S\n\030BedRockStartScanResponse\022\023\n\013iterato"
  "r_id\030\001 \001(\004\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.proxy"
  ".Error\"-\n\026BedRockStopScanRequest\022\023\n\013iter"
  "ator_id\030\001 \001(\004\"=\n\027BedRockStopScanResponse"
  "\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.proxy.Error\"+\n\024"
  "BedRockDoScanRequest\022\023\n\013iterator_id\030\001 \001("
  "\004\"+\n\rBedRockKvPair\022\013\n\003key\030\001 \001(\014\022\r\n\005value"
  "\030\002 \001(\014\"w\n\025BedRockDoScanResponse\022)\n\003kvs\030\001"
  " \003(\0132\034.bedrock.proxy.BedRockKvPair\022\017\n\007no"
  "_left\030\002 \001(\010\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.prox"
  "y.Error\"W\n\023BedRockTxRecordLock\0223\n\tlock_t"
  "ype\030\001 \001(\0162 .bedrock.proxy.BedRockTxLockT"
  "ype\022\013\n\003key\030\002 \001(\014\"m\n\022BedRockTxRangeLock\0223"
  "\n\tlock_type\030\001 \001(\0162 .bedrock.proxy.BedRoc"
  "kTxLockType\022\021\n\tstart_key\030\002 \001(\014\022\017\n\007end_ke"
  "y\030\003 \001(\014\"\235\001\n\025BedRockStartTxRequest\022\022\n\nsto"
  "rage_id\030\001 \001(\r\0228\n\014record_locks\030\002 \003(\0132\".be"
  "drock.proxy.BedRockTxRecordLock\0226\n\013range"
  "_locks\030\003 \003(\0132!.bedrock.proxy.BedRockTxRa"
  "ngeLock\"K\n\026BedRockStartTxResponse\022\r\n\005tx_"
  "id\030\001 \001(\004\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.proxy.E"
  "rror\";\n\026BedRockCommitTxRequest\022\022\n\nstorag"
  "e_id\030\001 \001(\r\022\r\n\005tx_id\030\002 \001(\004\"=\n\027BedRockComm"
  "itTxResponse\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.pro"
  "xy.Error\"=\n\030BedRockRollbackTxRequest\022\022\n\n"
  "storage_id\030\001 \001(\r\022\r\n\005tx_id\030\002 \001(\004\"\?\n\031BedRo"
  "ckRollbackTxResponse\022\"\n\003err\030\377\001 \001(\0162\024.bed"
  "rock.proxy.Error*#\n\010TxStatus\022\t\n\005START\020\000\022"
  "\014\n\010FINISHED\020\001*F\n\005Error\022\006\n\002OK\020\000\022\017\n\013NO_SUC"
  "H_KEY\020\001\022\026\n\022INVLIAD_PARAMETERS\020\002\022\014\n\007UNKNO"
  "WN\020\377\001*.\n\021BedRockTxLockType\022\n\n\006SHARED\020\000\022\r"
  "\n\tEXCLUSIVE\020\0012\213\t\n\014ProxyService\022W\n\014BedRoc"
  "kKvSet\022\".bedrock.proxy.BedRockKvSetReque"
  "st\032#.bedrock.proxy.BedRockKvSetResponse\022"
  "W\n\014BedRockKvGet\022\".bedrock.proxy.BedRockK"
  "vGetRequest\032#.bedrock.proxy.BedRockKvGet"
  "Response\022`\n\017BedRockKvDelete\022%.bedrock.pr"
  "oxy.BedRockKvDeleteRequest\032&.bedrock.pro"
  "xy.BedRockKvDeleteResponse\022Z\n\rBedRockKvM"
  "Set\022#.bedrock.proxy.BedRockKvMSetRequest"
  "\032$.bedrock.proxy.BedRockKvMSetResponse\022Z"
  "\n\rBedRockKvMGet\022#.bedrock.proxy.BedRockK"
  "vMGetRequest\032$.bedrock.proxy.BedRockKvMG"
  "etResponse\022c\n\020BedRockKvMDelete\022&.bedrock"
  ".proxy.BedRockKvMDeleteRequest\032\'.bedrock"
  ".proxy.BedRockKvMDeleteResponse\022c\n\020BedRo"
  "ckStartScan\022&.bedrock.proxy.BedRockStart"
  "ScanRequest\032\'.bedrock.proxy.BedRockStart"
  "ScanResponse\022`\n\017BedRockStopScan\022%.bedroc"
  "k.proxy.BedRockStopScanRequest\032&.bedrock"
  ".proxy.BedRockStopScanResponse\022Z\n\rBedRoc"
  "kDoScan\022#.bedrock.proxy.BedRockDoScanReq"
  "uest\032$.bedrock.proxy.BedRockDoScanRespon"
  "se\022]\n\016BedRockStartTx\022$.bedrock.proxy.Bed"
  "RockStartTxRequest\032%.bedrock.proxy.BedRo"
  "ckStartTxResponse\022`\n\017BedRockCommitTx\022%.b"
  "edrock.proxy.BedRockCommitTxRequest\032&.be"
  "drock.proxy.BedRockCommitTxResponse\022f\n\021B"
  "edRockRollbackTx\022\'.bedrock.proxy.BedRock"
  "RollbackTxRequest\032(.bedrock.proxy.BedRoc"
  "kRollbackTxResponseB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proxy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proxy_2eproto = {
    false, false, 3872, descriptor_table_protodef_proxy_2eproto,
    "proxy.proto",
    &descriptor_table_proxy_2eproto_once, nullptr, 0, 32,
    schemas, file_default_instances, TableStruct_proxy_2eproto::offsets,
    file_level_metadata_proxy_2eproto, file_level_enum_descriptors_proxy_2eproto,
    file_level_service_descriptors_proxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proxy_2eproto_getter() {
  return &descriptor_table_proxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proxy_2eproto(&descriptor_table_proxy_2eproto);
namespace bedrock {
namespace proxy {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proxy_2eproto);
  return file_level_enum_descriptors_proxy_2eproto[0];
}
bool TxStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proxy_2eproto);
  return file_level_enum_descriptors_proxy_2eproto[1];
}
bool Error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BedRockTxLockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proxy_2eproto);
  return file_level_enum_descriptors_proxy_2eproto[2];
}
bool BedRockTxLockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TxRecord::_Internal {
 public:
};

TxRecord::TxRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.TxRecord)
}
TxRecord::TxRecord(const TxRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.record_locks_){from._impl_.record_locks_}
    , decltype(_impl_.range_locks_){from._impl_.range_locks_}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.storage_id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.heartbeat_ts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heartbeat_ts_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.heartbeat_ts_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.TxRecord)
}

inline void TxRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.record_locks_){arena}
    , decltype(_impl_.range_locks_){arena}
    , decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.storage_id_){0u}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.heartbeat_ts_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxRecord::~TxRecord() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.TxRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.record_locks_.~RepeatedPtrField();
  _impl_.range_locks_.~RepeatedPtrField();
}

void TxRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.TxRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.record_locks_.Clear();
  _impl_.range_locks_.Clear();
  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.heartbeat_ts_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.heartbeat_ts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bedrock.proxy.TxStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bedrock::proxy::TxStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 heartbeat_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.heartbeat_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_locks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_locks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.TxRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint64 tx_id = 2;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tx_id(), target);
  }

  // .bedrock.proxy.TxStatus status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // uint64 heartbeat_ts = 4;
  if (this->_internal_heartbeat_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_heartbeat_ts(), target);
  }

  // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_locks_size()); i < n; i++) {
    const auto& repfield = this->_internal_record_locks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_locks_size()); i < n; i++) {
    const auto& repfield = this->_internal_range_locks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.TxRecord)
  return target;
}

size_t TxRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.TxRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 5;
  total_size += 1UL * this->_internal_record_locks_size();
  for (const auto& msg : this->_impl_.record_locks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 6;
  total_size += 1UL * this->_internal_range_locks_size();
  for (const auto& msg : this->_impl_.range_locks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 tx_id = 2;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  // .bedrock.proxy.TxStatus status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint64 heartbeat_ts = 4;
  if (this->_internal_heartbeat_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_heartbeat_ts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxRecord::GetClassData() const { return &_class_data_; }


void TxRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxRecord*>(&to_msg);
  auto& from = static_cast<const TxRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.TxRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.record_locks_.MergeFrom(from._impl_.record_locks_);
  _this->_impl_.range_locks_.MergeFrom(from._impl_.range_locks_);
  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_heartbeat_ts() != 0) {
    _this->_internal_set_heartbeat_ts(from._internal_heartbeat_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxRecord::CopyFrom(const TxRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.TxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRecord::IsInitialized() const {
  return true;
}

void TxRecord::InternalSwap(TxRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.record_locks_.InternalSwap(&other->_impl_.record_locks_);
  _impl_.range_locks_.InternalSwap(&other->_impl_.range_locks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxRecord, _impl_.heartbeat_ts_)
      + sizeof(TxRecord::_impl_.heartbeat_ts_)
      - PROTOBUF_FIELD_OFFSET(TxRecord, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[0]);
}

// ===================================================================

class BedRockKvGetRequest::_Internal {
 public:
};

BedRockKvGetRequest::BedRockKvGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvGetRequest)
}
BedRockKvGetRequest::BedRockKvGetRequest(const BedRockKvGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvGetRequest)
}

inline void BedRockKvGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvGetRequest::~BedRockKvGetRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void BedRockKvGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvGetRequest)
  return target;
}

size_t BedRockKvGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvGetRequest::GetClassData() const { return &_class_data_; }


void BedRockKvGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvGetRequest*>(&to_msg);
  auto& from = static_cast<const BedRockKvGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvGetRequest::CopyFrom(const BedRockKvGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvGetRequest::IsInitialized() const {
  return true;
}

void BedRockKvGetRequest::InternalSwap(BedRockKvGetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.storage_id_, other->_impl_.storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[1]);
}

// ===================================================================

class BedRockKvGetResponse::_Internal {
 public:
};

BedRockKvGetResponse::BedRockKvGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvGetResponse)
}
BedRockKvGetResponse::BedRockKvGetResponse(const BedRockKvGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvGetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvGetResponse)
}

inline void BedRockKvGetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvGetResponse::~BedRockKvGetResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvGetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void BedRockKvGetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvGetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvGetResponse)
  return target;
}

size_t BedRockKvGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvGetResponse::GetClassData() const { return &_class_data_; }


void BedRockKvGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvGetResponse*>(&to_msg);
  auto& from = static_cast<const BedRockKvGetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvGetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvGetResponse::CopyFrom(const BedRockKvGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvGetResponse::IsInitialized() const {
  return true;
}

void BedRockKvGetResponse::InternalSwap(BedRockKvGetResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvGetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[2]);
}

// ===================================================================

class BedRockKvSetRequest::_Internal {
 public:
};

BedRockKvSetRequest::BedRockKvSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvSetRequest)
}
BedRockKvSetRequest::BedRockKvSetRequest(const BedRockKvSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvSetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvSetRequest)
}

inline void BedRockKvSetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvSetRequest::~BedRockKvSetRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvSetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void BedRockKvSetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvSetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvSetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvSetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvSetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvSetRequest)
  return target;
}

size_t BedRockKvSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvSetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvSetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvSetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvSetRequest::GetClassData() const { return &_class_data_; }


void BedRockKvSetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvSetRequest*>(&to_msg);
  auto& from = static_cast<const BedRockKvSetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvSetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvSetRequest::CopyFrom(const BedRockKvSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvSetRequest::IsInitialized() const {
  return true;
}

void BedRockKvSetRequest::InternalSwap(BedRockKvSetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.storage_id_, other->_impl_.storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvSetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[3]);
}

// ===================================================================

class BedRockKvSetResponse::_Internal {
 public:
};

BedRockKvSetResponse::BedRockKvSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvSetResponse)
}
BedRockKvSetResponse::BedRockKvSetResponse(const BedRockKvSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvSetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvSetResponse)
}

inline void BedRockKvSetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockKvSetResponse::~BedRockKvSetResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvSetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvSetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockKvSetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvSetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvSetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvSetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvSetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvSetResponse)
  return target;
}

size_t BedRockKvSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvSetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvSetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvSetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvSetResponse::GetClassData() const { return &_class_data_; }


void BedRockKvSetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvSetResponse*>(&to_msg);
  auto& from = static_cast<const BedRockKvSetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvSetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvSetResponse::CopyFrom(const BedRockKvSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvSetResponse::IsInitialized() const {
  return true;
}

void BedRockKvSetResponse::InternalSwap(BedRockKvSetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvSetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[4]);
}

// ===================================================================

class BedRockKvDeleteRequest::_Internal {
 public:
};

BedRockKvDeleteRequest::BedRockKvDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvDeleteRequest)
}
BedRockKvDeleteRequest::BedRockKvDeleteRequest(const BedRockKvDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvDeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvDeleteRequest)
}

inline void BedRockKvDeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvDeleteRequest::~BedRockKvDeleteRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvDeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void BedRockKvDeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvDeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvDeleteRequest)
  return target;
}

size_t BedRockKvDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvDeleteRequest::GetClassData() const { return &_class_data_; }


void BedRockKvDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvDeleteRequest*>(&to_msg);
  auto& from = static_cast<const BedRockKvDeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvDeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvDeleteRequest::CopyFrom(const BedRockKvDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvDeleteRequest::IsInitialized() const {
  return true;
}

void BedRockKvDeleteRequest::InternalSwap(BedRockKvDeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.storage_id_, other->_impl_.storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvDeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[5]);
}

// ===================================================================

class BedRockKvDeleteResponse::_Internal {
 public:
};

BedRockKvDeleteResponse::BedRockKvDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvDeleteResponse)
}
BedRockKvDeleteResponse::BedRockKvDeleteResponse(const BedRockKvDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvDeleteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvDeleteResponse)
}

inline void BedRockKvDeleteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockKvDeleteResponse::~BedRockKvDeleteResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvDeleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockKvDeleteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvDeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvDeleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvDeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvDeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvDeleteResponse)
  return target;
}

size_t BedRockKvDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvDeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvDeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvDeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvDeleteResponse::GetClassData() const { return &_class_data_; }


void BedRockKvDeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvDeleteResponse*>(&to_msg);
  auto& from = static_cast<const BedRockKvDeleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvDeleteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvDeleteResponse::CopyFrom(const BedRockKvDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvDeleteResponse::IsInitialized() const {
  return true;
}

void BedRockKvDeleteResponse::InternalSwap(BedRockKvDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvDeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[6]);
}

// ===================================================================

class BedRockKvMSetParam::_Internal {
 public:
};

BedRockKvMSetParam::BedRockKvMSetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMSetParam)
}
BedRockKvMSetParam::BedRockKvMSetParam(const BedRockKvMSetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMSetParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMSetParam)
}

inline void BedRockKvMSetParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvMSetParam::~BedRockKvMSetParam() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMSetParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMSetParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void BedRockKvMSetParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMSetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMSetParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMSetParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMSetParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMSetParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMSetParam)
  return target;
}

size_t BedRockKvMSetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMSetParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMSetParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMSetParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMSetParam::GetClassData() const { return &_class_data_; }


void BedRockKvMSetParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMSetParam*>(&to_msg);
  auto& from = static_cast<const BedRockKvMSetParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMSetParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMSetParam::CopyFrom(const BedRockKvMSetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMSetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMSetParam::IsInitialized() const {
  return true;
}

void BedRockKvMSetParam::InternalSwap(BedRockKvMSetParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMSetParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[7]);
}

// ===================================================================

class BedRockKvMSetRequest::_Internal {
 public:
};

BedRockKvMSetRequest::BedRockKvMSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMSetRequest)
}
BedRockKvMSetRequest::BedRockKvMSetRequest(const BedRockKvMSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMSetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMSetRequest)
}

inline void BedRockKvMSetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockKvMSetRequest::~BedRockKvMSetRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMSetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
}

void BedRockKvMSetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMSetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMSetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMSetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMSetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMSetRequest)
  return target;
}

size_t BedRockKvMSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMSetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMSetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMSetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMSetRequest::GetClassData() const { return &_class_data_; }


void BedRockKvMSetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMSetRequest*>(&to_msg);
  auto& from = static_cast<const BedRockKvMSetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMSetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMSetRequest::CopyFrom(const BedRockKvMSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMSetRequest::IsInitialized() const {
  return true;
}

void BedRockKvMSetRequest::InternalSwap(BedRockKvMSetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  swap(_impl_.storage_id_, other->_impl_.storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMSetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[8]);
}

// ===================================================================

class BedRockKvMSetResponse::_Internal {
 public:
};

BedRockKvMSetResponse::BedRockKvMSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMSetResponse)
}
BedRockKvMSetResponse::BedRockKvMSetResponse(const BedRockKvMSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMSetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMSetResponse)
}

inline void BedRockKvMSetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockKvMSetResponse::~BedRockKvMSetResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMSetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMSetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockKvMSetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMSetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMSetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMSetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMSetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMSetResponse)
  return target;
}

size_t BedRockKvMSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMSetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMSetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMSetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMSetResponse::GetClassData() const { return &_class_data_; }


void BedRockKvMSetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMSetResponse*>(&to_msg);
  auto& from = static_cast<const BedRockKvMSetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMSetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMSetResponse::CopyFrom(const BedRockKvMSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMSetResponse::IsInitialized() const {
  return true;
}

void BedRockKvMSetResponse::InternalSwap(BedRockKvMSetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMSetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[9]);
}

// ===================================================================

class BedRockKvMGetParam::_Internal {
 public:
};

BedRockKvMGetParam::BedRockKvMGetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMGetParam)
}
BedRockKvMGetParam::BedRockKvMGetParam(const BedRockKvMGetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMGetParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMGetParam)
}

inline void BedRockKvMGetParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvMGetParam::~BedRockKvMGetParam() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMGetParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMGetParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void BedRockKvMGetParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMGetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMGetParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMGetParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMGetParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMGetParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMGetParam)
  return target;
}

size_t BedRockKvMGetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMGetParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMGetParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMGetParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMGetParam::GetClassData() const { return &_class_data_; }


void BedRockKvMGetParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMGetParam*>(&to_msg);
  auto& from = static_cast<const BedRockKvMGetParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMGetParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMGetParam::CopyFrom(const BedRockKvMGetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMGetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMGetParam::IsInitialized() const {
  return true;
}

void BedRockKvMGetParam::InternalSwap(BedRockKvMGetParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMGetParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[10]);
}

// ===================================================================

class BedRockKvMGetRequest::_Internal {
 public:
};

BedRockKvMGetRequest::BedRockKvMGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMGetRequest)
}
BedRockKvMGetRequest::BedRockKvMGetRequest(const BedRockKvMGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMGetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMGetRequest)
}

inline void BedRockKvMGetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockKvMGetRequest::~BedRockKvMGetRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMGetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
}

void BedRockKvMGetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMGetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMGetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMGetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMGetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMGetRequest)
  return target;
}

size_t BedRockKvMGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMGetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMGetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMGetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMGetRequest::GetClassData() const { return &_class_data_; }


void BedRockKvMGetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMGetRequest*>(&to_msg);
  auto& from = static_cast<const BedRockKvMGetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMGetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMGetRequest::CopyFrom(const BedRockKvMGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMGetRequest::IsInitialized() const {
  return true;
}

void BedRockKvMGetRequest::InternalSwap(BedRockKvMGetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  swap(_impl_.storage_id_, other->_impl_.storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMGetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[11]);
}

// ===================================================================

class BedRockKvMGetKvRetPair::_Internal {
 public:
};

BedRockKvMGetKvRetPair::BedRockKvMGetKvRetPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMGetKvRetPair)
}
BedRockKvMGetKvRetPair::BedRockKvMGetKvRetPair(const BedRockKvMGetKvRetPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMGetKvRetPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMGetKvRetPair)
}

inline void BedRockKvMGetKvRetPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvMGetKvRetPair::~BedRockKvMGetKvRetPair() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMGetKvRetPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMGetKvRetPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void BedRockKvMGetKvRetPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMGetKvRetPair::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMGetKvRetPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMGetKvRetPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMGetKvRetPair)
  return target;
}

size_t BedRockKvMGetKvRetPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMGetKvRetPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMGetKvRetPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMGetKvRetPair::GetClassData() const { return &_class_data_; }


void BedRockKvMGetKvRetPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMGetKvRetPair*>(&to_msg);
  auto& from = static_cast<const BedRockKvMGetKvRetPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMGetKvRetPair::CopyFrom(const BedRockKvMGetKvRetPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMGetKvRetPair::IsInitialized() const {
  return true;
}

void BedRockKvMGetKvRetPair::InternalSwap(BedRockKvMGetKvRetPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMGetKvRetPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[12]);
}

// ===================================================================

class BedRockKvMGetResponse::_Internal {
 public:
};

BedRockKvMGetResponse::BedRockKvMGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMGetResponse)
}
BedRockKvMGetResponse::BedRockKvMGetResponse(const BedRockKvMGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMGetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){from._impl_.kvs_}
    , decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMGetResponse)
}

inline void BedRockKvMGetResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){arena}
    , decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockKvMGetResponse::~BedRockKvMGetResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMGetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kvs_.~RepeatedPtrField();
}

void BedRockKvMGetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kvs_.Clear();
  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMGetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kvs_size()); i < n; i++) {
    const auto& repfield = this->_internal_kvs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMGetResponse)
  return target;
}

size_t BedRockKvMGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->_impl_.kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMGetResponse::GetClassData() const { return &_class_data_; }


void BedRockKvMGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMGetResponse*>(&to_msg);
  auto& from = static_cast<const BedRockKvMGetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMGetResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kvs_.MergeFrom(from._impl_.kvs_);
  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMGetResponse::CopyFrom(const BedRockKvMGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMGetResponse::IsInitialized() const {
  return true;
}

void BedRockKvMGetResponse::InternalSwap(BedRockKvMGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kvs_.InternalSwap(&other->_impl_.kvs_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMGetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[13]);
}

// ===================================================================

class BedRockKvMDeleteParam::_Internal {
 public:
};

BedRockKvMDeleteParam::BedRockKvMDeleteParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMDeleteParam)
}
BedRockKvMDeleteParam::BedRockKvMDeleteParam(const BedRockKvMDeleteParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMDeleteParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMDeleteParam)
}

inline void BedRockKvMDeleteParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvMDeleteParam::~BedRockKvMDeleteParam() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMDeleteParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMDeleteParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void BedRockKvMDeleteParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMDeleteParam::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMDeleteParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMDeleteParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMDeleteParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMDeleteParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMDeleteParam)
  return target;
}

size_t BedRockKvMDeleteParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMDeleteParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMDeleteParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMDeleteParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMDeleteParam::GetClassData() const { return &_class_data_; }


void BedRockKvMDeleteParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMDeleteParam*>(&to_msg);
  auto& from = static_cast<const BedRockKvMDeleteParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMDeleteParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMDeleteParam::CopyFrom(const BedRockKvMDeleteParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMDeleteParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMDeleteParam::IsInitialized() const {
  return true;
}

void BedRockKvMDeleteParam::InternalSwap(BedRockKvMDeleteParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMDeleteParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[14]);
}

// ===================================================================

class BedRockKvMDeleteRequest::_Internal {
 public:
};

BedRockKvMDeleteRequest::BedRockKvMDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMDeleteRequest)
}
BedRockKvMDeleteRequest::BedRockKvMDeleteRequest(const BedRockKvMDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMDeleteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMDeleteRequest)
}

inline void BedRockKvMDeleteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockKvMDeleteRequest::~BedRockKvMDeleteRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMDeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
}

void BedRockKvMDeleteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMDeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMDeleteRequest)
  return target;
}

size_t BedRockKvMDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMDeleteRequest::GetClassData() const { return &_class_data_; }


void BedRockKvMDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMDeleteRequest*>(&to_msg);
  auto& from = static_cast<const BedRockKvMDeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMDeleteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMDeleteRequest::CopyFrom(const BedRockKvMDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMDeleteRequest::IsInitialized() const {
  return true;
}

void BedRockKvMDeleteRequest::InternalSwap(BedRockKvMDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  swap(_impl_.storage_id_, other->_impl_.storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMDeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[15]);
}

// ===================================================================

class BedRockKvMDeleteResponse::_Internal {
 public:
};

BedRockKvMDeleteResponse::BedRockKvMDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMDeleteResponse)
}
BedRockKvMDeleteResponse::BedRockKvMDeleteResponse(const BedRockKvMDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvMDeleteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMDeleteResponse)
}

inline void BedRockKvMDeleteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockKvMDeleteResponse::~BedRockKvMDeleteResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMDeleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvMDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockKvMDeleteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvMDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMDeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMDeleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvMDeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMDeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMDeleteResponse)
  return target;
}

size_t BedRockKvMDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMDeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvMDeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvMDeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvMDeleteResponse::GetClassData() const { return &_class_data_; }


void BedRockKvMDeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvMDeleteResponse*>(&to_msg);
  auto& from = static_cast<const BedRockKvMDeleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMDeleteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvMDeleteResponse::CopyFrom(const BedRockKvMDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMDeleteResponse::IsInitialized() const {
  return true;
}

void BedRockKvMDeleteResponse::InternalSwap(BedRockKvMDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMDeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[16]);
}

// ===================================================================

class BedRockStartScanRequest::_Internal {
 public:
};

BedRockStartScanRequest::BedRockStartScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStartScanRequest)
}
BedRockStartScanRequest::BedRockStartScanRequest(const BedRockStartScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockStartScanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_key_){}
    , decltype(_impl_.end_key_){}
    , decltype(_impl_.storage_id_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_key().empty()) {
    _this->_impl_.start_key_.Set(from._internal_start_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_key().empty()) {
    _this->_impl_.end_key_.Set(from._internal_end_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.storage_id_, &from._impl_.storage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.storage_id_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStartScanRequest)
}

inline void BedRockStartScanRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_key_){}
    , decltype(_impl_.end_key_){}
    , decltype(_impl_.storage_id_){0u}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.start_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockStartScanRequest::~BedRockStartScanRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStartScanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockStartScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_key_.Destroy();
  _impl_.end_key_.Destroy();
}

void BedRockStartScanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockStartScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStartScanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.start_key_.ClearToEmpty();
  _impl_.end_key_.ClearToEmpty();
  ::memset(&_impl_.storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.storage_id_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStartScanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_start_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes end_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_end_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockStartScanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStartScanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes start_key = 2;
  if (!this->_internal_start_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start_key(), target);
  }

  // bytes end_key = 3;
  if (!this->_internal_end_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_end_key(), target);
  }

  // int32 limit = 4;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStartScanRequest)
  return target;
}

size_t BedRockStartScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStartScanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (!this->_internal_start_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_key());
  }

  // bytes end_key = 3;
  if (!this->_internal_end_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_key());
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  // int32 limit = 4;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockStartScanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockStartScanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockStartScanRequest::GetClassData() const { return &_class_data_; }


void BedRockStartScanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockStartScanRequest*>(&to_msg);
  auto& from = static_cast<const BedRockStartScanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStartScanRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_start_key().empty()) {
    _this->_internal_set_start_key(from._internal_start_key());
  }
  if (!from._internal_end_key().empty()) {
    _this->_internal_set_end_key(from._internal_end_key());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockStartScanRequest::CopyFrom(const BedRockStartScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStartScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStartScanRequest::IsInitialized() const {
  return true;
}

void BedRockStartScanRequest::InternalSwap(BedRockStartScanRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_key_, lhs_arena,
      &other->_impl_.start_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_key_, lhs_arena,
      &other->_impl_.end_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockStartScanRequest, _impl_.limit_)
      + sizeof(BedRockStartScanRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(BedRockStartScanRequest, _impl_.storage_id_)>(
          reinterpret_cast<char*>(&_impl_.storage_id_),
          reinterpret_cast<char*>(&other->_impl_.storage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStartScanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[17]);
}

// ===================================================================

class BedRockStartScanResponse::_Internal {
 public:
};

BedRockStartScanResponse::BedRockStartScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStartScanResponse)
}
BedRockStartScanResponse::BedRockStartScanResponse(const BedRockStartScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockStartScanResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iterator_id_){}
    , decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.iterator_id_, &from._impl_.iterator_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.err_) -
    reinterpret_cast<char*>(&_impl_.iterator_id_)) + sizeof(_impl_.err_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStartScanResponse)
}

inline void BedRockStartScanResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iterator_id_){uint64_t{0u}}
    , decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockStartScanResponse::~BedRockStartScanResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStartScanResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockStartScanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockStartScanResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockStartScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStartScanResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.iterator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.err_) -
      reinterpret_cast<char*>(&_impl_.iterator_id_)) + sizeof(_impl_.err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStartScanResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iterator_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.iterator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockStartScanResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStartScanResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->_internal_iterator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iterator_id(), target);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStartScanResponse)
  return target;
}

size_t BedRockStartScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStartScanResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->_internal_iterator_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iterator_id());
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockStartScanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockStartScanResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockStartScanResponse::GetClassData() const { return &_class_data_; }


void BedRockStartScanResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockStartScanResponse*>(&to_msg);
  auto& from = static_cast<const BedRockStartScanResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStartScanResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iterator_id() != 0) {
    _this->_internal_set_iterator_id(from._internal_iterator_id());
  }
  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockStartScanResponse::CopyFrom(const BedRockStartScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStartScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStartScanResponse::IsInitialized() const {
  return true;
}

void BedRockStartScanResponse::InternalSwap(BedRockStartScanResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockStartScanResponse, _impl_.err_)
      + sizeof(BedRockStartScanResponse::_impl_.err_)
      - PROTOBUF_FIELD_OFFSET(BedRockStartScanResponse, _impl_.iterator_id_)>(
          reinterpret_cast<char*>(&_impl_.iterator_id_),
          reinterpret_cast<char*>(&other->_impl_.iterator_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStartScanResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[18]);
}

// ===================================================================

class BedRockStopScanRequest::_Internal {
 public:
};

BedRockStopScanRequest::BedRockStopScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStopScanRequest)
}
BedRockStopScanRequest::BedRockStopScanRequest(const BedRockStopScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockStopScanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iterator_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.iterator_id_ = from._impl_.iterator_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStopScanRequest)
}

inline void BedRockStopScanRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iterator_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockStopScanRequest::~BedRockStopScanRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStopScanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockStopScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockStopScanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockStopScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStopScanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iterator_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStopScanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iterator_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.iterator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockStopScanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStopScanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->_internal_iterator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iterator_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStopScanRequest)
  return target;
}

size_t BedRockStopScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStopScanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->_internal_iterator_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iterator_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockStopScanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockStopScanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockStopScanRequest::GetClassData() const { return &_class_data_; }


void BedRockStopScanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockStopScanRequest*>(&to_msg);
  auto& from = static_cast<const BedRockStopScanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStopScanRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iterator_id() != 0) {
    _this->_internal_set_iterator_id(from._internal_iterator_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockStopScanRequest::CopyFrom(const BedRockStopScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStopScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStopScanRequest::IsInitialized() const {
  return true;
}

void BedRockStopScanRequest::InternalSwap(BedRockStopScanRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.iterator_id_, other->_impl_.iterator_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStopScanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[19]);
}

// ===================================================================

class BedRockStopScanResponse::_Internal {
 public:
};

BedRockStopScanResponse::BedRockStopScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStopScanResponse)
}
BedRockStopScanResponse::BedRockStopScanResponse(const BedRockStopScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockStopScanResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStopScanResponse)
}

inline void BedRockStopScanResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockStopScanResponse::~BedRockStopScanResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStopScanResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockStopScanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockStopScanResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockStopScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStopScanResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStopScanResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockStopScanResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStopScanResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStopScanResponse)
  return target;
}

size_t BedRockStopScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStopScanResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockStopScanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockStopScanResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockStopScanResponse::GetClassData() const { return &_class_data_; }


void BedRockStopScanResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockStopScanResponse*>(&to_msg);
  auto& from = static_cast<const BedRockStopScanResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStopScanResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockStopScanResponse::CopyFrom(const BedRockStopScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStopScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStopScanResponse::IsInitialized() const {
  return true;
}

void BedRockStopScanResponse::InternalSwap(BedRockStopScanResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStopScanResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[20]);
}

// ===================================================================

class BedRockDoScanRequest::_Internal {
 public:
};

BedRockDoScanRequest::BedRockDoScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockDoScanRequest)
}
BedRockDoScanRequest::BedRockDoScanRequest(const BedRockDoScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockDoScanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iterator_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.iterator_id_ = from._impl_.iterator_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockDoScanRequest)
}

inline void BedRockDoScanRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iterator_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockDoScanRequest::~BedRockDoScanRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockDoScanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockDoScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockDoScanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockDoScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockDoScanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iterator_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockDoScanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iterator_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.iterator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockDoScanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockDoScanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->_internal_iterator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iterator_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockDoScanRequest)
  return target;
}

size_t BedRockDoScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockDoScanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->_internal_iterator_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_iterator_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockDoScanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockDoScanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockDoScanRequest::GetClassData() const { return &_class_data_; }


void BedRockDoScanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockDoScanRequest*>(&to_msg);
  auto& from = static_cast<const BedRockDoScanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockDoScanRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iterator_id() != 0) {
    _this->_internal_set_iterator_id(from._internal_iterator_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockDoScanRequest::CopyFrom(const BedRockDoScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockDoScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockDoScanRequest::IsInitialized() const {
  return true;
}

void BedRockDoScanRequest::InternalSwap(BedRockDoScanRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.iterator_id_, other->_impl_.iterator_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockDoScanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[21]);
}

// ===================================================================

class BedRockKvPair::_Internal {
 public:
};

BedRockKvPair::BedRockKvPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvPair)
}
BedRockKvPair::BedRockKvPair(const BedRockKvPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockKvPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvPair)
}

inline void BedRockKvPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockKvPair::~BedRockKvPair() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockKvPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void BedRockKvPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockKvPair::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockKvPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvPair)
  return target;
}

size_t BedRockKvPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockKvPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockKvPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockKvPair::GetClassData() const { return &_class_data_; }


void BedRockKvPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockKvPair*>(&to_msg);
  auto& from = static_cast<const BedRockKvPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockKvPair::CopyFrom(const BedRockKvPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvPair::IsInitialized() const {
  return true;
}

void BedRockKvPair::InternalSwap(BedRockKvPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[22]);
}

// ===================================================================

class BedRockDoScanResponse::_Internal {
 public:
};

BedRockDoScanResponse::BedRockDoScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockDoScanResponse)
}
BedRockDoScanResponse::BedRockDoScanResponse(const BedRockDoScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockDoScanResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){from._impl_.kvs_}
    , decltype(_impl_.no_left_){}
    , decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.no_left_, &from._impl_.no_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.err_) -
    reinterpret_cast<char*>(&_impl_.no_left_)) + sizeof(_impl_.err_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockDoScanResponse)
}

inline void BedRockDoScanResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kvs_){arena}
    , decltype(_impl_.no_left_){false}
    , decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockDoScanResponse::~BedRockDoScanResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockDoScanResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockDoScanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kvs_.~RepeatedPtrField();
}

void BedRockDoScanResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockDoScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockDoScanResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kvs_.Clear();
  ::memset(&_impl_.no_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.err_) -
      reinterpret_cast<char*>(&_impl_.no_left_)) + sizeof(_impl_.err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockDoScanResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bedrock.proxy.BedRockKvPair kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool no_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.no_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockDoScanResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockDoScanResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvPair kvs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kvs_size()); i < n; i++) {
    const auto& repfield = this->_internal_kvs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool no_left = 2;
  if (this->_internal_no_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_no_left(), target);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockDoScanResponse)
  return target;
}

size_t BedRockDoScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockDoScanResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvPair kvs = 1;
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->_impl_.kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool no_left = 2;
  if (this->_internal_no_left() != 0) {
    total_size += 1 + 1;
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockDoScanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockDoScanResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockDoScanResponse::GetClassData() const { return &_class_data_; }


void BedRockDoScanResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockDoScanResponse*>(&to_msg);
  auto& from = static_cast<const BedRockDoScanResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockDoScanResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kvs_.MergeFrom(from._impl_.kvs_);
  if (from._internal_no_left() != 0) {
    _this->_internal_set_no_left(from._internal_no_left());
  }
  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockDoScanResponse::CopyFrom(const BedRockDoScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockDoScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockDoScanResponse::IsInitialized() const {
  return true;
}

void BedRockDoScanResponse::InternalSwap(BedRockDoScanResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kvs_.InternalSwap(&other->_impl_.kvs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockDoScanResponse, _impl_.err_)
      + sizeof(BedRockDoScanResponse::_impl_.err_)
      - PROTOBUF_FIELD_OFFSET(BedRockDoScanResponse, _impl_.no_left_)>(
          reinterpret_cast<char*>(&_impl_.no_left_),
          reinterpret_cast<char*>(&other->_impl_.no_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockDoScanResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[23]);
}

// ===================================================================

class BedRockTxRecordLock::_Internal {
 public:
};

BedRockTxRecordLock::BedRockTxRecordLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockTxRecordLock)
}
BedRockTxRecordLock::BedRockTxRecordLock(const BedRockTxRecordLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockTxRecordLock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.lock_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.lock_type_ = from._impl_.lock_type_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockTxRecordLock)
}

inline void BedRockTxRecordLock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.lock_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockTxRecordLock::~BedRockTxRecordLock() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockTxRecordLock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockTxRecordLock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void BedRockTxRecordLock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockTxRecordLock::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockTxRecordLock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.lock_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockTxRecordLock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.BedRockTxLockType lock_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lock_type(static_cast<::bedrock::proxy::BedRockTxLockType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockTxRecordLock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockTxRecordLock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  if (this->_internal_lock_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lock_type(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockTxRecordLock)
  return target;
}

size_t BedRockTxRecordLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockTxRecordLock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  if (this->_internal_lock_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lock_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockTxRecordLock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockTxRecordLock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockTxRecordLock::GetClassData() const { return &_class_data_; }


void BedRockTxRecordLock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockTxRecordLock*>(&to_msg);
  auto& from = static_cast<const BedRockTxRecordLock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockTxRecordLock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_lock_type() != 0) {
    _this->_internal_set_lock_type(from._internal_lock_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockTxRecordLock::CopyFrom(const BedRockTxRecordLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockTxRecordLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockTxRecordLock::IsInitialized() const {
  return true;
}

void BedRockTxRecordLock::InternalSwap(BedRockTxRecordLock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.lock_type_, other->_impl_.lock_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockTxRecordLock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[24]);
}

// ===================================================================

class BedRockTxRangeLock::_Internal {
 public:
};

BedRockTxRangeLock::BedRockTxRangeLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockTxRangeLock)
}
BedRockTxRangeLock::BedRockTxRangeLock(const BedRockTxRangeLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockTxRangeLock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_key_){}
    , decltype(_impl_.end_key_){}
    , decltype(_impl_.lock_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.start_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_key().empty()) {
    _this->_impl_.start_key_.Set(from._internal_start_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_key().empty()) {
    _this->_impl_.end_key_.Set(from._internal_end_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.lock_type_ = from._impl_.lock_type_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockTxRangeLock)
}

inline void BedRockTxRangeLock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_key_){}
    , decltype(_impl_.end_key_){}
    , decltype(_impl_.lock_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.start_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BedRockTxRangeLock::~BedRockTxRangeLock() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockTxRangeLock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockTxRangeLock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.start_key_.Destroy();
  _impl_.end_key_.Destroy();
}

void BedRockTxRangeLock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockTxRangeLock::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockTxRangeLock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.start_key_.ClearToEmpty();
  _impl_.end_key_.ClearToEmpty();
  _impl_.lock_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockTxRangeLock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.BedRockTxLockType lock_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lock_type(static_cast<::bedrock::proxy::BedRockTxLockType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_start_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes end_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_end_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockTxRangeLock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockTxRangeLock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  if (this->_internal_lock_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lock_type(), target);
  }

  // bytes start_key = 2;
  if (!this->_internal_start_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start_key(), target);
  }

  // bytes end_key = 3;
  if (!this->_internal_end_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_end_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockTxRangeLock)
  return target;
}

size_t BedRockTxRangeLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockTxRangeLock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (!this->_internal_start_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_key());
  }

  // bytes end_key = 3;
  if (!this->_internal_end_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_key());
  }

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  if (this->_internal_lock_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_lock_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockTxRangeLock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockTxRangeLock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockTxRangeLock::GetClassData() const { return &_class_data_; }


void BedRockTxRangeLock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockTxRangeLock*>(&to_msg);
  auto& from = static_cast<const BedRockTxRangeLock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockTxRangeLock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_start_key().empty()) {
    _this->_internal_set_start_key(from._internal_start_key());
  }
  if (!from._internal_end_key().empty()) {
    _this->_internal_set_end_key(from._internal_end_key());
  }
  if (from._internal_lock_type() != 0) {
    _this->_internal_set_lock_type(from._internal_lock_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockTxRangeLock::CopyFrom(const BedRockTxRangeLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockTxRangeLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockTxRangeLock::IsInitialized() const {
  return true;
}

void BedRockTxRangeLock::InternalSwap(BedRockTxRangeLock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_key_, lhs_arena,
      &other->_impl_.start_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_key_, lhs_arena,
      &other->_impl_.end_key_, rhs_arena
  );
  swap(_impl_.lock_type_, other->_impl_.lock_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockTxRangeLock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[25]);
}

// ===================================================================

class BedRockStartTxRequest::_Internal {
 public:
};

BedRockStartTxRequest::BedRockStartTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStartTxRequest)
}
BedRockStartTxRequest::BedRockStartTxRequest(const BedRockStartTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockStartTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.record_locks_){from._impl_.record_locks_}
    , decltype(_impl_.range_locks_){from._impl_.range_locks_}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.storage_id_ = from._impl_.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStartTxRequest)
}

inline void BedRockStartTxRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.record_locks_){arena}
    , decltype(_impl_.range_locks_){arena}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockStartTxRequest::~BedRockStartTxRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStartTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockStartTxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.record_locks_.~RepeatedPtrField();
  _impl_.range_locks_.~RepeatedPtrField();
}

void BedRockStartTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockStartTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStartTxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.record_locks_.Clear();
  _impl_.range_locks_.Clear();
  _impl_.storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStartTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_locks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_locks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockStartTxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStartTxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_locks_size()); i < n; i++) {
    const auto& repfield = this->_internal_record_locks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_locks_size()); i < n; i++) {
    const auto& repfield = this->_internal_range_locks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStartTxRequest)
  return target;
}

size_t BedRockStartTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStartTxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 2;
  total_size += 1UL * this->_internal_record_locks_size();
  for (const auto& msg : this->_impl_.record_locks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 3;
  total_size += 1UL * this->_internal_range_locks_size();
  for (const auto& msg : this->_impl_.range_locks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockStartTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockStartTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockStartTxRequest::GetClassData() const { return &_class_data_; }


void BedRockStartTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockStartTxRequest*>(&to_msg);
  auto& from = static_cast<const BedRockStartTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStartTxRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.record_locks_.MergeFrom(from._impl_.record_locks_);
  _this->_impl_.range_locks_.MergeFrom(from._impl_.range_locks_);
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockStartTxRequest::CopyFrom(const BedRockStartTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStartTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStartTxRequest::IsInitialized() const {
  return true;
}

void BedRockStartTxRequest::InternalSwap(BedRockStartTxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.record_locks_.InternalSwap(&other->_impl_.record_locks_);
  _impl_.range_locks_.InternalSwap(&other->_impl_.range_locks_);
  swap(_impl_.storage_id_, other->_impl_.storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStartTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[26]);
}

// ===================================================================

class BedRockStartTxResponse::_Internal {
 public:
};

BedRockStartTxResponse::BedRockStartTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStartTxResponse)
}
BedRockStartTxResponse::BedRockStartTxResponse(const BedRockStartTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockStartTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_id_){}
    , decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.err_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.err_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStartTxResponse)
}

inline void BedRockStartTxResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockStartTxResponse::~BedRockStartTxResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStartTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockStartTxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockStartTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockStartTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStartTxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.err_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStartTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockStartTxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStartTxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStartTxResponse)
  return target;
}

size_t BedRockStartTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStartTxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockStartTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockStartTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockStartTxResponse::GetClassData() const { return &_class_data_; }


void BedRockStartTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockStartTxResponse*>(&to_msg);
  auto& from = static_cast<const BedRockStartTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStartTxResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockStartTxResponse::CopyFrom(const BedRockStartTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStartTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStartTxResponse::IsInitialized() const {
  return true;
}

void BedRockStartTxResponse::InternalSwap(BedRockStartTxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockStartTxResponse, _impl_.err_)
      + sizeof(BedRockStartTxResponse::_impl_.err_)
      - PROTOBUF_FIELD_OFFSET(BedRockStartTxResponse, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStartTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[27]);
}

// ===================================================================

class BedRockCommitTxRequest::_Internal {
 public:
};

BedRockCommitTxRequest::BedRockCommitTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockCommitTxRequest)
}
BedRockCommitTxRequest::BedRockCommitTxRequest(const BedRockCommitTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockCommitTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_id_){}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.storage_id_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.storage_id_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockCommitTxRequest)
}

inline void BedRockCommitTxRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockCommitTxRequest::~BedRockCommitTxRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockCommitTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockCommitTxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockCommitTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockCommitTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockCommitTxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.storage_id_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.storage_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockCommitTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockCommitTxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockCommitTxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint64 tx_id = 2;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tx_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockCommitTxRequest)
  return target;
}

size_t BedRockCommitTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockCommitTxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_id = 2;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockCommitTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockCommitTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockCommitTxRequest::GetClassData() const { return &_class_data_; }


void BedRockCommitTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockCommitTxRequest*>(&to_msg);
  auto& from = static_cast<const BedRockCommitTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockCommitTxRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockCommitTxRequest::CopyFrom(const BedRockCommitTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockCommitTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockCommitTxRequest::IsInitialized() const {
  return true;
}

void BedRockCommitTxRequest::InternalSwap(BedRockCommitTxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockCommitTxRequest, _impl_.storage_id_)
      + sizeof(BedRockCommitTxRequest::_impl_.storage_id_)
      - PROTOBUF_FIELD_OFFSET(BedRockCommitTxRequest, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockCommitTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[28]);
}

// ===================================================================

class BedRockCommitTxResponse::_Internal {
 public:
};

BedRockCommitTxResponse::BedRockCommitTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockCommitTxResponse)
}
BedRockCommitTxResponse::BedRockCommitTxResponse(const BedRockCommitTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockCommitTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockCommitTxResponse)
}

inline void BedRockCommitTxResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockCommitTxResponse::~BedRockCommitTxResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockCommitTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockCommitTxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockCommitTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockCommitTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockCommitTxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockCommitTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockCommitTxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockCommitTxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockCommitTxResponse)
  return target;
}

size_t BedRockCommitTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockCommitTxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockCommitTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockCommitTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockCommitTxResponse::GetClassData() const { return &_class_data_; }


void BedRockCommitTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockCommitTxResponse*>(&to_msg);
  auto& from = static_cast<const BedRockCommitTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockCommitTxResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockCommitTxResponse::CopyFrom(const BedRockCommitTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockCommitTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockCommitTxResponse::IsInitialized() const {
  return true;
}

void BedRockCommitTxResponse::InternalSwap(BedRockCommitTxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockCommitTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[29]);
}

// ===================================================================

class BedRockRollbackTxRequest::_Internal {
 public:
};

BedRockRollbackTxRequest::BedRockRollbackTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockRollbackTxRequest)
}
BedRockRollbackTxRequest::BedRockRollbackTxRequest(const BedRockRollbackTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockRollbackTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_id_){}
    , decltype(_impl_.storage_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tx_id_, &from._impl_.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.storage_id_) -
    reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.storage_id_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockRollbackTxRequest)
}

inline void BedRockRollbackTxRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_id_){uint64_t{0u}}
    , decltype(_impl_.storage_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockRollbackTxRequest::~BedRockRollbackTxRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockRollbackTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockRollbackTxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockRollbackTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockRollbackTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockRollbackTxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.storage_id_) -
      reinterpret_cast<char*>(&_impl_.tx_id_)) + sizeof(_impl_.storage_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockRollbackTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockRollbackTxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockRollbackTxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint64 tx_id = 2;
  if (this->_internal_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tx_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockRollbackTxRequest)
  return target;
}

size_t BedRockRollbackTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockRollbackTxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_id = 2;
  if (this->_internal_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_id());
  }

  // uint32 storage_id = 1;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_storage_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockRollbackTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockRollbackTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockRollbackTxRequest::GetClassData() const { return &_class_data_; }


void BedRockRollbackTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockRollbackTxRequest*>(&to_msg);
  auto& from = static_cast<const BedRockRollbackTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockRollbackTxRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tx_id() != 0) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockRollbackTxRequest::CopyFrom(const BedRockRollbackTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockRollbackTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockRollbackTxRequest::IsInitialized() const {
  return true;
}

void BedRockRollbackTxRequest::InternalSwap(BedRockRollbackTxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockRollbackTxRequest, _impl_.storage_id_)
      + sizeof(BedRockRollbackTxRequest::_impl_.storage_id_)
      - PROTOBUF_FIELD_OFFSET(BedRockRollbackTxRequest, _impl_.tx_id_)>(
          reinterpret_cast<char*>(&_impl_.tx_id_),
          reinterpret_cast<char*>(&other->_impl_.tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockRollbackTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[30]);
}

// ===================================================================

class BedRockRollbackTxResponse::_Internal {
 public:
};

BedRockRollbackTxResponse::BedRockRollbackTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockRollbackTxResponse)
}
BedRockRollbackTxResponse::BedRockRollbackTxResponse(const BedRockRollbackTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BedRockRollbackTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockRollbackTxResponse)
}

inline void BedRockRollbackTxResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BedRockRollbackTxResponse::~BedRockRollbackTxResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockRollbackTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BedRockRollbackTxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BedRockRollbackTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BedRockRollbackTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockRollbackTxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockRollbackTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BedRockRollbackTxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockRollbackTxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockRollbackTxResponse)
  return target;
}

size_t BedRockRollbackTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockRollbackTxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->_internal_err() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BedRockRollbackTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BedRockRollbackTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BedRockRollbackTxResponse::GetClassData() const { return &_class_data_; }


void BedRockRollbackTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BedRockRollbackTxResponse*>(&to_msg);
  auto& from = static_cast<const BedRockRollbackTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockRollbackTxResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BedRockRollbackTxResponse::CopyFrom(const BedRockRollbackTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockRollbackTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockRollbackTxResponse::IsInitialized() const {
  return true;
}

void BedRockRollbackTxResponse::InternalSwap(BedRockRollbackTxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockRollbackTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[31]);
}

// ===================================================================

ProxyService::~ProxyService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ProxyService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proxy_2eproto);
  return file_level_service_descriptors_proxy_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ProxyService::GetDescriptor() {
  return descriptor();
}

void ProxyService::BedRockKvSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvSetRequest*,
                         ::bedrock::proxy::BedRockKvSetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvSet() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvGetRequest*,
                         ::bedrock::proxy::BedRockKvGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvGet() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvDeleteRequest*,
                         ::bedrock::proxy::BedRockKvDeleteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvDelete() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvMSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvMSetRequest*,
                         ::bedrock::proxy::BedRockKvMSetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvMSet() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvMGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvMGetRequest*,
                         ::bedrock::proxy::BedRockKvMGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvMGet() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvMDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvMDeleteRequest*,
                         ::bedrock::proxy::BedRockKvMDeleteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvMDelete() not implemented.");
  done->Run();
}

void ProxyService::BedRockStartScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockStartScanRequest*,
                         ::bedrock::proxy::BedRockStartScanResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockStartScan() not implemented.");
  done->Run();
}

void ProxyService::BedRockStopScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockStopScanRequest*,
                         ::bedrock::proxy::BedRockStopScanResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockStopScan() not implemented.");
  done->Run();
}

void ProxyService::BedRockDoScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockDoScanRequest*,
                         ::bedrock::proxy::BedRockDoScanResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockDoScan() not implemented.");
  done->Run();
}

void ProxyService::BedRockStartTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockStartTxRequest*,
                         ::bedrock::proxy::BedRockStartTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockStartTx() not implemented.");
  done->Run();
}

void ProxyService::BedRockCommitTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockCommitTxRequest*,
                         ::bedrock::proxy::BedRockCommitTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockCommitTx() not implemented.");
  done->Run();
}

void ProxyService::BedRockRollbackTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockRollbackTxRequest*,
                         ::bedrock::proxy::BedRockRollbackTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockRollbackTx() not implemented.");
  done->Run();
}

void ProxyService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_proxy_2eproto[0]);
  switch(method->index()) {
    case 0:
      BedRockKvSet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvSetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvSetResponse*>(
                 response),
             done);
      break;
    case 1:
      BedRockKvGet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvGetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvGetResponse*>(
                 response),
             done);
      break;
    case 2:
      BedRockKvDelete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvDeleteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvDeleteResponse*>(
                 response),
             done);
      break;
    case 3:
      BedRockKvMSet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvMSetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvMSetResponse*>(
                 response),
             done);
      break;
    case 4:
      BedRockKvMGet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvMGetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvMGetResponse*>(
                 response),
             done);
      break;
    case 5:
      BedRockKvMDelete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvMDeleteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvMDeleteResponse*>(
                 response),
             done);
      break;
    case 6:
      BedRockStartScan(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockStartScanRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockStartScanResponse*>(
                 response),
             done);
      break;
    case 7:
      BedRockStopScan(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockStopScanRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockStopScanResponse*>(
                 response),
             done);
      break;
    case 8:
      BedRockDoScan(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockDoScanRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockDoScanResponse*>(
                 response),
             done);
      break;
    case 9:
      BedRockStartTx(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockStartTxRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockStartTxResponse*>(
                 response),
             done);
      break;
    case 10:
      BedRockCommitTx(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockCommitTxRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockCommitTxResponse*>(
                 response),
             done);
      break;
    case 11:
      BedRockRollbackTx(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockRollbackTxRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockRollbackTxResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ProxyService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bedrock::proxy::BedRockKvSetRequest::default_instance();
    case 1:
      return ::bedrock::proxy::BedRockKvGetRequest::default_instance();
    case 2:
      return ::bedrock::proxy::BedRockKvDeleteRequest::default_instance();
    case 3:
      return ::bedrock::proxy::BedRockKvMSetRequest::default_instance();
    case 4:
      return ::bedrock::proxy::BedRockKvMGetRequest::default_instance();
    case 5:
      return ::bedrock::proxy::BedRockKvMDeleteRequest::default_instance();
    case 6:
      return ::bedrock::proxy::BedRockStartScanRequest::default_instance();
    case 7:
      return ::bedrock::proxy::BedRockStopScanRequest::default_instance();
    case 8:
      return ::bedrock::proxy::BedRockDoScanRequest::default_instance();
    case 9:
      return ::bedrock::proxy::BedRockStartTxRequest::default_instance();
    case 10:
      return ::bedrock::proxy::BedRockCommitTxRequest::default_instance();
    case 11:
      return ::bedrock::proxy::BedRockRollbackTxRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ProxyService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bedrock::proxy::BedRockKvSetResponse::default_instance();
    case 1:
      return ::bedrock::proxy::BedRockKvGetResponse::default_instance();
    case 2:
      return ::bedrock::proxy::BedRockKvDeleteResponse::default_instance();
    case 3:
      return ::bedrock::proxy::BedRockKvMSetResponse::default_instance();
    case 4:
      return ::bedrock::proxy::BedRockKvMGetResponse::default_instance();
    case 5:
      return ::bedrock::proxy::BedRockKvMDeleteResponse::default_instance();
    case 6:
      return ::bedrock::proxy::BedRockStartScanResponse::default_instance();
    case 7:
      return ::bedrock::proxy::BedRockStopScanResponse::default_instance();
    case 8:
      return ::bedrock::proxy::BedRockDoScanResponse::default_instance();
    case 9:
      return ::bedrock::proxy::BedRockStartTxResponse::default_instance();
    case 10:
      return ::bedrock::proxy::BedRockCommitTxResponse::default_instance();
    case 11:
      return ::bedrock::proxy::BedRockRollbackTxResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ProxyService_Stub::ProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ProxyService_Stub::ProxyService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ProxyService_Stub::~ProxyService_Stub() {
  if (owns_channel_) delete channel_;
}

void ProxyService_Stub::BedRockKvSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvSetRequest* request,
                              ::bedrock::proxy::BedRockKvSetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvGetRequest* request,
                              ::bedrock::proxy::BedRockKvGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvDeleteRequest* request,
                              ::bedrock::proxy::BedRockKvDeleteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvMSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvMSetRequest* request,
                              ::bedrock::proxy::BedRockKvMSetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvMGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvMGetRequest* request,
                              ::bedrock::proxy::BedRockKvMGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvMDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvMDeleteRequest* request,
                              ::bedrock::proxy::BedRockKvMDeleteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockStartScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockStartScanRequest* request,
                              ::bedrock::proxy::BedRockStartScanResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockStopScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockStopScanRequest* request,
                              ::bedrock::proxy::BedRockStopScanResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockDoScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockDoScanRequest* request,
                              ::bedrock::proxy::BedRockDoScanResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockStartTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockStartTxRequest* request,
                              ::bedrock::proxy::BedRockStartTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockCommitTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockCommitTxRequest* request,
                              ::bedrock::proxy::BedRockCommitTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockRollbackTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockRollbackTxRequest* request,
                              ::bedrock::proxy::BedRockRollbackTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proxy
}  // namespace bedrock
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bedrock::proxy::TxRecord*
Arena::CreateMaybeMessage< ::bedrock::proxy::TxRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::TxRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvGetRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvGetResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvSetRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvSetResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvSetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvDeleteRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvDeleteResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMSetParam*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMSetParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMSetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMSetRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMSetResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMSetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMGetParam*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMGetParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMGetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMGetRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMGetKvRetPair*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMGetKvRetPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMGetKvRetPair >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMGetResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMDeleteParam*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMDeleteParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMDeleteParam >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMDeleteRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMDeleteResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStartScanRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStartScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStartScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStartScanResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStartScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStartScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStopScanRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStopScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStopScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStopScanResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStopScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStopScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockDoScanRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockDoScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockDoScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvPair*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvPair >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockDoScanResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockDoScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockDoScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockTxRecordLock*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockTxRecordLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockTxRecordLock >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockTxRangeLock*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockTxRangeLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockTxRangeLock >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStartTxRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStartTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStartTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStartTxResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStartTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStartTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockCommitTxRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockCommitTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockCommitTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockCommitTxResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockCommitTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockCommitTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockRollbackTxRequest*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockRollbackTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockRollbackTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockRollbackTxResponse*
Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockRollbackTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockRollbackTxResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
