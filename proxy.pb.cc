// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#include "proxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proxy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMDeleteParam_proxy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proxy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMGetKvRetPair_proxy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proxy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMGetParam_proxy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proxy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMSetParam_proxy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proxy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvPair_proxy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proxy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockTxRangeLock_proxy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proxy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockTxRecordLock_proxy_2eproto;
namespace bedrock {
namespace proxy {
class TxRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxRecord> _instance;
} _TxRecord_default_instance_;
class BedRockKvGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvGetRequest> _instance;
} _BedRockKvGetRequest_default_instance_;
class BedRockKvGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvGetResponse> _instance;
} _BedRockKvGetResponse_default_instance_;
class BedRockKvSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvSetRequest> _instance;
} _BedRockKvSetRequest_default_instance_;
class BedRockKvSetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvSetResponse> _instance;
} _BedRockKvSetResponse_default_instance_;
class BedRockKvDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvDeleteRequest> _instance;
} _BedRockKvDeleteRequest_default_instance_;
class BedRockKvDeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvDeleteResponse> _instance;
} _BedRockKvDeleteResponse_default_instance_;
class BedRockKvMSetParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMSetParam> _instance;
} _BedRockKvMSetParam_default_instance_;
class BedRockKvMSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMSetRequest> _instance;
} _BedRockKvMSetRequest_default_instance_;
class BedRockKvMSetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMSetResponse> _instance;
} _BedRockKvMSetResponse_default_instance_;
class BedRockKvMGetParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMGetParam> _instance;
} _BedRockKvMGetParam_default_instance_;
class BedRockKvMGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMGetRequest> _instance;
} _BedRockKvMGetRequest_default_instance_;
class BedRockKvMGetKvRetPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMGetKvRetPair> _instance;
} _BedRockKvMGetKvRetPair_default_instance_;
class BedRockKvMGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMGetResponse> _instance;
} _BedRockKvMGetResponse_default_instance_;
class BedRockKvMDeleteParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMDeleteParam> _instance;
} _BedRockKvMDeleteParam_default_instance_;
class BedRockKvMDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMDeleteRequest> _instance;
} _BedRockKvMDeleteRequest_default_instance_;
class BedRockKvMDeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvMDeleteResponse> _instance;
} _BedRockKvMDeleteResponse_default_instance_;
class BedRockStartScanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockStartScanRequest> _instance;
} _BedRockStartScanRequest_default_instance_;
class BedRockStartScanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockStartScanResponse> _instance;
} _BedRockStartScanResponse_default_instance_;
class BedRockStopScanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockStopScanRequest> _instance;
} _BedRockStopScanRequest_default_instance_;
class BedRockStopScanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockStopScanResponse> _instance;
} _BedRockStopScanResponse_default_instance_;
class BedRockDoScanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockDoScanRequest> _instance;
} _BedRockDoScanRequest_default_instance_;
class BedRockKvPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockKvPair> _instance;
} _BedRockKvPair_default_instance_;
class BedRockDoScanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockDoScanResponse> _instance;
} _BedRockDoScanResponse_default_instance_;
class BedRockTxRecordLockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockTxRecordLock> _instance;
} _BedRockTxRecordLock_default_instance_;
class BedRockTxRangeLockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockTxRangeLock> _instance;
} _BedRockTxRangeLock_default_instance_;
class BedRockStartTxRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockStartTxRequest> _instance;
} _BedRockStartTxRequest_default_instance_;
class BedRockStartTxResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockStartTxResponse> _instance;
} _BedRockStartTxResponse_default_instance_;
class BedRockCommitTxRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockCommitTxRequest> _instance;
} _BedRockCommitTxRequest_default_instance_;
class BedRockCommitTxResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockCommitTxResponse> _instance;
} _BedRockCommitTxResponse_default_instance_;
class BedRockRollbackTxRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockRollbackTxRequest> _instance;
} _BedRockRollbackTxRequest_default_instance_;
class BedRockRollbackTxResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BedRockRollbackTxResponse> _instance;
} _BedRockRollbackTxResponse_default_instance_;
}  // namespace proxy
}  // namespace bedrock
static void InitDefaultsscc_info_BedRockCommitTxRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockCommitTxRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockCommitTxRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockCommitTxRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockCommitTxRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockCommitTxRequest_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockCommitTxResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockCommitTxResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockCommitTxResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockCommitTxResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockCommitTxResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockCommitTxResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockDoScanRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockDoScanRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockDoScanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockDoScanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockDoScanRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockDoScanRequest_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockDoScanResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockDoScanResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockDoScanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockDoScanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BedRockDoScanResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BedRockDoScanResponse_proxy_2eproto}, {
      &scc_info_BedRockKvPair_proxy_2eproto.base,}};

static void InitDefaultsscc_info_BedRockKvDeleteRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvDeleteRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvDeleteRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvDeleteRequest_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvDeleteResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvDeleteResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvDeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvDeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvDeleteResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvDeleteResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvGetRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvGetRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvGetRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvGetRequest_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvGetResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvGetResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvGetResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvGetResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvMDeleteParam_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMDeleteParam_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMDeleteParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMDeleteParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMDeleteParam_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvMDeleteParam_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvMDeleteRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMDeleteRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BedRockKvMDeleteRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BedRockKvMDeleteRequest_proxy_2eproto}, {
      &scc_info_BedRockKvMDeleteParam_proxy_2eproto.base,}};

static void InitDefaultsscc_info_BedRockKvMDeleteResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMDeleteResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMDeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMDeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMDeleteResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvMDeleteResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvMGetKvRetPair_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMGetKvRetPair_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMGetKvRetPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMGetKvRetPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMGetKvRetPair_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvMGetKvRetPair_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvMGetParam_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMGetParam_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMGetParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMGetParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMGetParam_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvMGetParam_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvMGetRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMGetRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BedRockKvMGetRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BedRockKvMGetRequest_proxy_2eproto}, {
      &scc_info_BedRockKvMGetParam_proxy_2eproto.base,}};

static void InitDefaultsscc_info_BedRockKvMGetResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMGetResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BedRockKvMGetResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BedRockKvMGetResponse_proxy_2eproto}, {
      &scc_info_BedRockKvMGetKvRetPair_proxy_2eproto.base,}};

static void InitDefaultsscc_info_BedRockKvMSetParam_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMSetParam_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMSetParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMSetParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMSetParam_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvMSetParam_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvMSetRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMSetRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BedRockKvMSetRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BedRockKvMSetRequest_proxy_2eproto}, {
      &scc_info_BedRockKvMSetParam_proxy_2eproto.base,}};

static void InitDefaultsscc_info_BedRockKvMSetResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvMSetResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvMSetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvMSetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvMSetResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvMSetResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvPair_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvPair_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvPair_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvPair_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvSetRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvSetRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvSetRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvSetRequest_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockKvSetResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockKvSetResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockKvSetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockKvSetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockKvSetResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockKvSetResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockRollbackTxRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockRollbackTxRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockRollbackTxRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockRollbackTxRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockRollbackTxRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockRollbackTxRequest_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockRollbackTxResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockRollbackTxResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockRollbackTxResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockRollbackTxResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockRollbackTxResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockRollbackTxResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockStartScanRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockStartScanRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockStartScanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockStartScanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockStartScanRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockStartScanRequest_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockStartScanResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockStartScanResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockStartScanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockStartScanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockStartScanResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockStartScanResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockStartTxRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockStartTxRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockStartTxRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockStartTxRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BedRockStartTxRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BedRockStartTxRequest_proxy_2eproto}, {
      &scc_info_BedRockTxRecordLock_proxy_2eproto.base,
      &scc_info_BedRockTxRangeLock_proxy_2eproto.base,}};

static void InitDefaultsscc_info_BedRockStartTxResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockStartTxResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockStartTxResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockStartTxResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockStartTxResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockStartTxResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockStopScanRequest_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockStopScanRequest_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockStopScanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockStopScanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockStopScanRequest_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockStopScanRequest_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockStopScanResponse_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockStopScanResponse_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockStopScanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockStopScanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockStopScanResponse_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockStopScanResponse_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockTxRangeLock_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockTxRangeLock_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockTxRangeLock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockTxRangeLock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockTxRangeLock_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockTxRangeLock_proxy_2eproto}, {}};

static void InitDefaultsscc_info_BedRockTxRecordLock_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_BedRockTxRecordLock_default_instance_;
    new (ptr) ::bedrock::proxy::BedRockTxRecordLock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::BedRockTxRecordLock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BedRockTxRecordLock_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BedRockTxRecordLock_proxy_2eproto}, {}};

static void InitDefaultsscc_info_TxRecord_proxy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bedrock::proxy::_TxRecord_default_instance_;
    new (ptr) ::bedrock::proxy::TxRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bedrock::proxy::TxRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TxRecord_proxy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TxRecord_proxy_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proxy_2eproto[32];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proxy_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_proxy_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, tx_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, status_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::TxRecord, heartbeat_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetResponse, value_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvGetResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetRequest, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvSetResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvDeleteResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetParam, key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetParam, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMSetResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetParam, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetKvRetPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetKvRetPair, key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetKvRetPair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetResponse, kvs_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMGetResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteParam, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvMDeleteResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, start_key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, end_key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanResponse, iterator_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartScanResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStopScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStopScanRequest, iterator_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStopScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStopScanResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanRequest, iterator_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvPair, key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockKvPair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanResponse, kvs_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanResponse, no_left_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockDoScanResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRecordLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRecordLock, lock_type_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRecordLock, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRangeLock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRangeLock, lock_type_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRangeLock, start_key_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockTxRangeLock, end_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxRequest, record_locks_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxRequest, range_locks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxResponse, tx_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockStartTxResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxRequest, tx_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockCommitTxResponse, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxRequest, storage_id_),
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxRequest, tx_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bedrock::proxy::BedRockRollbackTxResponse, err_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bedrock::proxy::TxRecord)},
  { 8, -1, sizeof(::bedrock::proxy::BedRockKvGetRequest)},
  { 15, -1, sizeof(::bedrock::proxy::BedRockKvGetResponse)},
  { 22, -1, sizeof(::bedrock::proxy::BedRockKvSetRequest)},
  { 30, -1, sizeof(::bedrock::proxy::BedRockKvSetResponse)},
  { 36, -1, sizeof(::bedrock::proxy::BedRockKvDeleteRequest)},
  { 43, -1, sizeof(::bedrock::proxy::BedRockKvDeleteResponse)},
  { 49, -1, sizeof(::bedrock::proxy::BedRockKvMSetParam)},
  { 56, -1, sizeof(::bedrock::proxy::BedRockKvMSetRequest)},
  { 63, -1, sizeof(::bedrock::proxy::BedRockKvMSetResponse)},
  { 69, -1, sizeof(::bedrock::proxy::BedRockKvMGetParam)},
  { 75, -1, sizeof(::bedrock::proxy::BedRockKvMGetRequest)},
  { 82, -1, sizeof(::bedrock::proxy::BedRockKvMGetKvRetPair)},
  { 89, -1, sizeof(::bedrock::proxy::BedRockKvMGetResponse)},
  { 96, -1, sizeof(::bedrock::proxy::BedRockKvMDeleteParam)},
  { 102, -1, sizeof(::bedrock::proxy::BedRockKvMDeleteRequest)},
  { 109, -1, sizeof(::bedrock::proxy::BedRockKvMDeleteResponse)},
  { 115, -1, sizeof(::bedrock::proxy::BedRockStartScanRequest)},
  { 124, -1, sizeof(::bedrock::proxy::BedRockStartScanResponse)},
  { 131, -1, sizeof(::bedrock::proxy::BedRockStopScanRequest)},
  { 137, -1, sizeof(::bedrock::proxy::BedRockStopScanResponse)},
  { 143, -1, sizeof(::bedrock::proxy::BedRockDoScanRequest)},
  { 149, -1, sizeof(::bedrock::proxy::BedRockKvPair)},
  { 156, -1, sizeof(::bedrock::proxy::BedRockDoScanResponse)},
  { 164, -1, sizeof(::bedrock::proxy::BedRockTxRecordLock)},
  { 171, -1, sizeof(::bedrock::proxy::BedRockTxRangeLock)},
  { 179, -1, sizeof(::bedrock::proxy::BedRockStartTxRequest)},
  { 187, -1, sizeof(::bedrock::proxy::BedRockStartTxResponse)},
  { 194, -1, sizeof(::bedrock::proxy::BedRockCommitTxRequest)},
  { 201, -1, sizeof(::bedrock::proxy::BedRockCommitTxResponse)},
  { 207, -1, sizeof(::bedrock::proxy::BedRockRollbackTxRequest)},
  { 214, -1, sizeof(::bedrock::proxy::BedRockRollbackTxResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_TxRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvSetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMSetParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMSetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMGetParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMGetKvRetPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMDeleteParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvMDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockStartScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockStartScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockStopScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockStopScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockDoScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockKvPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockDoScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockTxRecordLock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockTxRangeLock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockStartTxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockStartTxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockCommitTxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockCommitTxResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockRollbackTxRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bedrock::proxy::_BedRockRollbackTxResponse_default_instance_),
};

const char descriptor_table_protodef_proxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013proxy.proto\022\rbedrock.proxy\"X\n\010TxRecord"
  "\022\r\n\005tx_id\030\001 \001(\004\022\'\n\006status\030\002 \001(\0162\027.bedroc"
  "k.proxy.TxStatus\022\024\n\014heartbeat_ts\030\003 \001(\004\"6"
  "\n\023BedRockKvGetRequest\022\022\n\nstorage_id\030\001 \001("
  "\r\022\013\n\003key\030\002 \001(\014\"I\n\024BedRockKvGetResponse\022\r"
  "\n\005value\030\001 \001(\014\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.pr"
  "oxy.Error\"E\n\023BedRockKvSetRequest\022\022\n\nstor"
  "age_id\030\001 \001(\r\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014"
  "\":\n\024BedRockKvSetResponse\022\"\n\003err\030\377\001 \001(\0162\024"
  ".bedrock.proxy.Error\"9\n\026BedRockKvDeleteR"
  "equest\022\022\n\nstorage_id\030\001 \001(\r\022\013\n\003key\030\002 \001(\014\""
  "=\n\027BedRockKvDeleteResponse\022\"\n\003err\030\377\001 \001(\016"
  "2\024.bedrock.proxy.Error\"0\n\022BedRockKvMSetP"
  "aram\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"]\n\024BedR"
  "ockKvMSetRequest\022\022\n\nstorage_id\030\001 \001(\r\0221\n\006"
  "params\030\002 \003(\0132!.bedrock.proxy.BedRockKvMS"
  "etParam\";\n\025BedRockKvMSetResponse\022\"\n\003err\030"
  "\377\001 \001(\0162\024.bedrock.proxy.Error\"!\n\022BedRockK"
  "vMGetParam\022\013\n\003key\030\001 \001(\014\"]\n\024BedRockKvMGet"
  "Request\022\022\n\nstorage_id\030\001 \001(\r\0221\n\006params\030\002 "
  "\003(\0132!.bedrock.proxy.BedRockKvMGetParam\"4"
  "\n\026BedRockKvMGetKvRetPair\022\013\n\003key\030\001 \001(\014\022\r\n"
  "\005value\030\002 \001(\014\"o\n\025BedRockKvMGetResponse\0222\n"
  "\003kvs\030\001 \003(\0132%.bedrock.proxy.BedRockKvMGet"
  "KvRetPair\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.proxy."
  "Error\"$\n\025BedRockKvMDeleteParam\022\013\n\003key\030\001 "
  "\001(\014\"c\n\027BedRockKvMDeleteRequest\022\022\n\nstorag"
  "e_id\030\001 \001(\r\0224\n\006params\030\002 \003(\0132$.bedrock.pro"
  "xy.BedRockKvMDeleteParam\">\n\030BedRockKvMDe"
  "leteResponse\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.pro"
  "xy.Error\"`\n\027BedRockStartScanRequest\022\022\n\ns"
  "torage_id\030\001 \001(\r\022\021\n\tstart_key\030\002 \001(\014\022\017\n\007en"
  "d_key\030\003 \001(\014\022\r\n\005limit\030\004 \001(\005\"S\n\030BedRockSta"
  "rtScanResponse\022\023\n\013iterator_id\030\001 \001(\004\022\"\n\003e"
  "rr\030\377\001 \001(\0162\024.bedrock.proxy.Error\"-\n\026BedRo"
  "ckStopScanRequest\022\023\n\013iterator_id\030\001 \001(\004\"="
  "\n\027BedRockStopScanResponse\022\"\n\003err\030\377\001 \001(\0162"
  "\024.bedrock.proxy.Error\"+\n\024BedRockDoScanRe"
  "quest\022\023\n\013iterator_id\030\001 \001(\004\"+\n\rBedRockKvP"
  "air\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"w\n\025BedRo"
  "ckDoScanResponse\022)\n\003kvs\030\001 \003(\0132\034.bedrock."
  "proxy.BedRockKvPair\022\017\n\007no_left\030\002 \001(\010\022\"\n\003"
  "err\030\377\001 \001(\0162\024.bedrock.proxy.Error\"W\n\023BedR"
  "ockTxRecordLock\0223\n\tlock_type\030\001 \001(\0162 .bed"
  "rock.proxy.BedRockTxLockType\022\013\n\003key\030\002 \001("
  "\014\"m\n\022BedRockTxRangeLock\0223\n\tlock_type\030\001 \001"
  "(\0162 .bedrock.proxy.BedRockTxLockType\022\021\n\t"
  "start_key\030\002 \001(\014\022\017\n\007end_key\030\003 \001(\014\"\235\001\n\025Bed"
  "RockStartTxRequest\022\022\n\nstorage_id\030\001 \001(\r\0228"
  "\n\014record_locks\030\002 \003(\0132\".bedrock.proxy.Bed"
  "RockTxRecordLock\0226\n\013range_locks\030\003 \003(\0132!."
  "bedrock.proxy.BedRockTxRangeLock\"K\n\026BedR"
  "ockStartTxResponse\022\r\n\005tx_id\030\001 \001(\004\022\"\n\003err"
  "\030\377\001 \001(\0162\024.bedrock.proxy.Error\";\n\026BedRock"
  "CommitTxRequest\022\022\n\nstorage_id\030\001 \001(\r\022\r\n\005t"
  "x_id\030\002 \001(\004\"=\n\027BedRockCommitTxResponse\022\"\n"
  "\003err\030\377\001 \001(\0162\024.bedrock.proxy.Error\"=\n\030Bed"
  "RockRollbackTxRequest\022\022\n\nstorage_id\030\001 \001("
  "\r\022\r\n\005tx_id\030\002 \001(\004\"\?\n\031BedRockRollbackTxRes"
  "ponse\022\"\n\003err\030\377\001 \001(\0162\024.bedrock.proxy.Erro"
  "r*#\n\010TxStatus\022\t\n\005START\020\000\022\014\n\010FINISHED\020\001*F"
  "\n\005Error\022\006\n\002OK\020\000\022\017\n\013NO_SUCH_KEY\020\001\022\026\n\022INVL"
  "IAD_PARAMETERS\020\002\022\014\n\007UNKNOWN\020\377\001*.\n\021BedRoc"
  "kTxLockType\022\n\n\006SHARED\020\000\022\r\n\tEXCLUSIVE\020\0012\213"
  "\t\n\014ProxyService\022W\n\014BedRockKvSet\022\".bedroc"
  "k.proxy.BedRockKvSetRequest\032#.bedrock.pr"
  "oxy.BedRockKvSetResponse\022W\n\014BedRockKvGet"
  "\022\".bedrock.proxy.BedRockKvGetRequest\032#.b"
  "edrock.proxy.BedRockKvGetResponse\022`\n\017Bed"
  "RockKvDelete\022%.bedrock.proxy.BedRockKvDe"
  "leteRequest\032&.bedrock.proxy.BedRockKvDel"
  "eteResponse\022Z\n\rBedRockKvMSet\022#.bedrock.p"
  "roxy.BedRockKvMSetRequest\032$.bedrock.prox"
  "y.BedRockKvMSetResponse\022Z\n\rBedRockKvMGet"
  "\022#.bedrock.proxy.BedRockKvMGetRequest\032$."
  "bedrock.proxy.BedRockKvMGetResponse\022c\n\020B"
  "edRockKvMDelete\022&.bedrock.proxy.BedRockK"
  "vMDeleteRequest\032\'.bedrock.proxy.BedRockK"
  "vMDeleteResponse\022c\n\020BedRockStartScan\022&.b"
  "edrock.proxy.BedRockStartScanRequest\032\'.b"
  "edrock.proxy.BedRockStartScanResponse\022`\n"
  "\017BedRockStopScan\022%.bedrock.proxy.BedRock"
  "StopScanRequest\032&.bedrock.proxy.BedRockS"
  "topScanResponse\022Z\n\rBedRockDoScan\022#.bedro"
  "ck.proxy.BedRockDoScanRequest\032$.bedrock."
  "proxy.BedRockDoScanResponse\022]\n\016BedRockSt"
  "artTx\022$.bedrock.proxy.BedRockStartTxRequ"
  "est\032%.bedrock.proxy.BedRockStartTxRespon"
  "se\022`\n\017BedRockCommitTx\022%.bedrock.proxy.Be"
  "dRockCommitTxRequest\032&.bedrock.proxy.Bed"
  "RockCommitTxResponse\022f\n\021BedRockRollbackT"
  "x\022\'.bedrock.proxy.BedRockRollbackTxReque"
  "st\032(.bedrock.proxy.BedRockRollbackTxResp"
  "onseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proxy_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proxy_2eproto_sccs[32] = {
  &scc_info_BedRockCommitTxRequest_proxy_2eproto.base,
  &scc_info_BedRockCommitTxResponse_proxy_2eproto.base,
  &scc_info_BedRockDoScanRequest_proxy_2eproto.base,
  &scc_info_BedRockDoScanResponse_proxy_2eproto.base,
  &scc_info_BedRockKvDeleteRequest_proxy_2eproto.base,
  &scc_info_BedRockKvDeleteResponse_proxy_2eproto.base,
  &scc_info_BedRockKvGetRequest_proxy_2eproto.base,
  &scc_info_BedRockKvGetResponse_proxy_2eproto.base,
  &scc_info_BedRockKvMDeleteParam_proxy_2eproto.base,
  &scc_info_BedRockKvMDeleteRequest_proxy_2eproto.base,
  &scc_info_BedRockKvMDeleteResponse_proxy_2eproto.base,
  &scc_info_BedRockKvMGetKvRetPair_proxy_2eproto.base,
  &scc_info_BedRockKvMGetParam_proxy_2eproto.base,
  &scc_info_BedRockKvMGetRequest_proxy_2eproto.base,
  &scc_info_BedRockKvMGetResponse_proxy_2eproto.base,
  &scc_info_BedRockKvMSetParam_proxy_2eproto.base,
  &scc_info_BedRockKvMSetRequest_proxy_2eproto.base,
  &scc_info_BedRockKvMSetResponse_proxy_2eproto.base,
  &scc_info_BedRockKvPair_proxy_2eproto.base,
  &scc_info_BedRockKvSetRequest_proxy_2eproto.base,
  &scc_info_BedRockKvSetResponse_proxy_2eproto.base,
  &scc_info_BedRockRollbackTxRequest_proxy_2eproto.base,
  &scc_info_BedRockRollbackTxResponse_proxy_2eproto.base,
  &scc_info_BedRockStartScanRequest_proxy_2eproto.base,
  &scc_info_BedRockStartScanResponse_proxy_2eproto.base,
  &scc_info_BedRockStartTxRequest_proxy_2eproto.base,
  &scc_info_BedRockStartTxResponse_proxy_2eproto.base,
  &scc_info_BedRockStopScanRequest_proxy_2eproto.base,
  &scc_info_BedRockStopScanResponse_proxy_2eproto.base,
  &scc_info_BedRockTxRangeLock_proxy_2eproto.base,
  &scc_info_BedRockTxRecordLock_proxy_2eproto.base,
  &scc_info_TxRecord_proxy_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proxy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2eproto = {
  false, false, descriptor_table_protodef_proxy_2eproto, "proxy.proto", 3737,
  &descriptor_table_proxy_2eproto_once, descriptor_table_proxy_2eproto_sccs, descriptor_table_proxy_2eproto_deps, 32, 0,
  schemas, file_default_instances, TableStruct_proxy_2eproto::offsets,
  file_level_metadata_proxy_2eproto, 32, file_level_enum_descriptors_proxy_2eproto, file_level_service_descriptors_proxy_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proxy_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proxy_2eproto)), true);
namespace bedrock {
namespace proxy {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proxy_2eproto);
  return file_level_enum_descriptors_proxy_2eproto[0];
}
bool TxStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proxy_2eproto);
  return file_level_enum_descriptors_proxy_2eproto[1];
}
bool Error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BedRockTxLockType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proxy_2eproto);
  return file_level_enum_descriptors_proxy_2eproto[2];
}
bool BedRockTxLockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TxRecord::InitAsDefaultInstance() {
}
class TxRecord::_Internal {
 public:
};

TxRecord::TxRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.TxRecord)
}
TxRecord::TxRecord(const TxRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.TxRecord)
}

void TxRecord::SharedCtor() {
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(status_));
}

TxRecord::~TxRecord() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.TxRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TxRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TxRecord::ArenaDtor(void* object) {
  TxRecord* _this = reinterpret_cast< TxRecord* >(object);
  (void)_this;
}
void TxRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxRecord& TxRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TxRecord_proxy_2eproto.base);
  return *internal_default_instance();
}


void TxRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.TxRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bedrock.proxy.TxStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bedrock::proxy::TxStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 heartbeat_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heartbeat_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.TxRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // .bedrock.proxy.TxStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // uint64 heartbeat_ts = 3;
  if (this->heartbeat_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_heartbeat_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.TxRecord)
  return target;
}

size_t TxRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.TxRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // uint64 heartbeat_ts = 3;
  if (this->heartbeat_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_heartbeat_ts());
  }

  // .bedrock.proxy.TxStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.TxRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const TxRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.TxRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.TxRecord)
    MergeFrom(*source);
  }
}

void TxRecord::MergeFrom(const TxRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.TxRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.heartbeat_ts() != 0) {
    _internal_set_heartbeat_ts(from._internal_heartbeat_ts());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void TxRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.TxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxRecord::CopyFrom(const TxRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.TxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRecord::IsInitialized() const {
  return true;
}

void TxRecord::InternalSwap(TxRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxRecord, status_)
      + sizeof(TxRecord::status_)
      - PROTOBUF_FIELD_OFFSET(TxRecord, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvGetRequest::InitAsDefaultInstance() {
}
class BedRockKvGetRequest::_Internal {
 public:
};

BedRockKvGetRequest::BedRockKvGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvGetRequest)
}
BedRockKvGetRequest::BedRockKvGetRequest(const BedRockKvGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvGetRequest)
}

void BedRockKvGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvGetRequest_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_id_ = 0u;
}

BedRockKvGetRequest::~BedRockKvGetRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvGetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvGetRequest::ArenaDtor(void* object) {
  BedRockKvGetRequest* _this = reinterpret_cast< BedRockKvGetRequest* >(object);
  (void)_this;
}
void BedRockKvGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvGetRequest& BedRockKvGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvGetRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvGetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvGetRequest)
  return target;
}

size_t BedRockKvGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvGetRequest)
    MergeFrom(*source);
  }
}

void BedRockKvGetRequest::MergeFrom(const BedRockKvGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockKvGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvGetRequest::CopyFrom(const BedRockKvGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvGetRequest::IsInitialized() const {
  return true;
}

void BedRockKvGetRequest::InternalSwap(BedRockKvGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(storage_id_, other->storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvGetResponse::InitAsDefaultInstance() {
}
class BedRockKvGetResponse::_Internal {
 public:
};

BedRockKvGetResponse::BedRockKvGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvGetResponse)
}
BedRockKvGetResponse::BedRockKvGetResponse(const BedRockKvGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvGetResponse)
}

void BedRockKvGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvGetResponse_proxy_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_ = 0;
}

BedRockKvGetResponse::~BedRockKvGetResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvGetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvGetResponse::ArenaDtor(void* object) {
  BedRockKvGetResponse* _this = reinterpret_cast< BedRockKvGetResponse* >(object);
  (void)_this;
}
void BedRockKvGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvGetResponse& BedRockKvGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvGetResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvGetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvGetResponse)
  return target;
}

size_t BedRockKvGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvGetResponse)
    MergeFrom(*source);
  }
}

void BedRockKvGetResponse::MergeFrom(const BedRockKvGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockKvGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvGetResponse::CopyFrom(const BedRockKvGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvGetResponse::IsInitialized() const {
  return true;
}

void BedRockKvGetResponse::InternalSwap(BedRockKvGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvSetRequest::InitAsDefaultInstance() {
}
class BedRockKvSetRequest::_Internal {
 public:
};

BedRockKvSetRequest::BedRockKvSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvSetRequest)
}
BedRockKvSetRequest::BedRockKvSetRequest(const BedRockKvSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvSetRequest)
}

void BedRockKvSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvSetRequest_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_id_ = 0u;
}

BedRockKvSetRequest::~BedRockKvSetRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvSetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvSetRequest::ArenaDtor(void* object) {
  BedRockKvSetRequest* _this = reinterpret_cast< BedRockKvSetRequest* >(object);
  (void)_this;
}
void BedRockKvSetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvSetRequest& BedRockKvSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvSetRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvSetRequest)
  return target;
}

size_t BedRockKvSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvSetRequest)
    MergeFrom(*source);
  }
}

void BedRockKvSetRequest::MergeFrom(const BedRockKvSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockKvSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvSetRequest::CopyFrom(const BedRockKvSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvSetRequest::IsInitialized() const {
  return true;
}

void BedRockKvSetRequest::InternalSwap(BedRockKvSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(storage_id_, other->storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvSetResponse::InitAsDefaultInstance() {
}
class BedRockKvSetResponse::_Internal {
 public:
};

BedRockKvSetResponse::BedRockKvSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvSetResponse)
}
BedRockKvSetResponse::BedRockKvSetResponse(const BedRockKvSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvSetResponse)
}

void BedRockKvSetResponse::SharedCtor() {
  err_ = 0;
}

BedRockKvSetResponse::~BedRockKvSetResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvSetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvSetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockKvSetResponse::ArenaDtor(void* object) {
  BedRockKvSetResponse* _this = reinterpret_cast< BedRockKvSetResponse* >(object);
  (void)_this;
}
void BedRockKvSetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvSetResponse& BedRockKvSetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvSetResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvSetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvSetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvSetResponse)
  return target;
}

size_t BedRockKvSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvSetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvSetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvSetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvSetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvSetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvSetResponse)
    MergeFrom(*source);
  }
}

void BedRockKvSetResponse::MergeFrom(const BedRockKvSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockKvSetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvSetResponse::CopyFrom(const BedRockKvSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvSetResponse::IsInitialized() const {
  return true;
}

void BedRockKvSetResponse::InternalSwap(BedRockKvSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvSetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvDeleteRequest::InitAsDefaultInstance() {
}
class BedRockKvDeleteRequest::_Internal {
 public:
};

BedRockKvDeleteRequest::BedRockKvDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvDeleteRequest)
}
BedRockKvDeleteRequest::BedRockKvDeleteRequest(const BedRockKvDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvDeleteRequest)
}

void BedRockKvDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvDeleteRequest_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_id_ = 0u;
}

BedRockKvDeleteRequest::~BedRockKvDeleteRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvDeleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvDeleteRequest::ArenaDtor(void* object) {
  BedRockKvDeleteRequest* _this = reinterpret_cast< BedRockKvDeleteRequest* >(object);
  (void)_this;
}
void BedRockKvDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvDeleteRequest& BedRockKvDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvDeleteRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvDeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvDeleteRequest)
  return target;
}

size_t BedRockKvDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvDeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvDeleteRequest)
    MergeFrom(*source);
  }
}

void BedRockKvDeleteRequest::MergeFrom(const BedRockKvDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockKvDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvDeleteRequest::CopyFrom(const BedRockKvDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvDeleteRequest::IsInitialized() const {
  return true;
}

void BedRockKvDeleteRequest::InternalSwap(BedRockKvDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(storage_id_, other->storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvDeleteResponse::InitAsDefaultInstance() {
}
class BedRockKvDeleteResponse::_Internal {
 public:
};

BedRockKvDeleteResponse::BedRockKvDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvDeleteResponse)
}
BedRockKvDeleteResponse::BedRockKvDeleteResponse(const BedRockKvDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvDeleteResponse)
}

void BedRockKvDeleteResponse::SharedCtor() {
  err_ = 0;
}

BedRockKvDeleteResponse::~BedRockKvDeleteResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvDeleteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockKvDeleteResponse::ArenaDtor(void* object) {
  BedRockKvDeleteResponse* _this = reinterpret_cast< BedRockKvDeleteResponse* >(object);
  (void)_this;
}
void BedRockKvDeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvDeleteResponse& BedRockKvDeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvDeleteResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvDeleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvDeleteResponse)
  return target;
}

size_t BedRockKvDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvDeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvDeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvDeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvDeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvDeleteResponse)
    MergeFrom(*source);
  }
}

void BedRockKvDeleteResponse::MergeFrom(const BedRockKvDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockKvDeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvDeleteResponse::CopyFrom(const BedRockKvDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvDeleteResponse::IsInitialized() const {
  return true;
}

void BedRockKvDeleteResponse::InternalSwap(BedRockKvDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvDeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMSetParam::InitAsDefaultInstance() {
}
class BedRockKvMSetParam::_Internal {
 public:
};

BedRockKvMSetParam::BedRockKvMSetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMSetParam)
}
BedRockKvMSetParam::BedRockKvMSetParam(const BedRockKvMSetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMSetParam)
}

void BedRockKvMSetParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvMSetParam_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BedRockKvMSetParam::~BedRockKvMSetParam() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMSetParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMSetParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvMSetParam::ArenaDtor(void* object) {
  BedRockKvMSetParam* _this = reinterpret_cast< BedRockKvMSetParam* >(object);
  (void)_this;
}
void BedRockKvMSetParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMSetParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMSetParam& BedRockKvMSetParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMSetParam_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMSetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMSetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMSetParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMSetParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMSetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMSetParam)
  return target;
}

size_t BedRockKvMSetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMSetParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMSetParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMSetParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMSetParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMSetParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMSetParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMSetParam)
    MergeFrom(*source);
  }
}

void BedRockKvMSetParam::MergeFrom(const BedRockKvMSetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMSetParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void BedRockKvMSetParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMSetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMSetParam::CopyFrom(const BedRockKvMSetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMSetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMSetParam::IsInitialized() const {
  return true;
}

void BedRockKvMSetParam::InternalSwap(BedRockKvMSetParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMSetParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMSetRequest::InitAsDefaultInstance() {
}
class BedRockKvMSetRequest::_Internal {
 public:
};

BedRockKvMSetRequest::BedRockKvMSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMSetRequest)
}
BedRockKvMSetRequest::BedRockKvMSetRequest(const BedRockKvMSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMSetRequest)
}

void BedRockKvMSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvMSetRequest_proxy_2eproto.base);
  storage_id_ = 0u;
}

BedRockKvMSetRequest::~BedRockKvMSetRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMSetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockKvMSetRequest::ArenaDtor(void* object) {
  BedRockKvMSetRequest* _this = reinterpret_cast< BedRockKvMSetRequest* >(object);
  (void)_this;
}
void BedRockKvMSetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMSetRequest& BedRockKvMSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMSetRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMSetRequest)
  return target;
}

size_t BedRockKvMSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMSetParam params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMSetRequest)
    MergeFrom(*source);
  }
}

void BedRockKvMSetRequest::MergeFrom(const BedRockKvMSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockKvMSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMSetRequest::CopyFrom(const BedRockKvMSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMSetRequest::IsInitialized() const {
  return true;
}

void BedRockKvMSetRequest::InternalSwap(BedRockKvMSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  swap(storage_id_, other->storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMSetResponse::InitAsDefaultInstance() {
}
class BedRockKvMSetResponse::_Internal {
 public:
};

BedRockKvMSetResponse::BedRockKvMSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMSetResponse)
}
BedRockKvMSetResponse::BedRockKvMSetResponse(const BedRockKvMSetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMSetResponse)
}

void BedRockKvMSetResponse::SharedCtor() {
  err_ = 0;
}

BedRockKvMSetResponse::~BedRockKvMSetResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMSetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMSetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockKvMSetResponse::ArenaDtor(void* object) {
  BedRockKvMSetResponse* _this = reinterpret_cast< BedRockKvMSetResponse* >(object);
  (void)_this;
}
void BedRockKvMSetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMSetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMSetResponse& BedRockKvMSetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMSetResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMSetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMSetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMSetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMSetResponse)
  return target;
}

size_t BedRockKvMSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMSetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMSetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMSetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMSetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMSetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMSetResponse)
    MergeFrom(*source);
  }
}

void BedRockKvMSetResponse::MergeFrom(const BedRockKvMSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMSetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockKvMSetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMSetResponse::CopyFrom(const BedRockKvMSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMSetResponse::IsInitialized() const {
  return true;
}

void BedRockKvMSetResponse::InternalSwap(BedRockKvMSetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMSetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMGetParam::InitAsDefaultInstance() {
}
class BedRockKvMGetParam::_Internal {
 public:
};

BedRockKvMGetParam::BedRockKvMGetParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMGetParam)
}
BedRockKvMGetParam::BedRockKvMGetParam(const BedRockKvMGetParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMGetParam)
}

void BedRockKvMGetParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvMGetParam_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BedRockKvMGetParam::~BedRockKvMGetParam() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMGetParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMGetParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvMGetParam::ArenaDtor(void* object) {
  BedRockKvMGetParam* _this = reinterpret_cast< BedRockKvMGetParam* >(object);
  (void)_this;
}
void BedRockKvMGetParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMGetParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMGetParam& BedRockKvMGetParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMGetParam_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMGetParam::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMGetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMGetParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMGetParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMGetParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMGetParam)
  return target;
}

size_t BedRockKvMGetParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMGetParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMGetParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMGetParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMGetParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMGetParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMGetParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMGetParam)
    MergeFrom(*source);
  }
}

void BedRockKvMGetParam::MergeFrom(const BedRockKvMGetParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMGetParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void BedRockKvMGetParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMGetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMGetParam::CopyFrom(const BedRockKvMGetParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMGetParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMGetParam::IsInitialized() const {
  return true;
}

void BedRockKvMGetParam::InternalSwap(BedRockKvMGetParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMGetParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMGetRequest::InitAsDefaultInstance() {
}
class BedRockKvMGetRequest::_Internal {
 public:
};

BedRockKvMGetRequest::BedRockKvMGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMGetRequest)
}
BedRockKvMGetRequest::BedRockKvMGetRequest(const BedRockKvMGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMGetRequest)
}

void BedRockKvMGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvMGetRequest_proxy_2eproto.base);
  storage_id_ = 0u;
}

BedRockKvMGetRequest::~BedRockKvMGetRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMGetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockKvMGetRequest::ArenaDtor(void* object) {
  BedRockKvMGetRequest* _this = reinterpret_cast< BedRockKvMGetRequest* >(object);
  (void)_this;
}
void BedRockKvMGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMGetRequest& BedRockKvMGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMGetRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMGetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMGetRequest)
  return target;
}

size_t BedRockKvMGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMGetParam params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMGetRequest)
    MergeFrom(*source);
  }
}

void BedRockKvMGetRequest::MergeFrom(const BedRockKvMGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockKvMGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMGetRequest::CopyFrom(const BedRockKvMGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMGetRequest::IsInitialized() const {
  return true;
}

void BedRockKvMGetRequest::InternalSwap(BedRockKvMGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  swap(storage_id_, other->storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMGetKvRetPair::InitAsDefaultInstance() {
}
class BedRockKvMGetKvRetPair::_Internal {
 public:
};

BedRockKvMGetKvRetPair::BedRockKvMGetKvRetPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMGetKvRetPair)
}
BedRockKvMGetKvRetPair::BedRockKvMGetKvRetPair(const BedRockKvMGetKvRetPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMGetKvRetPair)
}

void BedRockKvMGetKvRetPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvMGetKvRetPair_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BedRockKvMGetKvRetPair::~BedRockKvMGetKvRetPair() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMGetKvRetPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMGetKvRetPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvMGetKvRetPair::ArenaDtor(void* object) {
  BedRockKvMGetKvRetPair* _this = reinterpret_cast< BedRockKvMGetKvRetPair* >(object);
  (void)_this;
}
void BedRockKvMGetKvRetPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMGetKvRetPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMGetKvRetPair& BedRockKvMGetKvRetPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMGetKvRetPair_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMGetKvRetPair::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMGetKvRetPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMGetKvRetPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMGetKvRetPair)
  return target;
}

size_t BedRockKvMGetKvRetPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMGetKvRetPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMGetKvRetPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMGetKvRetPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMGetKvRetPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMGetKvRetPair)
    MergeFrom(*source);
  }
}

void BedRockKvMGetKvRetPair::MergeFrom(const BedRockKvMGetKvRetPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void BedRockKvMGetKvRetPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMGetKvRetPair::CopyFrom(const BedRockKvMGetKvRetPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMGetKvRetPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMGetKvRetPair::IsInitialized() const {
  return true;
}

void BedRockKvMGetKvRetPair::InternalSwap(BedRockKvMGetKvRetPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMGetKvRetPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMGetResponse::InitAsDefaultInstance() {
}
class BedRockKvMGetResponse::_Internal {
 public:
};

BedRockKvMGetResponse::BedRockKvMGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  kvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMGetResponse)
}
BedRockKvMGetResponse::BedRockKvMGetResponse(const BedRockKvMGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      kvs_(from.kvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMGetResponse)
}

void BedRockKvMGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvMGetResponse_proxy_2eproto.base);
  err_ = 0;
}

BedRockKvMGetResponse::~BedRockKvMGetResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMGetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockKvMGetResponse::ArenaDtor(void* object) {
  BedRockKvMGetResponse* _this = reinterpret_cast< BedRockKvMGetResponse* >(object);
  (void)_this;
}
void BedRockKvMGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMGetResponse& BedRockKvMGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMGetResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMGetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_kvs(i), target, stream);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMGetResponse)
  return target;
}

size_t BedRockKvMGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMGetKvRetPair kvs = 1;
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMGetResponse)
    MergeFrom(*source);
  }
}

void BedRockKvMGetResponse::MergeFrom(const BedRockKvMGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockKvMGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMGetResponse::CopyFrom(const BedRockKvMGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMGetResponse::IsInitialized() const {
  return true;
}

void BedRockKvMGetResponse::InternalSwap(BedRockKvMGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  kvs_.InternalSwap(&other->kvs_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMDeleteParam::InitAsDefaultInstance() {
}
class BedRockKvMDeleteParam::_Internal {
 public:
};

BedRockKvMDeleteParam::BedRockKvMDeleteParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMDeleteParam)
}
BedRockKvMDeleteParam::BedRockKvMDeleteParam(const BedRockKvMDeleteParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMDeleteParam)
}

void BedRockKvMDeleteParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvMDeleteParam_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BedRockKvMDeleteParam::~BedRockKvMDeleteParam() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMDeleteParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMDeleteParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvMDeleteParam::ArenaDtor(void* object) {
  BedRockKvMDeleteParam* _this = reinterpret_cast< BedRockKvMDeleteParam* >(object);
  (void)_this;
}
void BedRockKvMDeleteParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMDeleteParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMDeleteParam& BedRockKvMDeleteParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMDeleteParam_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMDeleteParam::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMDeleteParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMDeleteParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMDeleteParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMDeleteParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMDeleteParam)
  return target;
}

size_t BedRockKvMDeleteParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMDeleteParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMDeleteParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMDeleteParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMDeleteParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMDeleteParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMDeleteParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMDeleteParam)
    MergeFrom(*source);
  }
}

void BedRockKvMDeleteParam::MergeFrom(const BedRockKvMDeleteParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMDeleteParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void BedRockKvMDeleteParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMDeleteParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMDeleteParam::CopyFrom(const BedRockKvMDeleteParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMDeleteParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMDeleteParam::IsInitialized() const {
  return true;
}

void BedRockKvMDeleteParam::InternalSwap(BedRockKvMDeleteParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMDeleteParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMDeleteRequest::InitAsDefaultInstance() {
}
class BedRockKvMDeleteRequest::_Internal {
 public:
};

BedRockKvMDeleteRequest::BedRockKvMDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMDeleteRequest)
}
BedRockKvMDeleteRequest::BedRockKvMDeleteRequest(const BedRockKvMDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMDeleteRequest)
}

void BedRockKvMDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvMDeleteRequest_proxy_2eproto.base);
  storage_id_ = 0u;
}

BedRockKvMDeleteRequest::~BedRockKvMDeleteRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMDeleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockKvMDeleteRequest::ArenaDtor(void* object) {
  BedRockKvMDeleteRequest* _this = reinterpret_cast< BedRockKvMDeleteRequest* >(object);
  (void)_this;
}
void BedRockKvMDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMDeleteRequest& BedRockKvMDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMDeleteRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMDeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMDeleteRequest)
  return target;
}

size_t BedRockKvMDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMDeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvMDeleteParam params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMDeleteRequest)
    MergeFrom(*source);
  }
}

void BedRockKvMDeleteRequest::MergeFrom(const BedRockKvMDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockKvMDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMDeleteRequest::CopyFrom(const BedRockKvMDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMDeleteRequest::IsInitialized() const {
  return true;
}

void BedRockKvMDeleteRequest::InternalSwap(BedRockKvMDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  swap(storage_id_, other->storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvMDeleteResponse::InitAsDefaultInstance() {
}
class BedRockKvMDeleteResponse::_Internal {
 public:
};

BedRockKvMDeleteResponse::BedRockKvMDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvMDeleteResponse)
}
BedRockKvMDeleteResponse::BedRockKvMDeleteResponse(const BedRockKvMDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvMDeleteResponse)
}

void BedRockKvMDeleteResponse::SharedCtor() {
  err_ = 0;
}

BedRockKvMDeleteResponse::~BedRockKvMDeleteResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvMDeleteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvMDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockKvMDeleteResponse::ArenaDtor(void* object) {
  BedRockKvMDeleteResponse* _this = reinterpret_cast< BedRockKvMDeleteResponse* >(object);
  (void)_this;
}
void BedRockKvMDeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvMDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvMDeleteResponse& BedRockKvMDeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvMDeleteResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvMDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvMDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvMDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvMDeleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvMDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvMDeleteResponse)
  return target;
}

size_t BedRockKvMDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvMDeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvMDeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvMDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvMDeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvMDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvMDeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvMDeleteResponse)
    MergeFrom(*source);
  }
}

void BedRockKvMDeleteResponse::MergeFrom(const BedRockKvMDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvMDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockKvMDeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvMDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvMDeleteResponse::CopyFrom(const BedRockKvMDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvMDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvMDeleteResponse::IsInitialized() const {
  return true;
}

void BedRockKvMDeleteResponse::InternalSwap(BedRockKvMDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvMDeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockStartScanRequest::InitAsDefaultInstance() {
}
class BedRockStartScanRequest::_Internal {
 public:
};

BedRockStartScanRequest::BedRockStartScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStartScanRequest)
}
BedRockStartScanRequest::BedRockStartScanRequest(const BedRockStartScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_key().empty()) {
    start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_key(),
      GetArena());
  }
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_key().empty()) {
    end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_key(),
      GetArena());
  }
  ::memcpy(&storage_id_, &from.storage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&storage_id_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStartScanRequest)
}

void BedRockStartScanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockStartScanRequest_proxy_2eproto.base);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&storage_id_)) + sizeof(limit_));
}

BedRockStartScanRequest::~BedRockStartScanRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStartScanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockStartScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockStartScanRequest::ArenaDtor(void* object) {
  BedRockStartScanRequest* _this = reinterpret_cast< BedRockStartScanRequest* >(object);
  (void)_this;
}
void BedRockStartScanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockStartScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockStartScanRequest& BedRockStartScanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockStartScanRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockStartScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStartScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&storage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&storage_id_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStartScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes end_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_end_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockStartScanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStartScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start_key(), target);
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_end_key(), target);
  }

  // int32 limit = 4;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStartScanRequest)
  return target;
}

size_t BedRockStartScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStartScanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_key());
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_key());
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  // int32 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockStartScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockStartScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockStartScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockStartScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockStartScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockStartScanRequest)
    MergeFrom(*source);
  }
}

void BedRockStartScanRequest::MergeFrom(const BedRockStartScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStartScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {
    _internal_set_start_key(from._internal_start_key());
  }
  if (from.end_key().size() > 0) {
    _internal_set_end_key(from._internal_end_key());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void BedRockStartScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockStartScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockStartScanRequest::CopyFrom(const BedRockStartScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStartScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStartScanRequest::IsInitialized() const {
  return true;
}

void BedRockStartScanRequest::InternalSwap(BedRockStartScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_key_.Swap(&other->start_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_key_.Swap(&other->end_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockStartScanRequest, limit_)
      + sizeof(BedRockStartScanRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(BedRockStartScanRequest, storage_id_)>(
          reinterpret_cast<char*>(&storage_id_),
          reinterpret_cast<char*>(&other->storage_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStartScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockStartScanResponse::InitAsDefaultInstance() {
}
class BedRockStartScanResponse::_Internal {
 public:
};

BedRockStartScanResponse::BedRockStartScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStartScanResponse)
}
BedRockStartScanResponse::BedRockStartScanResponse(const BedRockStartScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iterator_id_, &from.iterator_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&iterator_id_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStartScanResponse)
}

void BedRockStartScanResponse::SharedCtor() {
  ::memset(&iterator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&iterator_id_)) + sizeof(err_));
}

BedRockStartScanResponse::~BedRockStartScanResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStartScanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockStartScanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockStartScanResponse::ArenaDtor(void* object) {
  BedRockStartScanResponse* _this = reinterpret_cast< BedRockStartScanResponse* >(object);
  (void)_this;
}
void BedRockStartScanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockStartScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockStartScanResponse& BedRockStartScanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockStartScanResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockStartScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStartScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iterator_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&iterator_id_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStartScanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 iterator_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iterator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockStartScanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStartScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->iterator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iterator_id(), target);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStartScanResponse)
  return target;
}

size_t BedRockStartScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStartScanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->iterator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iterator_id());
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockStartScanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockStartScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockStartScanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockStartScanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockStartScanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockStartScanResponse)
    MergeFrom(*source);
  }
}

void BedRockStartScanResponse::MergeFrom(const BedRockStartScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStartScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iterator_id() != 0) {
    _internal_set_iterator_id(from._internal_iterator_id());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockStartScanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockStartScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockStartScanResponse::CopyFrom(const BedRockStartScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStartScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStartScanResponse::IsInitialized() const {
  return true;
}

void BedRockStartScanResponse::InternalSwap(BedRockStartScanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockStartScanResponse, err_)
      + sizeof(BedRockStartScanResponse::err_)
      - PROTOBUF_FIELD_OFFSET(BedRockStartScanResponse, iterator_id_)>(
          reinterpret_cast<char*>(&iterator_id_),
          reinterpret_cast<char*>(&other->iterator_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStartScanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockStopScanRequest::InitAsDefaultInstance() {
}
class BedRockStopScanRequest::_Internal {
 public:
};

BedRockStopScanRequest::BedRockStopScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStopScanRequest)
}
BedRockStopScanRequest::BedRockStopScanRequest(const BedRockStopScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iterator_id_ = from.iterator_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStopScanRequest)
}

void BedRockStopScanRequest::SharedCtor() {
  iterator_id_ = PROTOBUF_ULONGLONG(0);
}

BedRockStopScanRequest::~BedRockStopScanRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStopScanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockStopScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockStopScanRequest::ArenaDtor(void* object) {
  BedRockStopScanRequest* _this = reinterpret_cast< BedRockStopScanRequest* >(object);
  (void)_this;
}
void BedRockStopScanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockStopScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockStopScanRequest& BedRockStopScanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockStopScanRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockStopScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStopScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iterator_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStopScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 iterator_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iterator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockStopScanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStopScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->iterator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iterator_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStopScanRequest)
  return target;
}

size_t BedRockStopScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStopScanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->iterator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iterator_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockStopScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockStopScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockStopScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockStopScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockStopScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockStopScanRequest)
    MergeFrom(*source);
  }
}

void BedRockStopScanRequest::MergeFrom(const BedRockStopScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStopScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iterator_id() != 0) {
    _internal_set_iterator_id(from._internal_iterator_id());
  }
}

void BedRockStopScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockStopScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockStopScanRequest::CopyFrom(const BedRockStopScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStopScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStopScanRequest::IsInitialized() const {
  return true;
}

void BedRockStopScanRequest::InternalSwap(BedRockStopScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(iterator_id_, other->iterator_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStopScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockStopScanResponse::InitAsDefaultInstance() {
}
class BedRockStopScanResponse::_Internal {
 public:
};

BedRockStopScanResponse::BedRockStopScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStopScanResponse)
}
BedRockStopScanResponse::BedRockStopScanResponse(const BedRockStopScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStopScanResponse)
}

void BedRockStopScanResponse::SharedCtor() {
  err_ = 0;
}

BedRockStopScanResponse::~BedRockStopScanResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStopScanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockStopScanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockStopScanResponse::ArenaDtor(void* object) {
  BedRockStopScanResponse* _this = reinterpret_cast< BedRockStopScanResponse* >(object);
  (void)_this;
}
void BedRockStopScanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockStopScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockStopScanResponse& BedRockStopScanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockStopScanResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockStopScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStopScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStopScanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockStopScanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStopScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStopScanResponse)
  return target;
}

size_t BedRockStopScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStopScanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockStopScanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockStopScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockStopScanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockStopScanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockStopScanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockStopScanResponse)
    MergeFrom(*source);
  }
}

void BedRockStopScanResponse::MergeFrom(const BedRockStopScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStopScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockStopScanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockStopScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockStopScanResponse::CopyFrom(const BedRockStopScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStopScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStopScanResponse::IsInitialized() const {
  return true;
}

void BedRockStopScanResponse::InternalSwap(BedRockStopScanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStopScanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockDoScanRequest::InitAsDefaultInstance() {
}
class BedRockDoScanRequest::_Internal {
 public:
};

BedRockDoScanRequest::BedRockDoScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockDoScanRequest)
}
BedRockDoScanRequest::BedRockDoScanRequest(const BedRockDoScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iterator_id_ = from.iterator_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockDoScanRequest)
}

void BedRockDoScanRequest::SharedCtor() {
  iterator_id_ = PROTOBUF_ULONGLONG(0);
}

BedRockDoScanRequest::~BedRockDoScanRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockDoScanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockDoScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockDoScanRequest::ArenaDtor(void* object) {
  BedRockDoScanRequest* _this = reinterpret_cast< BedRockDoScanRequest* >(object);
  (void)_this;
}
void BedRockDoScanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockDoScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockDoScanRequest& BedRockDoScanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockDoScanRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockDoScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockDoScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iterator_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockDoScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 iterator_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iterator_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockDoScanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockDoScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->iterator_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_iterator_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockDoScanRequest)
  return target;
}

size_t BedRockDoScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockDoScanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iterator_id = 1;
  if (this->iterator_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_iterator_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockDoScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockDoScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockDoScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockDoScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockDoScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockDoScanRequest)
    MergeFrom(*source);
  }
}

void BedRockDoScanRequest::MergeFrom(const BedRockDoScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockDoScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iterator_id() != 0) {
    _internal_set_iterator_id(from._internal_iterator_id());
  }
}

void BedRockDoScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockDoScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockDoScanRequest::CopyFrom(const BedRockDoScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockDoScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockDoScanRequest::IsInitialized() const {
  return true;
}

void BedRockDoScanRequest::InternalSwap(BedRockDoScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(iterator_id_, other->iterator_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockDoScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockKvPair::InitAsDefaultInstance() {
}
class BedRockKvPair::_Internal {
 public:
};

BedRockKvPair::BedRockKvPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockKvPair)
}
BedRockKvPair::BedRockKvPair(const BedRockKvPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockKvPair)
}

void BedRockKvPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockKvPair_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BedRockKvPair::~BedRockKvPair() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockKvPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockKvPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockKvPair::ArenaDtor(void* object) {
  BedRockKvPair* _this = reinterpret_cast< BedRockKvPair* >(object);
  (void)_this;
}
void BedRockKvPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockKvPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockKvPair& BedRockKvPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockKvPair_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockKvPair::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockKvPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockKvPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockKvPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockKvPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockKvPair)
  return target;
}

size_t BedRockKvPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockKvPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockKvPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockKvPair)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockKvPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockKvPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockKvPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockKvPair)
    MergeFrom(*source);
  }
}

void BedRockKvPair::MergeFrom(const BedRockKvPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockKvPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void BedRockKvPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockKvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockKvPair::CopyFrom(const BedRockKvPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockKvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockKvPair::IsInitialized() const {
  return true;
}

void BedRockKvPair::InternalSwap(BedRockKvPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockKvPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockDoScanResponse::InitAsDefaultInstance() {
}
class BedRockDoScanResponse::_Internal {
 public:
};

BedRockDoScanResponse::BedRockDoScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  kvs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockDoScanResponse)
}
BedRockDoScanResponse::BedRockDoScanResponse(const BedRockDoScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      kvs_(from.kvs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&no_left_, &from.no_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&no_left_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockDoScanResponse)
}

void BedRockDoScanResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockDoScanResponse_proxy_2eproto.base);
  ::memset(&no_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&no_left_)) + sizeof(err_));
}

BedRockDoScanResponse::~BedRockDoScanResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockDoScanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockDoScanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockDoScanResponse::ArenaDtor(void* object) {
  BedRockDoScanResponse* _this = reinterpret_cast< BedRockDoScanResponse* >(object);
  (void)_this;
}
void BedRockDoScanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockDoScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockDoScanResponse& BedRockDoScanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockDoScanResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockDoScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockDoScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  ::memset(&no_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&no_left_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockDoScanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bedrock.proxy.BedRockKvPair kvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool no_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          no_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockDoScanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockDoScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvPair kvs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kvs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_kvs(i), target, stream);
  }

  // bool no_left = 2;
  if (this->no_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_no_left(), target);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockDoScanResponse)
  return target;
}

size_t BedRockDoScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockDoScanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockKvPair kvs = 1;
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool no_left = 2;
  if (this->no_left() != 0) {
    total_size += 1 + 1;
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockDoScanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockDoScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockDoScanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockDoScanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockDoScanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockDoScanResponse)
    MergeFrom(*source);
  }
}

void BedRockDoScanResponse::MergeFrom(const BedRockDoScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockDoScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.no_left() != 0) {
    _internal_set_no_left(from._internal_no_left());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockDoScanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockDoScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockDoScanResponse::CopyFrom(const BedRockDoScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockDoScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockDoScanResponse::IsInitialized() const {
  return true;
}

void BedRockDoScanResponse::InternalSwap(BedRockDoScanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  kvs_.InternalSwap(&other->kvs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockDoScanResponse, err_)
      + sizeof(BedRockDoScanResponse::err_)
      - PROTOBUF_FIELD_OFFSET(BedRockDoScanResponse, no_left_)>(
          reinterpret_cast<char*>(&no_left_),
          reinterpret_cast<char*>(&other->no_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockDoScanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockTxRecordLock::InitAsDefaultInstance() {
}
class BedRockTxRecordLock::_Internal {
 public:
};

BedRockTxRecordLock::BedRockTxRecordLock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockTxRecordLock)
}
BedRockTxRecordLock::BedRockTxRecordLock(const BedRockTxRecordLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  lock_type_ = from.lock_type_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockTxRecordLock)
}

void BedRockTxRecordLock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockTxRecordLock_proxy_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lock_type_ = 0;
}

BedRockTxRecordLock::~BedRockTxRecordLock() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockTxRecordLock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockTxRecordLock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockTxRecordLock::ArenaDtor(void* object) {
  BedRockTxRecordLock* _this = reinterpret_cast< BedRockTxRecordLock* >(object);
  (void)_this;
}
void BedRockTxRecordLock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockTxRecordLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockTxRecordLock& BedRockTxRecordLock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockTxRecordLock_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockTxRecordLock::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockTxRecordLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lock_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockTxRecordLock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.BedRockTxLockType lock_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lock_type(static_cast<::bedrock::proxy::BedRockTxLockType>(val));
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockTxRecordLock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockTxRecordLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  if (this->lock_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lock_type(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockTxRecordLock)
  return target;
}

size_t BedRockTxRecordLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockTxRecordLock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  if (this->lock_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lock_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockTxRecordLock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockTxRecordLock)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockTxRecordLock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockTxRecordLock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockTxRecordLock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockTxRecordLock)
    MergeFrom(*source);
  }
}

void BedRockTxRecordLock::MergeFrom(const BedRockTxRecordLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockTxRecordLock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.lock_type() != 0) {
    _internal_set_lock_type(from._internal_lock_type());
  }
}

void BedRockTxRecordLock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockTxRecordLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockTxRecordLock::CopyFrom(const BedRockTxRecordLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockTxRecordLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockTxRecordLock::IsInitialized() const {
  return true;
}

void BedRockTxRecordLock::InternalSwap(BedRockTxRecordLock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lock_type_, other->lock_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockTxRecordLock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockTxRangeLock::InitAsDefaultInstance() {
}
class BedRockTxRangeLock::_Internal {
 public:
};

BedRockTxRangeLock::BedRockTxRangeLock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockTxRangeLock)
}
BedRockTxRangeLock::BedRockTxRangeLock(const BedRockTxRangeLock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_key().empty()) {
    start_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_key(),
      GetArena());
  }
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_key().empty()) {
    end_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_key(),
      GetArena());
  }
  lock_type_ = from.lock_type_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockTxRangeLock)
}

void BedRockTxRangeLock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockTxRangeLock_proxy_2eproto.base);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lock_type_ = 0;
}

BedRockTxRangeLock::~BedRockTxRangeLock() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockTxRangeLock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockTxRangeLock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  start_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BedRockTxRangeLock::ArenaDtor(void* object) {
  BedRockTxRangeLock* _this = reinterpret_cast< BedRockTxRangeLock* >(object);
  (void)_this;
}
void BedRockTxRangeLock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockTxRangeLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockTxRangeLock& BedRockTxRangeLock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockTxRangeLock_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockTxRangeLock::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockTxRangeLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lock_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockTxRangeLock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.BedRockTxLockType lock_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lock_type(static_cast<::bedrock::proxy::BedRockTxLockType>(val));
        } else goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes end_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_end_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockTxRangeLock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockTxRangeLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  if (this->lock_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lock_type(), target);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start_key(), target);
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_end_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockTxRangeLock)
  return target;
}

size_t BedRockTxRangeLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockTxRangeLock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_key());
  }

  // bytes end_key = 3;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end_key());
  }

  // .bedrock.proxy.BedRockTxLockType lock_type = 1;
  if (this->lock_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lock_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockTxRangeLock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockTxRangeLock)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockTxRangeLock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockTxRangeLock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockTxRangeLock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockTxRangeLock)
    MergeFrom(*source);
  }
}

void BedRockTxRangeLock::MergeFrom(const BedRockTxRangeLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockTxRangeLock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {
    _internal_set_start_key(from._internal_start_key());
  }
  if (from.end_key().size() > 0) {
    _internal_set_end_key(from._internal_end_key());
  }
  if (from.lock_type() != 0) {
    _internal_set_lock_type(from._internal_lock_type());
  }
}

void BedRockTxRangeLock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockTxRangeLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockTxRangeLock::CopyFrom(const BedRockTxRangeLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockTxRangeLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockTxRangeLock::IsInitialized() const {
  return true;
}

void BedRockTxRangeLock::InternalSwap(BedRockTxRangeLock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  start_key_.Swap(&other->start_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_key_.Swap(&other->end_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lock_type_, other->lock_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockTxRangeLock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockStartTxRequest::InitAsDefaultInstance() {
}
class BedRockStartTxRequest::_Internal {
 public:
};

BedRockStartTxRequest::BedRockStartTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_locks_(arena),
  range_locks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStartTxRequest)
}
BedRockStartTxRequest::BedRockStartTxRequest(const BedRockStartTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_locks_(from.record_locks_),
      range_locks_(from.range_locks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  storage_id_ = from.storage_id_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStartTxRequest)
}

void BedRockStartTxRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BedRockStartTxRequest_proxy_2eproto.base);
  storage_id_ = 0u;
}

BedRockStartTxRequest::~BedRockStartTxRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStartTxRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockStartTxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockStartTxRequest::ArenaDtor(void* object) {
  BedRockStartTxRequest* _this = reinterpret_cast< BedRockStartTxRequest* >(object);
  (void)_this;
}
void BedRockStartTxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockStartTxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockStartTxRequest& BedRockStartTxRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockStartTxRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockStartTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStartTxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_locks_.Clear();
  range_locks_.Clear();
  storage_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStartTxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_locks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_locks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockStartTxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStartTxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_locks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_record_locks(i), target, stream);
  }

  // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_locks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_range_locks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStartTxRequest)
  return target;
}

size_t BedRockStartTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStartTxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bedrock.proxy.BedRockTxRecordLock record_locks = 2;
  total_size += 1UL * this->_internal_record_locks_size();
  for (const auto& msg : this->record_locks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bedrock.proxy.BedRockTxRangeLock range_locks = 3;
  total_size += 1UL * this->_internal_range_locks_size();
  for (const auto& msg : this->range_locks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockStartTxRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockStartTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockStartTxRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockStartTxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockStartTxRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockStartTxRequest)
    MergeFrom(*source);
  }
}

void BedRockStartTxRequest::MergeFrom(const BedRockStartTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStartTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_locks_.MergeFrom(from.record_locks_);
  range_locks_.MergeFrom(from.range_locks_);
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockStartTxRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockStartTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockStartTxRequest::CopyFrom(const BedRockStartTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStartTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStartTxRequest::IsInitialized() const {
  return true;
}

void BedRockStartTxRequest::InternalSwap(BedRockStartTxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_locks_.InternalSwap(&other->record_locks_);
  range_locks_.InternalSwap(&other->range_locks_);
  swap(storage_id_, other->storage_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStartTxRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockStartTxResponse::InitAsDefaultInstance() {
}
class BedRockStartTxResponse::_Internal {
 public:
};

BedRockStartTxResponse::BedRockStartTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockStartTxResponse)
}
BedRockStartTxResponse::BedRockStartTxResponse(const BedRockStartTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockStartTxResponse)
}

void BedRockStartTxResponse::SharedCtor() {
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(err_));
}

BedRockStartTxResponse::~BedRockStartTxResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockStartTxResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockStartTxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockStartTxResponse::ArenaDtor(void* object) {
  BedRockStartTxResponse* _this = reinterpret_cast< BedRockStartTxResponse* >(object);
  (void)_this;
}
void BedRockStartTxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockStartTxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockStartTxResponse& BedRockStartTxResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockStartTxResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockStartTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockStartTxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(err_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockStartTxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockStartTxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockStartTxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_id(), target);
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockStartTxResponse)
  return target;
}

size_t BedRockStartTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockStartTxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_id = 1;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockStartTxResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockStartTxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockStartTxResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockStartTxResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockStartTxResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockStartTxResponse)
    MergeFrom(*source);
  }
}

void BedRockStartTxResponse::MergeFrom(const BedRockStartTxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockStartTxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockStartTxResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockStartTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockStartTxResponse::CopyFrom(const BedRockStartTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockStartTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockStartTxResponse::IsInitialized() const {
  return true;
}

void BedRockStartTxResponse::InternalSwap(BedRockStartTxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockStartTxResponse, err_)
      + sizeof(BedRockStartTxResponse::err_)
      - PROTOBUF_FIELD_OFFSET(BedRockStartTxResponse, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockStartTxResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockCommitTxRequest::InitAsDefaultInstance() {
}
class BedRockCommitTxRequest::_Internal {
 public:
};

BedRockCommitTxRequest::BedRockCommitTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockCommitTxRequest)
}
BedRockCommitTxRequest::BedRockCommitTxRequest(const BedRockCommitTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_id_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(storage_id_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockCommitTxRequest)
}

void BedRockCommitTxRequest::SharedCtor() {
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_id_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(storage_id_));
}

BedRockCommitTxRequest::~BedRockCommitTxRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockCommitTxRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockCommitTxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockCommitTxRequest::ArenaDtor(void* object) {
  BedRockCommitTxRequest* _this = reinterpret_cast< BedRockCommitTxRequest* >(object);
  (void)_this;
}
void BedRockCommitTxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockCommitTxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockCommitTxRequest& BedRockCommitTxRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockCommitTxRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockCommitTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockCommitTxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_id_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(storage_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockCommitTxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockCommitTxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockCommitTxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint64 tx_id = 2;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tx_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockCommitTxRequest)
  return target;
}

size_t BedRockCommitTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockCommitTxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_id = 2;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockCommitTxRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockCommitTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockCommitTxRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockCommitTxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockCommitTxRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockCommitTxRequest)
    MergeFrom(*source);
  }
}

void BedRockCommitTxRequest::MergeFrom(const BedRockCommitTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockCommitTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockCommitTxRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockCommitTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockCommitTxRequest::CopyFrom(const BedRockCommitTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockCommitTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockCommitTxRequest::IsInitialized() const {
  return true;
}

void BedRockCommitTxRequest::InternalSwap(BedRockCommitTxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockCommitTxRequest, storage_id_)
      + sizeof(BedRockCommitTxRequest::storage_id_)
      - PROTOBUF_FIELD_OFFSET(BedRockCommitTxRequest, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockCommitTxRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockCommitTxResponse::InitAsDefaultInstance() {
}
class BedRockCommitTxResponse::_Internal {
 public:
};

BedRockCommitTxResponse::BedRockCommitTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockCommitTxResponse)
}
BedRockCommitTxResponse::BedRockCommitTxResponse(const BedRockCommitTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockCommitTxResponse)
}

void BedRockCommitTxResponse::SharedCtor() {
  err_ = 0;
}

BedRockCommitTxResponse::~BedRockCommitTxResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockCommitTxResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockCommitTxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockCommitTxResponse::ArenaDtor(void* object) {
  BedRockCommitTxResponse* _this = reinterpret_cast< BedRockCommitTxResponse* >(object);
  (void)_this;
}
void BedRockCommitTxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockCommitTxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockCommitTxResponse& BedRockCommitTxResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockCommitTxResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockCommitTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockCommitTxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockCommitTxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockCommitTxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockCommitTxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockCommitTxResponse)
  return target;
}

size_t BedRockCommitTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockCommitTxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockCommitTxResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockCommitTxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockCommitTxResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockCommitTxResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockCommitTxResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockCommitTxResponse)
    MergeFrom(*source);
  }
}

void BedRockCommitTxResponse::MergeFrom(const BedRockCommitTxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockCommitTxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockCommitTxResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockCommitTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockCommitTxResponse::CopyFrom(const BedRockCommitTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockCommitTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockCommitTxResponse::IsInitialized() const {
  return true;
}

void BedRockCommitTxResponse::InternalSwap(BedRockCommitTxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockCommitTxResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockRollbackTxRequest::InitAsDefaultInstance() {
}
class BedRockRollbackTxRequest::_Internal {
 public:
};

BedRockRollbackTxRequest::BedRockRollbackTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockRollbackTxRequest)
}
BedRockRollbackTxRequest::BedRockRollbackTxRequest(const BedRockRollbackTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tx_id_, &from.tx_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_id_) -
    reinterpret_cast<char*>(&tx_id_)) + sizeof(storage_id_));
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockRollbackTxRequest)
}

void BedRockRollbackTxRequest::SharedCtor() {
  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_id_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(storage_id_));
}

BedRockRollbackTxRequest::~BedRockRollbackTxRequest() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockRollbackTxRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockRollbackTxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockRollbackTxRequest::ArenaDtor(void* object) {
  BedRockRollbackTxRequest* _this = reinterpret_cast< BedRockRollbackTxRequest* >(object);
  (void)_this;
}
void BedRockRollbackTxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockRollbackTxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockRollbackTxRequest& BedRockRollbackTxRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockRollbackTxRequest_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockRollbackTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockRollbackTxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tx_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_id_) -
      reinterpret_cast<char*>(&tx_id_)) + sizeof(storage_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockRollbackTxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 storage_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockRollbackTxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockRollbackTxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_storage_id(), target);
  }

  // uint64 tx_id = 2;
  if (this->tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tx_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockRollbackTxRequest)
  return target;
}

size_t BedRockRollbackTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockRollbackTxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_id = 2;
  if (this->tx_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_id());
  }

  // uint32 storage_id = 1;
  if (this->storage_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockRollbackTxRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockRollbackTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockRollbackTxRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockRollbackTxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockRollbackTxRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockRollbackTxRequest)
    MergeFrom(*source);
  }
}

void BedRockRollbackTxRequest::MergeFrom(const BedRockRollbackTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockRollbackTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_id() != 0) {
    _internal_set_tx_id(from._internal_tx_id());
  }
  if (from.storage_id() != 0) {
    _internal_set_storage_id(from._internal_storage_id());
  }
}

void BedRockRollbackTxRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockRollbackTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockRollbackTxRequest::CopyFrom(const BedRockRollbackTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockRollbackTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockRollbackTxRequest::IsInitialized() const {
  return true;
}

void BedRockRollbackTxRequest::InternalSwap(BedRockRollbackTxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BedRockRollbackTxRequest, storage_id_)
      + sizeof(BedRockRollbackTxRequest::storage_id_)
      - PROTOBUF_FIELD_OFFSET(BedRockRollbackTxRequest, tx_id_)>(
          reinterpret_cast<char*>(&tx_id_),
          reinterpret_cast<char*>(&other->tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockRollbackTxRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BedRockRollbackTxResponse::InitAsDefaultInstance() {
}
class BedRockRollbackTxResponse::_Internal {
 public:
};

BedRockRollbackTxResponse::BedRockRollbackTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bedrock.proxy.BedRockRollbackTxResponse)
}
BedRockRollbackTxResponse::BedRockRollbackTxResponse(const BedRockRollbackTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:bedrock.proxy.BedRockRollbackTxResponse)
}

void BedRockRollbackTxResponse::SharedCtor() {
  err_ = 0;
}

BedRockRollbackTxResponse::~BedRockRollbackTxResponse() {
  // @@protoc_insertion_point(destructor:bedrock.proxy.BedRockRollbackTxResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BedRockRollbackTxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BedRockRollbackTxResponse::ArenaDtor(void* object) {
  BedRockRollbackTxResponse* _this = reinterpret_cast< BedRockRollbackTxResponse* >(object);
  (void)_this;
}
void BedRockRollbackTxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BedRockRollbackTxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BedRockRollbackTxResponse& BedRockRollbackTxResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BedRockRollbackTxResponse_proxy_2eproto.base);
  return *internal_default_instance();
}


void BedRockRollbackTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bedrock.proxy.BedRockRollbackTxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BedRockRollbackTxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bedrock.proxy.Error err = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::bedrock::proxy::Error>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BedRockRollbackTxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bedrock.proxy.BedRockRollbackTxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      255, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bedrock.proxy.BedRockRollbackTxResponse)
  return target;
}

size_t BedRockRollbackTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bedrock.proxy.BedRockRollbackTxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bedrock.proxy.Error err = 255;
  if (this->err() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BedRockRollbackTxResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bedrock.proxy.BedRockRollbackTxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BedRockRollbackTxResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BedRockRollbackTxResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bedrock.proxy.BedRockRollbackTxResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bedrock.proxy.BedRockRollbackTxResponse)
    MergeFrom(*source);
  }
}

void BedRockRollbackTxResponse::MergeFrom(const BedRockRollbackTxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bedrock.proxy.BedRockRollbackTxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void BedRockRollbackTxResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bedrock.proxy.BedRockRollbackTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BedRockRollbackTxResponse::CopyFrom(const BedRockRollbackTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bedrock.proxy.BedRockRollbackTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BedRockRollbackTxResponse::IsInitialized() const {
  return true;
}

void BedRockRollbackTxResponse::InternalSwap(BedRockRollbackTxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BedRockRollbackTxResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProxyService::~ProxyService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ProxyService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proxy_2eproto);
  return file_level_service_descriptors_proxy_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* ProxyService::GetDescriptor() {
  return descriptor();
}

void ProxyService::BedRockKvSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvSetRequest*,
                         ::bedrock::proxy::BedRockKvSetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvSet() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvGetRequest*,
                         ::bedrock::proxy::BedRockKvGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvGet() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvDeleteRequest*,
                         ::bedrock::proxy::BedRockKvDeleteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvDelete() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvMSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvMSetRequest*,
                         ::bedrock::proxy::BedRockKvMSetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvMSet() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvMGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvMGetRequest*,
                         ::bedrock::proxy::BedRockKvMGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvMGet() not implemented.");
  done->Run();
}

void ProxyService::BedRockKvMDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockKvMDeleteRequest*,
                         ::bedrock::proxy::BedRockKvMDeleteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockKvMDelete() not implemented.");
  done->Run();
}

void ProxyService::BedRockStartScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockStartScanRequest*,
                         ::bedrock::proxy::BedRockStartScanResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockStartScan() not implemented.");
  done->Run();
}

void ProxyService::BedRockStopScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockStopScanRequest*,
                         ::bedrock::proxy::BedRockStopScanResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockStopScan() not implemented.");
  done->Run();
}

void ProxyService::BedRockDoScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockDoScanRequest*,
                         ::bedrock::proxy::BedRockDoScanResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockDoScan() not implemented.");
  done->Run();
}

void ProxyService::BedRockStartTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockStartTxRequest*,
                         ::bedrock::proxy::BedRockStartTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockStartTx() not implemented.");
  done->Run();
}

void ProxyService::BedRockCommitTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockCommitTxRequest*,
                         ::bedrock::proxy::BedRockCommitTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockCommitTx() not implemented.");
  done->Run();
}

void ProxyService::BedRockRollbackTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::bedrock::proxy::BedRockRollbackTxRequest*,
                         ::bedrock::proxy::BedRockRollbackTxResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BedRockRollbackTx() not implemented.");
  done->Run();
}

void ProxyService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_proxy_2eproto[0]);
  switch(method->index()) {
    case 0:
      BedRockKvSet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvSetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvSetResponse*>(
                 response),
             done);
      break;
    case 1:
      BedRockKvGet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvGetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvGetResponse*>(
                 response),
             done);
      break;
    case 2:
      BedRockKvDelete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvDeleteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvDeleteResponse*>(
                 response),
             done);
      break;
    case 3:
      BedRockKvMSet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvMSetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvMSetResponse*>(
                 response),
             done);
      break;
    case 4:
      BedRockKvMGet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvMGetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvMGetResponse*>(
                 response),
             done);
      break;
    case 5:
      BedRockKvMDelete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockKvMDeleteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockKvMDeleteResponse*>(
                 response),
             done);
      break;
    case 6:
      BedRockStartScan(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockStartScanRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockStartScanResponse*>(
                 response),
             done);
      break;
    case 7:
      BedRockStopScan(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockStopScanRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockStopScanResponse*>(
                 response),
             done);
      break;
    case 8:
      BedRockDoScan(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockDoScanRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockDoScanResponse*>(
                 response),
             done);
      break;
    case 9:
      BedRockStartTx(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockStartTxRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockStartTxResponse*>(
                 response),
             done);
      break;
    case 10:
      BedRockCommitTx(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockCommitTxRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockCommitTxResponse*>(
                 response),
             done);
      break;
    case 11:
      BedRockRollbackTx(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::bedrock::proxy::BedRockRollbackTxRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::bedrock::proxy::BedRockRollbackTxResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ProxyService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bedrock::proxy::BedRockKvSetRequest::default_instance();
    case 1:
      return ::bedrock::proxy::BedRockKvGetRequest::default_instance();
    case 2:
      return ::bedrock::proxy::BedRockKvDeleteRequest::default_instance();
    case 3:
      return ::bedrock::proxy::BedRockKvMSetRequest::default_instance();
    case 4:
      return ::bedrock::proxy::BedRockKvMGetRequest::default_instance();
    case 5:
      return ::bedrock::proxy::BedRockKvMDeleteRequest::default_instance();
    case 6:
      return ::bedrock::proxy::BedRockStartScanRequest::default_instance();
    case 7:
      return ::bedrock::proxy::BedRockStopScanRequest::default_instance();
    case 8:
      return ::bedrock::proxy::BedRockDoScanRequest::default_instance();
    case 9:
      return ::bedrock::proxy::BedRockStartTxRequest::default_instance();
    case 10:
      return ::bedrock::proxy::BedRockCommitTxRequest::default_instance();
    case 11:
      return ::bedrock::proxy::BedRockRollbackTxRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& ProxyService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::bedrock::proxy::BedRockKvSetResponse::default_instance();
    case 1:
      return ::bedrock::proxy::BedRockKvGetResponse::default_instance();
    case 2:
      return ::bedrock::proxy::BedRockKvDeleteResponse::default_instance();
    case 3:
      return ::bedrock::proxy::BedRockKvMSetResponse::default_instance();
    case 4:
      return ::bedrock::proxy::BedRockKvMGetResponse::default_instance();
    case 5:
      return ::bedrock::proxy::BedRockKvMDeleteResponse::default_instance();
    case 6:
      return ::bedrock::proxy::BedRockStartScanResponse::default_instance();
    case 7:
      return ::bedrock::proxy::BedRockStopScanResponse::default_instance();
    case 8:
      return ::bedrock::proxy::BedRockDoScanResponse::default_instance();
    case 9:
      return ::bedrock::proxy::BedRockStartTxResponse::default_instance();
    case 10:
      return ::bedrock::proxy::BedRockCommitTxResponse::default_instance();
    case 11:
      return ::bedrock::proxy::BedRockRollbackTxResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ProxyService_Stub::ProxyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ProxyService_Stub::ProxyService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
ProxyService_Stub::~ProxyService_Stub() {
  if (owns_channel_) delete channel_;
}

void ProxyService_Stub::BedRockKvSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvSetRequest* request,
                              ::bedrock::proxy::BedRockKvSetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvGetRequest* request,
                              ::bedrock::proxy::BedRockKvGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvDeleteRequest* request,
                              ::bedrock::proxy::BedRockKvDeleteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvMSet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvMSetRequest* request,
                              ::bedrock::proxy::BedRockKvMSetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvMGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvMGetRequest* request,
                              ::bedrock::proxy::BedRockKvMGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockKvMDelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockKvMDeleteRequest* request,
                              ::bedrock::proxy::BedRockKvMDeleteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockStartScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockStartScanRequest* request,
                              ::bedrock::proxy::BedRockStartScanResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockStopScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockStopScanRequest* request,
                              ::bedrock::proxy::BedRockStopScanResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockDoScan(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockDoScanRequest* request,
                              ::bedrock::proxy::BedRockDoScanResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockStartTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockStartTxRequest* request,
                              ::bedrock::proxy::BedRockStartTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockCommitTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockCommitTxRequest* request,
                              ::bedrock::proxy::BedRockCommitTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void ProxyService_Stub::BedRockRollbackTx(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::bedrock::proxy::BedRockRollbackTxRequest* request,
                              ::bedrock::proxy::BedRockRollbackTxResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proxy
}  // namespace bedrock
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bedrock::proxy::TxRecord* Arena::CreateMaybeMessage< ::bedrock::proxy::TxRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::TxRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvGetRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvGetResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvSetRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvSetResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvSetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvDeleteRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvDeleteResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMSetParam* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMSetParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMSetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMSetRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMSetResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMSetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMSetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMGetParam* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMGetParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMGetParam >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMGetRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMGetKvRetPair* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMGetKvRetPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMGetKvRetPair >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMGetResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMDeleteParam* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMDeleteParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMDeleteParam >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMDeleteRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvMDeleteResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvMDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvMDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStartScanRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStartScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStartScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStartScanResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStartScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStartScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStopScanRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStopScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStopScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStopScanResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStopScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStopScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockDoScanRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockDoScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockDoScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockKvPair* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockKvPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockKvPair >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockDoScanResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockDoScanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockDoScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockTxRecordLock* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockTxRecordLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockTxRecordLock >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockTxRangeLock* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockTxRangeLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockTxRangeLock >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStartTxRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStartTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStartTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockStartTxResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockStartTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockStartTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockCommitTxRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockCommitTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockCommitTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockCommitTxResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockCommitTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockCommitTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockRollbackTxRequest* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockRollbackTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockRollbackTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bedrock::proxy::BedRockRollbackTxResponse* Arena::CreateMaybeMessage< ::bedrock::proxy::BedRockRollbackTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bedrock::proxy::BedRockRollbackTxResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
