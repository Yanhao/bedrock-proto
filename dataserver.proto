syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "sr.ht/moyanhao/bedrock-metaserver/clients/dataserver";

package bedrock.dataserver;
option cc_generic_services = true;

message ShardMeta {
    uint64 shard_id = 1;
    google.protobuf.Timestamp create_ts = 2;
    repeated string replicates = 3;
    google.protobuf.Timestamp replicates_update_ts = 4;
    bool is_leader = 5;
    string leader = 6;
    google.protobuf.Timestamp leader_change_ts = 7; // TODO: maybe we should use term, not ts here
    uint64 next_index = 8;
    bytes min_key = 9;
    bytes max_key = 10;
}

message SplitShardRequest {
    uint64 shard_id = 1;
    uint64 new_shard_id = 2;
}

message SplitShardResponse {
}
message MergeShardRequest {
    uint64 shard_id_a = 1;
    uint64 shard_id_b = 2;
}
message MergeShardResponse {
}

message CreateShardRequest {
    uint64 shard_id = 1;

    google.protobuf.Timestamp create_ts = 2;

    repeated string replicates = 3;
    google.protobuf.Timestamp  replica_update_ts = 4;

    string leader = 5;
    google.protobuf.Timestamp leader_change_ts = 6;

    bytes min_key = 7;
    bytes max_key = 8;
}

message DeleteShardRequest {
    uint64 shard_id = 1;
}
message DeleteShardResponse {
}

message ShardInfoRequest {
    uint64 shard_id = 1;
}

message ShardInfoResponse {
    uint64 shard_id = 1;
    google.protobuf.Timestamp create_ts = 2;
    repeated string replicates = 3;
    google.protobuf.Timestamp replicates_update_ts = 4;
    bool is_leader = 5;
    string leader = 6;
    google.protobuf.Timestamp leader_change_ts = 7; // TODO: maybe we should use term, not ts here
    uint64 next_index = 8;
}

message MigrateShardRequest {
    enum Direction {
        FROM = 0;
        TO = 1;
    }
    message Entry {
        bytes key = 1;
        bytes value = 2;
    }

    uint64 shard_id_from = 1;
    uint64 shard_id_to = 2;
    string target_address = 3;
    Direction direction = 4;

    repeated Entry entries = 5;
}

message TransferShardLeaderRequest {
    uint64 shard_id = 1;
    repeated string replicates = 2;
    google.protobuf.Timestamp leader_change_ts = 3;
}

message TransferShardLeaderResponse {
}

message ShardAppendLogRequest {
    message EntryItem  {
        string op = 1;
        bytes key = 2;
        bytes value = 3;
    }
    message Entry {
        uint64 index = 1;
        repeated EntryItem items = 2;
    }

    uint64 shard_id = 1;
    google.protobuf.Timestamp leader_change_ts = 2;
    repeated Entry entries = 3;
}

message ShardAppendLogResponse {
    bool is_old_leader = 1;
    google.protobuf.Timestamp last_leader_change_ts = 2; // only valid if is_old_leader is true
    uint64 next_index = 3;
}

message ShardInstallSnapshotRequest {
    message Entry {
        bytes key = 1;
        bytes value = 2;
    }
    uint64 shard_id = 1;
    uint64 next_index = 2;
    repeated Entry entries = 3;
}

message ShardInstallSnapshotResponse {
}

message KvGetRequest {
    uint64 txid = 1;
    uint64 shard_id = 2;
    bool need_lock = 3;
    bool need_unlock = 4;
    bytes key = 5;
}

message KvGetResponse {
    bytes value = 1;
}

message KvSetRequest {
    uint64 txid = 1;
    uint64 shard_id = 2;
    bytes key = 3;
    bytes value = 4;
}

message KvSetResponse {
}


message KvDelRequest {
    uint64 txid = 1;
    uint64 shard_id = 2;
    bytes key = 3;
}

message KvDelResponse {
    bytes value = 1;
}

message KvScanRequest {
    uint64 txid = 1;
    uint64 shard_id = 2;
    bytes prefix = 3;
    uint64 limit = 4;
}

message KeyValue {
    bytes key = 1;
    bytes value = 2;
}

message KvScanResponse {
    bool no_left = 1;
    repeated KeyValue kvs = 2;
}

message ShardLockRequest {
    message Range {
        bytes start_key = 1;
        bytes end_key = 2;
    }

    uint64 txid = 1;
    uint64 shard_id = 2;

    oneof lock {
        bytes record = 3;
        Range range = 4;
    }
}

message ShardLockResponse {
}

message PrepareTxRequest {
    uint64 txid = 1;
    uint64 shard_id = 2;
    bool need_lock = 3;
    repeated KeyValue kvs = 4;
}

message PrepareTxResponse {
}

message CommitTxRequest {
    uint64 txid = 1;
    uint64 shard_id = 2;
}

message CommitTxResponse {
}

message AbortTxRequest {
    uint64 txid = 1;
    uint64 shard_id = 2;
}
message AbortTxResponse {
}

service DataService {
    rpc CreateShard(CreateShardRequest) returns (google.protobuf.Empty);
    rpc DeleteShard(DeleteShardRequest) returns (google.protobuf.Empty);
    rpc MigrateShard(stream MigrateShardRequest) returns (google.protobuf.Empty);
    rpc ShardInfo(ShardInfoRequest) returns (ShardInfoResponse);

    rpc SplitShard(SplitShardRequest) returns (SplitShardResponse);
    rpc MergeShard(MergeShardRequest) returns (MergeShardResponse);

    rpc ShardAppendLog(ShardAppendLogRequest) returns (ShardAppendLogResponse);
    rpc ShardInstallSnapshot(stream ShardInstallSnapshotRequest) returns (ShardInstallSnapshotResponse);
    rpc TransferShardLeader(TransferShardLeaderRequest) returns (TransferShardLeaderResponse);

    rpc KvGet(KvGetRequest) returns (KvGetResponse);
    rpc KvScan(KvScanRequest) returns (KvScanResponse);
    rpc KvSet(KvSetRequest) returns (KvSetResponse);
    rpc KvDel(KvDelRequest) returns (KvDelResponse);

    rpc ShardLock(ShardLockRequest) returns (ShardLockResponse); // not being used for now
    rpc PrepareTx(PrepareTxRequest) returns (PrepareTxResponse);
    rpc CommitTx(CommitTxRequest) returns (CommitTxResponse);
    rpc AbortTx(AbortTxRequest) returns (AbortTxResponse); // UnLock
}
