syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "sr.ht/moyanhao/bedrock-metaserver/dataserver";

package bedrock.dataserver;
option cc_generic_services = true;

message ShardMeta {
    uint64 shard_id = 1;
    uint64 storage_id = 2;
    google.protobuf.Timestamp create_ts = 3;
    repeated string replicates = 4;
    google.protobuf.Timestamp replicates_update_ts = 5;
    bool is_leader = 6;
    string leader = 7;
    google.protobuf.Timestamp leader_change_ts = 8; // TODO: maybe we should use term, not ts here
    uint64 last_wal_index = 9;
}

message SplitShardRequest {
}
message SplitShardResponse {
}
message MergeShardRequest {
}
message MergeShardResponse {
}

message CreateShardRequest {
    uint64 shard_id = 1;
    uint64 storage_id = 2;

    google.protobuf.Timestamp create_ts = 3;

    repeated string replicates = 4;
    google.protobuf.Timestamp  replica_update_ts = 5;

    string leader = 6;
    google.protobuf.Timestamp leader_change_ts = 7;
}

message CreateShardResponse {
}
message DeleteShardRequest {
    uint64 shard_id = 1;
}
message DeleteShardResponse {
}
message PullShardDataRequest {
}
message PullShardDataResponse {
}

message TransferShardRequest {
}

message TransferShardResponse {
}

message AddShardReplicaRequest {
}
message AddShardReplicaResponse {
}
message DeleteShardReplicaRequest {
}
message DeleteShardReplicaResponse {
}

message TransferShardLeaderRequest {
    uint64 shard_id = 1;
    repeated string replicates = 2;
    google.protobuf.Timestamp leader_change_ts = 3;
}

message TransferShardLeaderResponse {
}

message LockShardRequest {
}
message LockShardResponse {
}
message UnlockShardRequest {
}
message UnlockShardResponse {
}
message ShardReadRequest {
    uint64 shard_id = 1;
    bytes key = 2;
}
message ShardReadResponse {
    bytes value = 1;
}
message ShardWriteRequest {
    uint64 shard_id = 1;

    bytes key = 2;
    bytes value = 3;
}
message ShardWriteResponse {
    bool not_leader = 1;
}

message ShardAppendLogRequest {
    message Entry {
        string op = 1;

        uint64 index = 2;

        bytes key = 3;
        bytes value = 4;
    }

    uint64 shard_id = 1;
    google.protobuf.Timestamp leader_change_ts = 2;
    repeated Entry entries = 3;
}

message ShardAppendLogResponse {
    bool is_old_leader = 1;
    uint64 last_applied_index = 2;
}


message ShardInstallSnapshotRequest {
    uint64 shard_id = 1;
    bytes data_piece = 2;
    uint64 last_wal_index = 3;
}

message ShardInstallSnapshotResponse {
}

message ShardWriteReplicaRequest {
}
message ShardWriteReplicaResponse {
}
message ShardRepairRequest {
}
message ShardRepairResponse {
}
message DataServerJoinRequest {
}
message DataServerJoinResponse {
}
message DataServerLeaveRequest {
}
message DataServerLeaveResponse {
}

service DataService {
    // rpc SplitShard(SplitShardRequest) returns (SplitShardResponse);
    // rpc MergeShard(MergeShardRequest) returns (MergeShardResponse);
    rpc CreateShard(CreateShardRequest) returns (CreateShardResponse);
    rpc DeleteShard(DeleteShardRequest) returns (google.protobuf.Empty);
    // rpc PullShardData(PullShardDataRequest) returns (PullShardDataResponse);
    // rpc TransferShard(TransferShardRequest) returns (TransferShardResponse);
    // rpc AddShardReplica(AddShardReplicaRequest) returns (AddShardReplicaResponse);
    // rpc DeleteShardReplica(DeleteShardReplicaRequest) returns (DeleteShardReplicaResponse);
    rpc TransferShardLeader(TransferShardLeaderRequest) returns (TransferShardLeaderResponse);
    // rpc LockShard(LockShardRequest) returns (LockShardResponse);
    // rpc UnlockShard(UnlockShardRequest) returns (UnlockShardResponse);

    rpc ShardRead(ShardReadRequest) returns (ShardReadResponse);
    rpc ShardWrite(ShardWriteRequest) returns (ShardWriteResponse);

    rpc ShardAppendLog(ShardAppendLogRequest) returns (ShardAppendLogResponse);
    rpc ShardInstallSnapshot(stream ShardInstallSnapshotRequest) returns (ShardInstallSnapshotResponse);

    // rpc ShardWriteReplica(ShardWriteReplicaRequest) returns (ShardWriteReplicaResponse);
    // rpc ShardInstallSnap(ShardInstallSnapRequest) returns (ShardInstallSnapResponse);
    // rpc ShardRepair(ShardRepairRequest) returns (ShardRepairResponse);

    // rpc DataServerJoin(DataServerJoinRequest) returns (DataServerJoinResponse);
    // rpc DataServerLeave(DataServerLeaveRequest) returns (DataServerLeaveResponse);
}
